/**
 * [issue 47]
 * Add convenience methods to XXXDiagramUpdater, to allow us to
 * easily identify which elements need to be rendered on a
 * given diagram.
 *
 * Most of this dynamic template is model-specific.
 *
 * [issue 57]
 * Phantom nodes should not render _all_ nodes from the entire
 * model when called from getSemanticChildren().
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION gmf::GenModelUtils»

«AROUND additions FOR gmfgen::GenDiagramUpdater-»
	«targetDef.proceed()»

	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get all the shortcut elements that need to be rendered for a particular view.")»
	public static java.util.List getAllShortcutElements(org.eclipse.gmf.runtime.notation.View view) {
		java.util.List elements = new java.util.ArrayList();
		java.util.List edges = new java.util.ArrayList();
		getBothShortcutElementsAndEdges(view, elements, edges);
		return elements;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get all the edges that need to be rendered for a particular view.")»
	public static java.util.List getAllChildrenEdges(org.eclipse.gmf.runtime.notation.View view) {
		java.util.List elements = new java.util.ArrayList();
		java.util.List edges = new java.util.ArrayList();
		getBothShortcutElementsAndEdges(view, elements, edges);
		return edges;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get both the shortcut elements and the edges that are required for a particular view.")»
	public static void getBothShortcutElementsAndEdges(org.eclipse.gmf.runtime.notation.View view, 
			java.util.List targetElements, java.util.List targetEdges) {
		if (!view.isSetElement()) {
			return;
		}
		org.eclipse.emf.ecore.EObject modelElement = (org.eclipse.emf.ecore.EObject) view.getElement();
		java.util.List contents = modelElement.eContents();

		java.util.List<org.eclipse.emf.ecore.EObject> doneAlready = new java.util.ArrayList<org.eclipse.emf.ecore.EObject>();
		
		// EObject.eContents() will get all elements contained directly within the EObject,
		// i.e. we don't need to cast to any model-specific types anymore
		getAllImportantRelationships(doneAlready, targetElements, targetEdges, view, modelElement
				.eContents());
	}

	«REM»
		TODO There is a lot of copy and paste code in this dynamic template. This should be refactored somehow.
	«ENDREM»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a given list of EObjects in the model, what edges should be displayed?")»
	private static void getAllImportantRelationships(java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> elements, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view,
			org.eclipse.emf.common.util.EList<? extends org.eclipse.emf.ecore.EObject> list) {
		for (org.eclipse.emf.ecore.EObject e : list) {
			// NOTE: model-specific
			if (e instanceof org.openiaml.model.model.WireEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromWireEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.WireEdgesSource) e).getOutEdges()));
			}
			if (e instanceof org.openiaml.model.model.WireEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromWireEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.WireEdgeDestination) e).getInEdges()));
			}
			if (e instanceof org.openiaml.model.model.ExecutionEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromExecutionEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.ExecutionEdgesSource) e).getOutExecutions()));
			}
			if (e instanceof org.openiaml.model.model.ExecutionEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromExecutionEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.ExecutionEdgeDestination) e).getInExecutions()));
			}
			if (e instanceof org.openiaml.model.model.DataFlowEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromDataFlowEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.DataFlowEdgesSource) e).getOutFlows()));
			}
			if (e instanceof org.openiaml.model.model.DataFlowEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromDataFlowEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.DataFlowEdgeDestination) e).getInFlows()));
			}
			if (e instanceof org.openiaml.model.model.wires.ParameterEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromParameterEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.wires.ParameterEdgesSource) e).getOutParameterEdges()));
			}
			if (e instanceof org.openiaml.model.model.wires.ParameterEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromParameterEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.wires.ParameterEdgeDestination) e).getInParameterEdges()));
			}
			if (e instanceof org.openiaml.model.model.wires.ExtendsEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromExtendsEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.wires.ExtendsEdgesSource) e).getOutExtendsEdges()));
			}
			if (e instanceof org.openiaml.model.model.wires.ExtendsEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromExtendsEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.wires.ExtendsEdgeDestination) e).getInExtendsEdges()));
			}
			if (e instanceof org.openiaml.model.model.users.RequiresEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromRequiresEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.users.RequiresEdgesSource) e).getOutRequiresEdges()));
			}
			if (e instanceof org.openiaml.model.model.users.RequiresEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromRequiresEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.users.RequiresEdgeDestination) e).getInRequiresEdges()));
			}
			if (e instanceof org.openiaml.model.model.users.ProvidesEdgesSource) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromProvidesEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.users.ProvidesEdgesSource) e).getOutProvidesEdges()));
			}
			if (e instanceof org.openiaml.model.model.users.ProvidesEdgeDestination) {
				// get all incoming edges
				elements.addAll(getAllShortcutsFromProvidesEdges(doneAlready, edges, view, e,
						((org.openiaml.model.model.users.ProvidesEdgeDestination) e).getInProvidesEdges()));
			}
		}
	}

	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.WireEdge> getAllShortcutsFromWireEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.WireEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.WireEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges);
				considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges);
			}
			
			// additional special logic: if we have a WireEdgeDestination, get all of the incoming edges
			// that are RunInstanceWires, and render these as shortcut elements too (i.e. parameters)
			// (this covers SelectWires, etc...: see Issue 69)
			if (wire instanceof org.openiaml.model.model.WireEdgeDestination) {
				org.openiaml.model.model.WireEdgeDestination run = (org.openiaml.model.model.WireEdgeDestination) wire;
				java.util.List<org.openiaml.model.model.WireEdge> params = new java.util.ArrayList();
				for (org.openiaml.model.model.WireEdge e : run.getInEdges()) {
					if (e instanceof org.openiaml.model.model.wires.ConditionWire ||
							e instanceof org.openiaml.model.model.wires.ConstraintWire) {
						params.add(e);
					}
				}
				result.addAll(getAllShortcutsFromWireEdges(doneAlready, edges, view, wire, params));
				
				if (run instanceof org.openiaml.model.model.wires.ParameterEdgesSource) {
					// specifically, if this wire is also a destination of parameters, follow these up
					org.openiaml.model.model.wires.ParameterEdgesSource prun =
						(org.openiaml.model.model.wires.ParameterEdgesSource) run;
					
					result.addAll(getAllShortcutsFromParameterEdges(doneAlready, edges, view, wire, prun.getOutParameterEdges())); 
				}

				if (run instanceof org.openiaml.model.model.wires.ParameterEdgeDestination) {
					// specifically, if this wire is also a source of parameters, follow these up
					org.openiaml.model.model.wires.ParameterEdgeDestination prun =
						(org.openiaml.model.model.wires.ParameterEdgeDestination) run;
					
					result.addAll(getAllShortcutsFromParameterEdges(doneAlready, edges, view, wire, prun.getInParameterEdges())); 
				}
			} 
			
			// ParameterEdges are now done in #getAllShortcutsFromParameterEdges()
		}

		return result;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.wires.ParameterEdge> getAllShortcutsFromParameterEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.wires.ParameterEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.wires.ParameterEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				if (considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges))
					continue;
				if (considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges))
					continue;
			}
		}

		return result;
	}
		
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.wires.ExtendsEdge> getAllShortcutsFromExtendsEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.wires.ExtendsEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.wires.ExtendsEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				if (considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges))
					continue;
				if (considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges))
					continue;
			}
		}

		return result;
	}
		
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.wires.RequiresEdge> getAllShortcutsFromRequiresEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.wires.RequiresEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.wires.RequiresEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				if (considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges))
					continue;
				if (considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges))
					continue;
			}
		}

		return result;
	}
		
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.wires.ProvidesEdge> getAllShortcutsFromProvidesEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.wires.ProvidesEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.wires.ProvidesEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				if (considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges))
					continue;
				if (considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges))
					continue;
			}
		}

		return result;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.ExecutionEdge> getAllShortcutsFromExecutionEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.ExecutionEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.ExecutionEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				if (considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges))
					continue;
				if (considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges))
					continue;
			}
		}

		return result;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a list of edges, what elements are they all connected to?\n\nNOTE: return type is model-specific")»
	private static java.util.List<org.openiaml.model.model.DataFlowEdge> getAllShortcutsFromDataFlowEdges(
			java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List<org.openiaml.model.model.DataFlowEdge> outEdges) {
		java.util.List result = new java.util.LinkedList();
		
		edges.addAll(outEdges);

		// get all nodes at the start and end of the edge
		// that are not the original object source
		// NOTE: model-specific
		for (org.openiaml.model.model.DataFlowEdge wire : outEdges) {
			// only look into these edges if we can actually render them...
			if («EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall FOR editorGen.diagram»(wire) != -1) {
				if (considerElementForShortcut(wire.getFrom(), wire, view, source, doneAlready, result, edges))
					continue;
				if (considerElementForShortcut(wire.getTo(), wire, view, source, doneAlready, result, edges))
					continue;
			}
		}

		return result;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Add descriptors for elements that exist in the current diagram editor registry.")»
	private static boolean considerElementForShortcut(org.eclipse.emf.ecore.EObject childElement, 
			org.eclipse.emf.ecore.EObject wire,
			org.eclipse.gmf.runtime.notation.View view, 
			org.eclipse.emf.ecore.EObject source,
			java.util.List doneAlready,
			java.util.List result, 
			java.util.List edges) {

		if (childElement != null && !childElement.equals(source)) {
			if (doneAlready.contains(childElement))
				return true;
			int visualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR editorGen.diagram»(view,
					childElement);
			if (visualID != -1) {
				result.add(new «getNodeDescriptorQualifiedClassName()»(childElement,
						visualID));
				doneAlready.add(childElement);
				if (!edges.contains(wire))
					edges.add(wire);
				return true;
			}
		}
		
		return false;
	}
«ENDAROUND»
/**
 * Issue 57: In order to allow creation of shortcut elements that are not
 * directly contained, we make the .gmfmap element a phantom node by setting
 * its containment element to null. However, the default implementation of
 * getSemanticChildren() calls getPhantomNodesIterator() for each phantom node,
 * which by default returns _all_ elements in the current document.
 *
 * We change this behaviour to return an empty iterator instead, restoring
 * its old functionality.
 */
«AROUND getPhantomNodesIterator FOR gmfgen::GenDiagramUpdater-»
	«IF not editorGen.diagram.getPhantomNodes()->isEmpty()-»
	
	«EXPAND xpt::Common::generatedMemberComment("[jevon] Issue 57: Phantom nodes should <b>not</b> automatically return <i>all</i> matching elements in the model.")»
	private static java.util.Iterator getPhantomNodesIterator(org.eclipse.emf.ecore.resource.Resource resource) {
		return java.util.Collections.EMPTY_LIST.iterator();
	}
	«ENDIF-»
«ENDAROUND»
