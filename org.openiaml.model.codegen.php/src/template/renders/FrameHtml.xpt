«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/**
 * Render a Frame in an application of PHP/HTML.
 * All of the required content has already been included in PHP.
 * 
 * <p>We come into this template already being in PHP mode, so we have
 * to first escape out of it.
 */
«DEFINE renderFrameAsHTML FOR model::visual::Frame-»

?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<title>«frameTitle()»</title>
	<link rel="stylesheet" type="text/css" href="<?php echo IAML_RUNTIME_WEB; ?>css/default.css">
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
		var frame_id = "«safeNameString(id)-»";
		
		/**
		 * Get the current frame ID.
		 */
		function get_frame_id() {
			return frame_id;
		}
	/* ]]> */
	</script>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/stacktrace/stacktrace.js"></script>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/prototype.js"></script>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/default.js"></script>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/maps.js"></script>
	<script language="Javascript" type="application/javascript" src="onCurrentFrame.js"></script>
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
		«EXPAND template::js::DefaultJs::defaultJs FOR this-»
		
		«REM»
		/* load site XML (if requested) */
		var site_xml = null;
		function get_site_xml() {
			if (site_xml == null) {
				site_xml = load_xml("<?php echo escape_javascript_string(file_get_contents("site_layout.xml")); ?>");
			}
			return site_xml;
		}
		«ENDREM»
		
	/* ]]> */
	</script>
	<!-- operation definitions -->
	«EXPAND template::operations::Definitions::operationIncludes(false) FOR getRoot()-»

	<!-- condition definitions -->
	«EXPAND template::conditions::Definitions::conditionIncludes(false) FOR getRoot()-»

	<!-- domain instances -->
	«EXPAND template::domain::Definitions::domainObjectDefinitions(false) FOR getRoot()-»
	«EXPAND template::domain::Definitions::domainAttributeDefinitions(false) FOR getRoot()-»
	
	<!-- other content -->
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
		var try_catch_depth = 0;

		// register a operation handler
		function operation_handler_«safeName()»() {
			this.execute = function(name, args) {
				debug("[operation handler] " + name + " (" + args + ")");
				if (args.length != 10) {
					throw new IamlJavascriptException("Expected 10 arguments to operation handler resolver"); 
				}

				var resolved = null;
				switch (name) { 
					«FOREACH allContainerOperations() AS operation»
					case "«safeName(operation)»": 
						resolved = "do_«safeName(operation)»";
						break;
					«ENDFOREACH»
					/* client-side cached conditions */
					«FOREACH getClientSideCacheConditions(getRoot()) AS condition»
					case "update_cached_result_«safeName(condition)»": 
						resolved = "update_cached_result_«safeName(condition)»";
						break;
					«ENDFOREACH»
					/* client-side cached properties */
					«FOREACH getClientSideCacheProperties(getRoot()) AS property»
					case "update_instance_property_«safeName(property)»": 
						resolved = "update_instance_property_«safeName(property)»";
						break;
					«ENDFOREACH»
					default:
						throw new IamlJavascriptException("Could not resolve function '" + name + "'");
				}
				
				debug("[operation handler] resolved function: " + resolved);
				if (!resolved) {
					throw new IamlJavascriptException("Resolved operation '" + resolved + "' does not exist.");
				}
				
				// call the function virtually
				var virtual = new Function("args", "return " + resolved + "(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);");
				debug("[operation handler] virtual function: " + virtual);

				return virtual(args);
			};
		}
		set_operation_handler(new operation_handler_«safeName()»());

		// dynamic elements
		«EXPAND template::dynamic::DynamicElements::dynamicElements(false) FOR getRoot()-»

		// cached primitive condition values
		«EXPAND template::operations::ClientSideCache::cachedPrimitiveConditions FOR getRoot()»

		// cached property values
		«EXPAND template::operations::ClientSideCache::cachedProperties FOR getRoot()»

		/* actual frame onload functions (called ONCE the frame is fully loaded) */
		var stored_onload_functions = new Array();
		function addOnloadFunction(f) {
			stored_onload_functions.push(f);
		}
				
		// this needs to be loaded *after* the frame has loaded
		function loadStoredEvents() {
			// expand all onLoad functions
			for (var i = 0; i < stored_onload_functions.length; i++) {
				var f = stored_onload_functions[i];
				f();
			}

			$('response').innerHTML = "before loadStoredEvents...";
			<?php 
			«EXPAND template::php::includes::EventsPhp::eventsPhp FOR this-» 
			?>

			<?php queue_log_messages(false); /* re-enable log messages */ ?>
		}
	/* ]]> */
	</script>
	<style type="text/css">
	<?php if (!DEBUG) { ?>
		#debug { display: none; }
		#response { display: none; }
		#debug_monitors { display: none; }
	<?php } ?>
	</style>
</head>
<body onLoad="loadStoredEvents()">
	<div style="font-size:small; text-align: right;"><a href="clear_session.php">clear session</a> - <a href="sitemap.html">sitemap</a></div>
		
	<h1>«frameTitle()»</h1>
		
	<div id="runtime_errors"><!-- any runtime errors go into here --></div>
		
	<?php
	/* expand any fail error messages */
	if (has_get("fail")) { 
	?>
		<div class="error">
			<p>An exception occured: <i><?php echo htmlspecialchars(require_get("fail")); ?></i></p>
		</div>
	<?php } ?>
		
	<?php queue_log_messages(true); ?>

	«EXPAND template::visual::Render::renderVisual(this) FOREACH children.typeSelect(model::VisibleThing)-»

	<div id="debug"></div>
	<div id="response">empty</div>
	
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
	<?php queue_log_messages(false); /* re-enable log messages, but only after we have "response". */ ?>
	/* ]]> */
	</script>
	
	<!-- for test cases to improve speed: an outstanding ajax calls counter -->
	<!-- TODO we should remove this once issue 43 is resolved -->
	<div id="debug_monitors">
		<div id="ajax_monitor"></div>
		<div id="counter_store_db"></div>
		<div id="counter_store_event"></div>
		<div id="counter_set_session"></div>
		<div id="counter_set_application_value"></div>
		<div id="counter_set_domain_attribute"></div>
		<div id="counter_remote_event"></div>
		<div id="counter_queued_store_attribute"></div>
		<div id="counter_queued_store_object"></div>
		<div id="counter_new_domain_instance"></div>
	</div>
	<script language="Javascript" type="application/javascript">initAjaxMonitor();</script>
	
</body>
</html>
«ENDDEFINE»
