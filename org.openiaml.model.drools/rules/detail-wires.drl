/**
 * Rules related to DetailWires.
 */
package org.openiaml.model.drools.rules.detail_wires

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.datatypes.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.model.model.users.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Create QueryParameter for target container of DetailWire"
	when
		container : Frame( )

		obj : DomainObject( )
		instance : DomainObjectInstance( )
		select : SelectWire ( eval ( functions.connectsSelect(select, obj, instance )) )
		
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		instanceSet : SetWire ( eval(functions.connectsSet(instanceSet, instance, source )) )

		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		pk : DomainAttribute ( eContainer == obj, primaryKey == true ) 

		not ( queryPk : QueryParameter ( eContainer == target, name == pk.name ) )
	
		eval ( handler.veto( detail ))
	
	then
		QueryParameter qp = handler.generatedQueryParameter(detail, target);
		handler.setName(qp, pk.getName());
		queue.add(qp, drools);
	
end

/**
 * @inference DetailWire
 *		When a {@model DetailWire} is connected from a {@model Frame} that uses a
 *		{@model SelectWire selected} {@model DomainObjectInstance}, to an empty {@model Frame},
 *		the target {@model Frame} will obtain content to select an instance from a {@model QueryParameter}.
 */
rule "Create a relevant DomainObjectInstance, with SelectWire, in the destination for the DetailWire"
	when
		container : Frame( )

		obj : DomainObject( )
		select : SelectWire ( )
		instance : DomainObjectInstance( eContainer == container )
		
		pk : DomainAttribute ( eContainer == obj, primaryKey == true ) 
		
		eval ( functions.connectsSelect(select, obj, instance )) 
		
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		instanceSet : SetWire ( eval(functions.connectsSet( instanceSet, instance, source ) ) )
		
		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		queryPk : QueryParameter ( eContainer == target, name == pk.name )
		
		not ( DomainObjectInstance ( eContainer == target ))
	
		eval ( handler.veto( detail ))
	
	then
		DomainObjectInstance i2 = handler.generatedDomainObjectInstance(detail, target);
		handler.setName(i2, "Current " + obj.getName() + " instance");		
		queue.add(i2, drools);
		
		// connect SelectWire
		SelectWire select2 = handler.generatedSelectWire(detail, target, obj, i2);
		handler.setName(select2, "Select from query");
		handler.setLimit(select2, 1);
		handler.setQuery(select2, functions.safeNameString(pk.getName()) + " = :pk");
		queue.add(select2, drools);
		
		// connect QueryParameter
		ParameterEdge param = handler.generatedParameterEdge(detail, target, queryPk, select2);
		handler.setName(param, "pk");
		queue.add(param, drools);
	
end

/**
 * @model DetailWire
 *		If a {@model VisibleThing} to view the selected {@model DomainObjectInstance} from a
 *		{@model DetailWire} does not exist, a {@model InputForm} will be created.
 */
rule "Create a View Instance Form for target of DetailWire"
	when
		container : Frame( )
		obj : DomainObject( )
		
		instance : DomainObjectInstance( eContainer == container )
		select : SelectWire ( )
		eval ( functions.connectsSelect(select, obj, instance )) 
		
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		instanceSet : SetWire ( eval(functions.connectsSet( instanceSet, instance, source ) ) )
		
		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		i2 : DomainObjectInstance ( eContainer == target )
		s2 : SelectWire ( )
		eval ( functions.connectsSelect(s2, obj, i2) )

		not ( VisibleThing ( eContainer == target, eval( ("View " + obj.getName()).equals(name) ) ) )
	
		eval ( handler.veto( detail ))
	
	then
		InputForm form = handler.generatedInputForm(detail, target);
		handler.setName(form, "View " + obj.getName());
		queue.add(form, drools);

end

rule "Connect View Instance Form with a SetWire to the DomainObjectInstance"
	when
		container : Frame( )
		obj : DomainObject( )
		
		instance : DomainObjectInstance( eContainer == container )
		select : SelectWire ( )
		eval ( functions.connectsSelect(select, obj, instance )) 
		
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		
		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		i2 : DomainObjectInstance ( eContainer == target )
		s2 : SelectWire ( )
		eval ( functions.connectsSelect(s2, obj, i2) )

		form : VisibleThing ( eContainer == target, eval( ("View " + obj.getName()).equals(name) ) )
		
		not ( set : SetWire ( eval( functions.connectsSet( set, i2, form ) ) ) )
	
		eval ( handler.veto( detail ))
	
	then
		SetWire set = handler.generatedSetWire(detail, target, i2, form);
		handler.setName(set, "set");
		queue.add(set, drools);
	
end

/**
 * @inference DetailWire
 *		When a {@model DetailWire} is connecting from a {@model InputForm} that is populated
 *		by a {@model SelectWire}, a {@model Button} will be created in the {@model InputForm}
 *		to {@model NavigateAction view} the current instance in the target {@model Frame}.
 */
rule "Create a Link Button for the source of a DetailWire"
	when
		container : Frame( )

		obj : DomainObject( )
		instance : DomainObjectInstance( )
		select : SelectWire ( eval ( functions.connectsSelect(select, obj, instance )) )
				
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		
		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		not ( button : VisibleThing ( eContainer == source, name == "link" )) 
	
		eval ( handler.veto( detail ))
	
	then
		Button link = handler.generatedButton(detail, source);
		handler.setName(link, "link");
		queue.add(link, drools);
	
end

rule "Create a Link Button for the source of a DetailWire: Connect NavigateAction"
	when
		container : Frame( )
		obj : DomainObject( )
		
		instance : DomainObjectInstance( eContainer == container )
		select : SelectWire ( )
		eval ( functions.connectsSelect(select, obj, instance )) 
		
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		
		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		button : VisibleThing ( eContainer == source, name == "link" )
		onClick : EventTrigger ( button.onClick == onClick )
		
		not ( NavigateAction ( from == onClick, to == target )) 
	
		eval ( handler.veto( detail ))
	
	then
		NavigateAction nav = handler.generatedNavigateAction(detail, source, onClick, target);
		handler.setName(nav, "View detail");
		queue.add(nav, drools);
		
end

rule "Create a Link Button for the source of a DetailWire: Add Parameter from AttributeInstance"
	when
		container : Frame( )
		obj : DomainObject( )
		
		instance : DomainObjectInstance( eContainer == container )
		select : SelectWire ( )
		eval ( functions.connectsSelect(select, obj, instance ))
		
		source : VisibleThing ( eContainer == container )
		target : Frame ( )
		
		detail : DetailWire ( )
		eval ( functions.connectsDetail(detail, source, target ))
		
		button : VisibleThing ( eContainer == source, name == "link" )
		onClick : EventTrigger ( button.onClick == onClick )
		nav : NavigateAction ( from == onClick, to == target )

		pkAttribute : DomainAttribute ( eContainer == obj, primaryKey == true )
		pkInstance : DomainAttributeInstance ( eContainer == instance )
		ExtendsEdge ( from == pkInstance, to == pkAttribute )
		
		pk : Property ( pkInstance.fieldValue == pk ) 
		
		not ( ParameterEdge ( from == pk, to == nav ))
	
		eval ( handler.veto( detail ))
	
	then
		ParameterEdge param = handler.generatedParameterEdge(detail, source, pk, nav);
		handler.setName(param, pkAttribute.getName());
		queue.add(param, drools);
	
end
