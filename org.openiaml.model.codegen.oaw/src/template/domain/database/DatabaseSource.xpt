«IMPORT iaml»

/**
 * Get values from a database.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Called from JS.
 */
«DEFINE remoteDatabaseValue(boolean require, model::WireEdge wire, model::ApplicationElementProperty property) FOR model::DomainAttribute»
	<?php 
		// remote parameter source from a database file
		$db_type = "DomainObject";
		«IF getDomainStore(this) != null»
			$db_name = "sqlite:«safeNameString(getDomainStore(this).id)».db";
		«ELSE»
			/* default database, for attributes without stores */
			$db_name = "sqlite:internet_application.db";
		«ENDIF»
		«IF getDomainObject(this) != null»
			$table_name = "«safeNameString(getDomainObject(this).name)»";
		«ELSE»
			/* default table name, for attributes without objects */
			$table_name = "single_values";
		«ENDIF»
		$row_name = "«safeNameString(this.name)»";
		
		// TODO: put this into a function
		if (!$db_name)
			throw new IamlRuntimeException("no $db_type db found");
		if (!$table_name)
			throw new IamlRuntimeException("no $db_type table found (db=$db_name)");
		if (!$row_name)
			throw new IamlRuntimeException("no $db_type row found (table=$table_name)");
		
		// connect to the database source
		$db = new PDO($db_name) or throw_new_IamlRuntimeException("could not open $db_type db '$db_name'");
		
		// does anything exist?
		$results = $db->query("SELECT $row_name FROM $table_name") or throw_new_IamlRuntimeException("could not look for existing values in $db_type '$table_name': " .print_r($db->errorInfo(), true));
		if ($row = $results->fetch()) {
			// update
			echo "\"" . htmlspecialchars($row[$row_name]) . "\"";
		} else {
			// empty
			«IF require»
				throw new IamlRuntimeException("Could not fetch row '$row_name' from table '$table_name' from database '$db_name': no results found");
			«ELSE»
				echo "null";	/* signifies that we shouldn't change anything */
			«ENDIF»
		}		
	?>
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»