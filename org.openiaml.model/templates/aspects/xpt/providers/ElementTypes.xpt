/**
 * We want an easy way to refer to commands programatically.
 * This also allows us to remove the ".command" package export
 * requirement!
 *
 * It would be nice if this was in a separate file though, but
 * I'm not sure how to make GMF do this yet.
 */
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

/**
 * Add our extensions in the "additions"
 */
«AROUND additions FOR gmfgen::GenDiagram-»
	«targetDef.proceed()»
	
	«EXPAND xpt::Common::generatedMemberComment»
	public static org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand 
			getCreateNodeCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest request, 
			org.eclipse.emf.ecore.EClass elementType) {
			
		if (elementType == null)
			return null;

			«EXPAND elementCreateNodeCommand FOREACH getElements()-»
		
		return null;
	} 

	«EXPAND xpt::Common::generatedMemberComment»
	public static org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand 
			getCreateEdgeCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest request, 
			org.eclipse.emf.ecore.EClass elementType,
			org.eclipse.emf.ecore.EObject source,
			org.eclipse.emf.ecore.EObject target) {
			
		if (elementType == null)
			return null;

			«EXPAND elementCreateEdgeCommand FOREACH getElements()-»
		
		return null;
	} 
	
	«EXPAND getElementReverse-»
«ENDAROUND»


// we have to expand it depending on what type it is
«DEFINE elementCreateNodeCommand FOR gmfgen::GenNode-»
	«EXPAND elementCreateNodeCommandType(elementType, getDiagram()) FOR elementType-»
«ENDDEFINE»

// other possible: gmfgen::GenLink, gmfgen::GenDiagram
// default element: blank
«DEFINE elementCreateNodeCommand FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE elementCreateNodeCommandType(gmfgen::ElementType elementType, gmfgen::GenDiagram diagram) FOR gmfgen::MetamodelType-»
	«IF null != elementType-»
		if (elementType.equals(«EXPAND xpt::Common::metaClassAccessor FOR elementType.getMetaClass()»)) {
			return new «diagram.editCommandsPackageName».«elementType.getMetaClass().ecoreClass.name»CreateCommand(request);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE elementCreateNodeCommandType(gmfgen::ElementType elementType, gmfgen::GenDiagram diagram) FOR gmfgen::SpecializationType-»
	«IF null != elementType-»
		if (elementType.equals(«EXPAND xpt::Common::metaClassAccessor FOR elementType.getMetamodelClass()»)) {
			return new «diagram.editCommandsPackageName».«elementType.getMetamodelClass().ecoreClass.name»CreateCommand(request);
		}
	«ENDIF-»
«ENDDEFINE»


// we have to expand it twice, depending on what type it is
«DEFINE elementCreateEdgeCommand FOR gmfgen::GenLink-»
	«EXPAND elementCreateEdgeCommandType(elementType, getDiagram()) FOR elementType-»
«ENDDEFINE»

// other possible: gmfgen::GenNode, gmfgen::GenDiagram
// default element: blank
«DEFINE elementCreateEdgeCommand FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE elementCreateEdgeCommandType(gmfgen::ElementType elementType, gmfgen::GenDiagram diagram) FOR gmfgen::MetamodelType-»
	«IF null != elementType-»
		if (elementType.equals(«EXPAND xpt::Common::metaClassAccessor FOR elementType.getMetaClass()»)) {
			return new «diagram.editCommandsPackageName».«elementType.getMetaClass().ecoreClass.name»CreateCommand(request, source, target);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE elementCreateEdgeCommandType(gmfgen::ElementType elementType, gmfgen::GenDiagram diagram) FOR gmfgen::SpecializationType-»
	«IF null != elementType-»
		if (elementType.equals(«EXPAND xpt::Common::metaClassAccessor FOR elementType.getMetamodelClass()»)) {
			return new «diagram.editCommandsPackageName».«elementType.getMetamodelClass().ecoreClass.name»CreateCommand(request, source, target);
		}
	«ENDIF-»
«ENDDEFINE»


/**
 * Copied from getElement() in ElementTypes.xpt
 */
«DEFINE getElementReverse FOR gmfgen::GenDiagram-»
	private static java.util.Map<org.eclipse.emf.ecore.EClass, org.eclipse.gmf.runtime.emf.type.core.IElementType> elementsReverse;

	«EXPAND xpt::Common::generatedMemberComment("Get the associated IElementType for this editor that renders a particular EClass in the model.")»
public static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(org.eclipse.emf.ecore.EClass hint) {
	if (elementsReverse == null) {
		elementsReverse = new java.util.IdentityHashMap<org.eclipse.emf.ecore.EClass, org.eclipse.gmf.runtime.emf.type.core.IElementType>();
		«EXPAND bindUniqueIdentifierToNamedElementReverse(getUniqueIdentifier()) FOR domainDiagramElement-»
		«FOREACH getNodes() AS node-»
			«EXPAND bindUniqueIdentifierToNamedElementReverse(node.getUniqueIdentifier()) FOR node.modelFacet-»
		«ENDFOREACH-»
		«FOREACH links AS link-»
			«EXPAND bindUniqueIdentifierToNamedElementReverse(link.getUniqueIdentifier()) FOR link.modelFacet-»
		«ENDFOREACH-»
	}
	return elementsReverse.get(hint);
}
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR genmodel::GenClass»
	elementsReverse.put(«getQualifiedPackageInterfaceName(genPackage)».eINSTANCE.get«getClassifierAccessorName()»(), «id»);
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR gmfgen::ModelFacet»
	«ERROR "Unsupported model facet: " + this-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR gmfgen::TypeModelFacet»
	«EXPAND bindUniqueIdentifierToNamedElementReverse(id) FOR metaClass-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR gmfgen::FeatureLinkModelFacet»
	elementsReverse.put(«EXPAND xpt::Common::metaFeatureAccessor FOR metaFeature», «id»);
«ENDDEFINE»
