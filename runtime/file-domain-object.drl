package org.openiaml.model.drools.rules.runtime.file_domain_object

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.*;
import org.openiaml.model.model.*;	// for ModelPackage
import org.openiaml.model.model.domain.*;

import org.openiaml.model.inference.*;		// for handler
import org.openiaml.model.datatypes.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Create the Properties file DomainSchema"
		
	when
		root : InternetApplication ( )
		$fds : DomainSource ( overridden == false, type == DomainStoreTypes.PROPERTIES_FILE )
		
		p : ExtendedProperties ( ) from $fds.propertiesFile
		not ( schema : DomainSchema ( name == "properties" )
			and exists ( 
				edge : SchemaEdge ( )
				and eval ( functions.connectsSchema(edge, $fds, schema ))
			)
		)

	then
		DomainSchema fdo = handler.generatedDomainSchema($fds, root);
		//handler.setValue(fdo, ModelPackage.eINSTANCE.getNamedElement_Name(), "properties");
		handler.setName(fdo, "properties");
		queue.add(fdo, drools);
		
		// and connect with SchemaEdge
		SchemaEdge edge = handler.generatedSchemaEdge($fds, fdo, $fds, fdo);
		queue.add(edge, drools);

end

// unfortunately $p.stringPropertyNames() cannot be iterated over.
// this is either because Drools expects getFieldName(), or it cannot
// iterate over Set or Collection
rule "Create DomainAttributes for Properties File DomainSchema"
		
	when
		$fds : DomainSource ( type == DomainStoreTypes.PROPERTIES_FILE )
		$p : ExtendedProperties ( ) from $fds.propertiesFile
		$key : String ( ) from $p.propertyNames
		
		schema : DomainSchema ( overridden == false, name == "properties" )
		schemaEdge : SchemaEdge ( )
		eval ( functions.connectsSchema( schemaEdge, $fds, schema ))
		
		not ( DomainAttribute ( eContainer == schema, name == $key ))

	then
		DomainAttribute fda = handler.generatedDomainAttribute(schema, schema);
		//handler.setValue(fda, ModelPackage.eINSTANCE.getNamedElement_Name(), $key);
		handler.setName(fda, $key);
		handler.setType(fda, BuiltinDataTypes.getTypeString());	// all Properties attributes are strings
		queue.add(fda, drools);
		
end
