«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE eventsPhp FOR model::visual::Page»

/**
 * Expand all possible events for the current page.
 */
// first, make sure the table exists
$db = new PDO('sqlite:stored_events.db') or local_die("could not open db");
$s = $db->prepare("SELECT * FROM stored_events LIMIT 1");
if (!$s) {
	// create the table
	$q = $db->query("CREATE TABLE stored_events (
			id INT AUTO_INCREMENT PRIMARY KEY,
			page_id VARCHAR(64) NOT NULL,
			event_name VARCHAR(64) NOT NULL,
			arg0 BLOB
		);") or local_die("could not create table: " . print_r($db->errorInfo(), true));
}

log_message("finding events for page id «id»");
$s = $db->prepare("SELECT * FROM stored_events WHERE page_id=?") or local_die("could not get stored events: " . print_r($db->errorInfo(), true));
$s->execute(array("«id»")) or local_die("could not execute select query: " . print_r($db->errorInfo(), true));
foreach ($s->fetchAll() as $row) {
	log_message("found event $row[id]: event_name=$row[event_name] arg0=$row[arg0]");
	echo $row["event_name"] . "(\"" . $row["arg0"] . "\"); // from db " . $row["id"] . "\n";
}

// delete all the events for this page now
log_message("deleting all events for page «id»");
$s = $db->prepare("DELETE FROM stored_events WHERE page_id=?") or local_die("could not delete stored events: " . print_r($db->errorInfo(), true));
$s->execute(array("«id»")) or local_die("could not execute delete query: " . print_r($db->errorInfo(), true));

«ENDDEFINE»
