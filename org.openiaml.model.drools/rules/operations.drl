#created on: 4/11/2008
package org.openiaml.model.drools

#list any import classes here.
import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;

#declare any global variables here
global EcoreCreateElementsHelper handler;

rule "Create 'update' operation for input text field"
	when
		f : InputTextField( overridden == false )
		not (Operation( eContainer == f, name=="update" ))
			
	then
		CompositeOperation operation = handler.generatedCompositeOperation(f, f);
		operation.setName("update");
		insert(operation);
		
end

rule "Create 'update' operation for domain attribute"
	when
		f : DomainAttribute( overridden == false )
		not (Operation( eContainer == f, name=="update" ))
			
	then
		CompositeOperation operation = handler.generatedCompositeOperation(f, f);
		operation.setName("update");
		insert(operation);
		
end

rule "Create components of 'update' operation"
	when
		o : CompositeOperation(overridden == false, (name == "update" || name == "refresh"))
		field : ApplicationElementProperty( eContainer == o.eContainer, name == "fieldValue" )

	then
		Parameter parameter = handler.generatedParameter(o, o);
		parameter.setName("setValueTo");
		insert(parameter);
		
		ChainedOperation op = handler.generatedChainedOperation(o, o);
		op.setName("setPropertyToValue");
		insert(op);
		
		StartNode start = handler.generatedStartNode(o, o);
		insert(start);
		
		FinishNode finish = handler.generatedFinishNode(o, o);
		insert(finish);
		
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		data1.setFrom(parameter);
		data1.setTo(op);
		insert(data1);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		data2.setFrom(op);
		data2.setTo(field);
		insert(data2);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		edge1.setFrom(start);
		edge1.setTo(op);
		insert(edge1);

		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		edge2.setFrom(op);
		edge2.setTo(finish);
		insert(edge2);

end
