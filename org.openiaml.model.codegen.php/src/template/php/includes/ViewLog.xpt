«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/**
 * A static script to view the PHP log.
 */
«DEFINE viewLog FOR model::InternetApplication-»
<?php 
require("config.php");		// runtime library configuration 
?>
<html>
<head>
	<title>View PHP Log</title>
	<style>
		html,table { font-family: Arial; font-size: 90%; }
		table.log { width: 100%; border-collapse: collapse; }
		table.log tr { vertical-align: top; }
		table.log td { border: 1px solid #999; padding: 3px; }
		table.log td.date { display: none; }
		disabled-table.log td.sid { display: none; }
		table.array { border: 1px solid #999; background: #eee; margin: 5px; }
		a { color: #13a; }

		#toggle_display {
			position: absolute;
			top: 1em;
			right: 1em;
			background: #abc;
			width: 50%;
			border: 1px solid #666;
			padding: 2px;
			margin: 0;
		}
		#toggle_display ul, #toggle_display li {
			display: inline; border: 0; margin: 0; padding: 0;
		}
		#toggle_display a { background: #cde; cursor: pointer; }
		#toggle_display a:hover { background: #edc; }
	</style>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/prototype.js"></script>
</head>
<a href="php.log">source</a>

<table class="log">
<?php

function click_link($matches) {
	$url = $matches[0];
	$text = $matches[0];
	// make links shorter
	if (strlen($text) > 10) {
		$bits = explode("/", $text);
		if (count($bits) > 5) {
			$bits = array($bits[0], $bits[1], $bits[2], $bits[3], "...", $bits[count($bits)-1]);
			$text = implode("/", $bits);
		}
	}
	return "<a href=\"$url\">$text</a>";
}

function format_message($str) {
	$str = str_replace("\r\n", "\n", $str);
	$str = str_replace("\r", "\n", $str);

	$str = htmlspecialchars(trim($str));

	// convert Array( ... => )
	$str = preg_replace("#Array[ \r\n]+\\(#", "<table class=\"array\">", $str);
	$str = preg_replace("#[ \t\r\n]+\\)#", "\n</table>", $str);
	$str = preg_replace("#\\[([A-Za-z0-9_ ]+)\\] =&gt; (.*)[\n]#m", "<tr><th>\\1</th><td>\\2</td></tr>", $str);

	// make links clickable
	$str = preg_replace_callback("#http://([^ \n\t]+)#i", 'click_link', $str);
	$str = preg_replace("#^([a-z0-9_]+).php#i", '<a href="\\1.php">\\1.php</a>', $str);

	// add newlines
	$str = str_replace("\n", "\n<br>", $str);

	return $str;
}

$log = file("php.log");

$found_sids = array();
$found_keys = array();
for ($i = 0; $i < count($log); $i++) {
  $line = $log[$i];

  $bits = explode(" ", $line, 4);

  $date = $bits[0];
  $time = $bits[1];
  $uid = substr($bits[2], 1, strlen($bits[2]) - 2);
  $ubits = explode("-", $uid, 2);
  $rid = $ubits[0];
  $sid = $ubits[1];
  $message = $bits[3];

  // join following lines?
  while (($i + 1) < count($log)) {
	  if (substr($log[$i + 1], 0, 1) == "\t") {
		  $message .= substr($log[$i + 1], 1);
		  $i++;
	  } else {
		  break;
	  }
  }

	// does it start with a [key]?
   	$key = false;
   	if (preg_match("#^\[[ a-z]+\]#im", $message)) {
		$key = substr($message, 1);
		$pos = strpos($key, "]");
		$message = substr($key, $pos + 1);
		$key = substr($key, 0, $pos);
		$found_keys[$key] = true;
	}

  $formatted = format_message($message);

  // convert sid to a unique color
  if (isset($found_sids[$sid])) {
	  $sid_color = $found_sids[$sid];
  } else {
	  $count = count($found_sids);
	  $r = 255 - ($count % 2) * 64 - (($count / 8) % 2) * 64;
	  $g = 255 - (($count / 2) % 2) * 64 - (($count / 16) % 2) * 64;
	  $b = 255 - (($count / 4) % 2) * 64 - (($count / 32) % 2) * 64;
	  $sid_color = sprintf("#%02x%02x%02x", $r, $g, $b);
	  $found_sids[$sid] = $sid_color;
  }

?>
<tr class="<?php echo "$sid $key"; ?>">
	<td style="background: <?php echo $sid_color; ?>" class="date"><?php echo $date; ?></td>
	<td style="background: <?php echo $sid_color; ?>" class="time"><?php echo $time; ?></td>
	<td style="background: <?php echo $sid_color; ?>" class="rid"><?php echo $rid; ?></td>
	<td style="background: <?php echo $sid_color; ?>" class="sid"><?php echo $sid; ?></td>
	<td style="background: <?php echo $sid_color; ?>" class="message"><b><?php echo $key; ?></b> <?php echo $formatted; ?></td>
</tr>
<?php

}

?>
</table>

<script language="Javascript" type="application/javascript">
function toggle_display(key) {
	var args = document.getElementsByClassName(key);
	for (var i = 0; i < args.length; i++) {
		args[i].style.display = !(args[i].style.display == "none") ? "none" : "";
	}
}
</script>

<ul id="toggle_display">
<?php
foreach ($found_keys as $key => $found) { ?>
	<li><a onClick="toggle_display('<?php echo $key; ?>')"><?php echo $key; ?></li>
<?php } ?>
</ul>
«ENDDEFINE»
