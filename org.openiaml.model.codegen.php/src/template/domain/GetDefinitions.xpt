«IMPORT iaml»

/**
 * Methods for accessing data from domain objects and attributes.
 * All of this code is expected to execute on the server.
 */
«EXTENSION template::GeneratorExtensions»

/* code to get domain attributes */
«DEFINE getDomainAttribute FOR model::DomainAttributeInstance-»
	/**
	 * Get the attribute instance '«safeNameString(name)»' contained in
	 * '«safeName(eContainer)»'.
	 *
	 * Returns the current value for attribute ID '«id»'.
	 */
	function get_attribute_instance_«safeName()»($default = false) {
		«IF model::DomainObjectInstance.isInstance(eContainer)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
		«ELSE»
			/* contained in an attribute instance '«this»': get it from the instance */
			$iterator = DomainIterator_Attribute_«safeName()»::getInstance();
		«ENDIF»
		$value = $iterator->getAttributeInstance( DomainAttribute_«safeName(getAttributeForAttributeInstance())»::getInstance() )->getValue();
		
		// don't try and cast null
		if ($value === null) {
			return null;
		}
		
		// make sure we can cast this value to the appropriate type
		$type = "«escapePhpString(type.uRI)»";
		
		if (!can_cast($value, $type)) {
			throw new IamlRuntimeException("Unexpectedly could not cast value '$value' into type '$type'"); 
		}
		
		// return the casted value
		$value = do_cast($value, $type);
		
		// but internally, we store all values as strings
		return do_cast($value, 'http://openiaml.org/model/datatypes#iamlString');
	}
	
	/**
	 * Does the attribute instance '«safeNameString(name)»' exist yet; that is,
	 * does it exist in any DomainStore yet?
	 *
	 * Returns true or false.
	 */
	function has_attribute_instance_«safeName()»($default = false) {
		«EXPAND checkIncomingParameters("false")»
	
		«IF model::DomainObjectInstance.isInstance(eContainer)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
		«ELSE»
			/* contained in an attribute instance '«this»': get it from the instance */
			$iterator = DomainIterator_Attribute_«safeName()»::getInstance();
		«ENDIF»
		return !$iterator->isEmpty() && ($iterator->getAttributeInstance( DomainAttribute_«safeName(getAttributeForAttributeInstance())»::getInstance() )->getValue() !== null);
	}

«ENDDEFINE»

/**
 * Check that all SelectWires incoming to this DomainObjectInstance or DomainAttributeInstance
 * can be evaluated without failing; return $return if this would cause an error.
 */
«DEFINE checkIncomingParameters(String return) FOR model::DomainAttributeInstance»
	// check that all required parameters for this DomainAttributeInstance are present	
	«FOREACH inWires.typeSelect(model::wires::SelectWire) AS wire»
		«IF !wire.inParameterEdges.isEmpty»
			if (!(«EXPAND template::operations::Parameters::callParameterExists FOREACH wire.inParameterEdges SEPARATOR " && "»)) {
				return «return»;
			}
		«ENDIF»
	«ENDFOREACH»
	«IF model::DomainObjectInstance.isInstance(eContainer)»
	«LET (model::DomainObjectInstance) eContainer AS obj»
		«EXPAND checkIncomingParameters(return) FOR obj»
	«ENDLET»
	«ENDIF»
«ENDDEFINE»

«DEFINE checkIncomingParameters(String return) FOR model::DomainObjectInstance»
	// check that all required parameters for this DomainObjectInstance are present	
	«FOREACH inWires.typeSelect(model::wires::SelectWire) AS wire»
		«IF !wire.inParameterEdges.isEmpty»
			if (!(«EXPAND template::operations::Parameters::callParameterExists FOREACH wire.inParameterEdges SEPARATOR " && "»)) {
				return «return»;
			}
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE getDomainObject FOR model::DomainObjectInstance-»
	/**
	 * Contains all of the Events that need to occur when 'onChange'
	 * is called, if any.
	 */
	function object_instance_onChange_«safeName()»() {
		«IF onChange != null»
			«EXPAND template::events::EventCall::callEvent(true) FOR onChange»
		«ENDIF» 
	}

	/**
	 * Get the domain object instance '«id»' as a basic associative array. 
	 * If a {@model RemoteDomainObject}, this may refresh the remote data source.
	 */
	function get_object_instance_«safeName()»($default = false) {
		«FOREACH inWires.typeSelect(model::wires::SelectWire).from.typeSelect(model::domain::RemoteDomainObject) AS rdo»
			// possibly update the domain object this instance is contained in
			«EXPAND RemoteDefinitions::considerUpdate FOR rdo»
		«ENDFOREACH»
					
		$iterator = DomainIterator_«safeName()»::getInstance();
		$result = $iterator->toArray();
		$basic = array();
		foreach ($result as $key => $inst) {
			$basic[$key] = $inst->getValue();
		}
		return $basic;
	}
		
	/**
	 * Get the number of results for the current query.
	 * If a {@model RemoteDomainObject}, this may refresh the remote data source.
	 *
	 * If parameters for this {@model DomainObjectInstance} aren't even available,
	 * returns <code>0</code> rather than crashing.
	 */
	function get_instance_count_«safeName()»() {
		«FOREACH inWires.typeSelect(model::wires::SelectWire).from.typeSelect(model::domain::RemoteDomainObject) AS rdo»
			// possibly update the domain object this instance is contained in
			«EXPAND RemoteDefinitions::considerUpdate FOR rdo»
		«ENDFOREACH»

		«EXPAND GetDefinitions::checkIncomingParameters("0")»
		$iterator = DomainIterator_«safeName()»::getInstance();
		return $iterator->count();
	}
	
	/**
	 * Does the domain object instance '«id»' exist yet in the database?
	 * If a {@model RemoteDomainObject}, this may refresh the remote data source.
	 *
	 * If parameters for this {@model DomainObjectInstance} aren't even available,
	 * returns <code>false</code> rather than crashing.
	 *
	 * Returns true or false.
	 */
	function has_object_instance_«safeName()»($default = false) {
		«FOREACH inWires.typeSelect(model::wires::SelectWire).from.typeSelect(model::domain::RemoteDomainObject) AS rdo»
			// possibly update the domain object this instance is contained in
			«EXPAND RemoteDefinitions::considerUpdate FOR rdo»
		«ENDFOREACH»

		«EXPAND GetDefinitions::checkIncomingParameters("false")»
		$iterator = DomainIterator_«safeName()»::getInstance();
		return !$iterator->isEmpty();
	}
	
	/**
	 * Ignore the current domain object instance and create
	 * a new one.
	 */
	function new_domain_instance_«safeName()»($default = false) {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->createNew();
	}
«ENDDEFINE»
