#created on: 4/11/2008
package org.openiaml.model.drools.rules.login_handler

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.model.model.users.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

// issue 118
/**
 * @inference LoginHandler
 *		A {@model LoginHandler} contained within a {@model InternetApplication} will
 *		generate a {@model Session new login session} for the new {@model Frame login page}.
 */
rule "Create separate 'login' scope for LoginHandlers [InternetApplication]"
	when
		container : InternetApplication( )
		scope : Scope( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		
		not ( login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) ))
			
		eval ( handler.veto( login_handler ))
	
	then
		Session login_session = handler.generatedSession(login_handler, container);
		handler.setName(login_session, login_handler.getName() + " login");
		queue.add(login_session, drools);	
	
end

rule "Create 'login' page for LoginHandlers [InternetApplication]"
	when
		container : InternetApplication( )
		scope : Scope( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		
		not (Frame (eContainer == login_session, name=="login" ))
			
		eval ( handler.veto( login_handler ))
		
	then

		Frame login = handler.generatedFrame(login_handler, login_session);
		handler.setName(login, "login");
		queue.add(login, drools);
		
end

rule "Create 'logout' page for LoginHandlers"
	when
		scope : Session( ) 
		login_handler : LoginHandler( eContainer == scope )
		not (Frame (eContainer == scope, name=="logout" ))
				
		eval ( handler.veto( login_handler ))
		
	then

		Frame logout = handler.generatedFrame(login_handler, scope);
		handler.setName(logout, "logout");
		queue.add(logout, drools);
		
end

rule "Instruct 'logout' page to follow to the actual logout destination if set"
	when
		scope : Session( ) 
		login_handler : LoginHandler( eContainer == scope )
		
		logout : Frame (eContainer == scope, name=="logout" )
		
		destination : Frame ( this != logout )
		navigate : NavigateAction ( from == login_handler, to == destination, name == "logout")

		access : EventTrigger ( eContainer == logout, logout.onAccess == access )
		not (NavigateAction ( from == access, to == destination ))
		
		eval ( handler.veto( login_handler ))
	
	then
		NavigateAction wire = handler.generatedNavigateAction(login_handler, logout, access, destination);
		handler.setName(wire, "redirect to intended logout page");
		queue.add(wire, drools);

end

rule "Create 'key attribute' property for LoginHandler[type = key]s"
	when
		scope : Session( ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.SECRET_KEY )

		not (Property (eContainer == scope, 
			name=="current login key" ) )

		# the value may not be called "current login key"
		not (
			exists ( actual_key : Property ( )
				and SetWire ( name == "set", from == login_handler, to == actual_key )
			)
		) 
		
		eval ( handler.veto( login_handler ))
		
	then

		Property key = handler.generatedProperty(login_handler, scope);
		handler.setName(key, "current login key");
		# need to set a default value, or else require_session(this) will throw an exception before we can catch it to redirect
		handler.setValue(key, ModelPackage.eINSTANCE.getProperty_DefaultValue(), "");
		queue.add(key, drools);
		
end

rule "Connect 'key' property to LoginHandler"
	when
		scope : Session( ) 
		login_handler : LoginHandler( eContainer == scope )
		key : Property (eContainer == scope,
			name == "current login key")
		not (SetWire( from == login_handler, to == key, name == "set") )
		
		eval ( handler.veto( login_handler ))

	then

		SetWire wire = handler.generatedSetWire(login_handler, scope, login_handler, key);
		handler.setName(wire, "set");
		queue.add(wire, drools);
		
end

rule "Create 'check key' operation for LoginHandler[type = key]"
	when
		scope : Session( ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.SECRET_KEY )
		not (Operation( eContainer == scope, name == "check key") )
					
		eval ( handler.veto( login_handler ))
					
	then
		CompositeOperation op = handler.generatedCompositeOperation( login_handler, scope );
		handler.setName(op, "check key");
		queue.add(op, drools);
		
end

rule "Connect 'access' event to 'check' operations"
	when
		scope : Session( )
		page : Frame( eContainer == scope )
		access : EventTrigger( page.onAccess == access, eContainer == page )
		check : CompositeOperation( name == "check key" || name == "check instance", eContainer == scope )
		not (RunAction( from == access, to == check ))
				
		eval ( handler.veto( scope ))
		
	then
		RunAction wire = handler.generatedRunAction(scope, page, access, check);
		handler.setName(wire, "run");
		handler.setPriority(wire, 100); // high priority
		queue.add(wire, drools);	
	
end

rule "Connect 'login key' parameter to 'check key' operation run wire"
	when
		scope : Session( )
		page : Frame( eContainer == scope )
		access : EventTrigger( page.onAccess == access, eContainer == page )
		check : CompositeOperation( name == "check key", eContainer == scope )
		
		login_handler : LoginHandler( eContainer == scope )
		value : Property( )
		mySetWire : SetWire( from == login_handler, to == value, name == "set" )
		
		wire : RunAction( from == access, to == check )
		not (ParameterEdge( from == value, to == wire ))
				
		eval ( handler.veto( scope ))
		
	then
		ParameterEdge param = handler.generatedParameterEdge(scope, page, value, wire);
		handler.setName(param, "[sessions] 'login key' parameter to 'check key'");
		queue.add(param, drools);

end

rule "Connect 'fail' wire from 'check key' or 'check instance' operation to Login Frame"
	when
		container : ContainsWires( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		login : Frame (eContainer == container, name=="login" )
		check : CompositeOperation( name == "check key" || name == "check instance", eContainer == scope )
		not (NavigateAction( from == check, to == login, name == "fail") )
			
		eval ( handler.veto( scope ))
	
	then
		NavigateAction fail = handler.generatedNavigateAction(scope, scope, check, login);
		handler.setName(fail, "fail");
		queue.add(fail, drools);
		
end

rule "Connect 'fail' wire from 'check key' or 'check instance' operation to Login Frame (login page in separate session)"
	when
		container : ContainsWires( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )
		check : CompositeOperation( name == "check key" || name == "check instance", eContainer == scope )
		not (NavigateAction( from == check, to == login, name == "fail") )
			
		eval ( handler.veto( scope ))
	
	then
		NavigateAction fail = handler.generatedNavigateAction(scope, scope, check, login);
		handler.setName(fail, "fail");
		queue.add(fail, drools);
		
end

rule "Create contents of 'check key' operation [type=secret_key]"
	when
		scope : Session( )
		o : CompositeOperation( name == "check key", eContainer == scope )
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.SECRET_KEY )
		
		expected : StaticValue( ) 
		expected_param : ParameterEdge( from == expected, to == login_handler )
		
		not (StartNode( eContainer == o))
		# not (FinishNode( eContainer == o)) - not necessary
			
		eval ( handler.veto( o ))
	
	then
		Parameter parameter = handler.generatedParameter(o, o);
		handler.setName(parameter, "current key value");
		queue.add(parameter, drools);
		
		DecisionNode op = handler.generatedDecisionNode(o, o);
		handler.setName(op, "equal?");
		queue.add(op, drools);
		
		StartNode start = handler.generatedStartNode(o, o);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(o, o);
		queue.add(finish, drools);
		
		# not ok
		CancelNode cancel = handler.generatedCancelNode(o, o);
		handler.setValue(cancel, OperationsPackage.eINSTANCE.getCancelNode_ExceptionText(), "Error: Key check failed. You may need to login.");
		queue.add(cancel, drools);
		
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data1, parameter);
		handler.setTo(data1, op);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data2, expected);
		handler.setTo(data2, op);
		queue.add(data2, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge1, start);
		handler.setTo(edge1, op);
		queue.add(edge1, drools);

		# ok
		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		handler.setName(edge2, "yes");
		handler.setFrom(edge2, op);
		handler.setTo(edge2, finish);
		queue.add(edge2, drools);
		
		# not ok	
		ExecutionEdge edge3 = handler.generatedExecutionEdge(o, o);
		handler.setName(edge3, "no");
		handler.setFrom(edge3, op);
		handler.setTo(edge3, cancel);
		queue.add(edge3, drools);

end

rule "Create contents of 'check instance' operation [type=domain_object or user]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.DOMAIN_OBJECT || type == LoginHandlerTypes.USER )
		
		instance : DomainObjectInstance ( eContainer == scope )
		setWire : SetWire ( from == login_handler, to == instance, name == "set" )
		
		ex : Operation ( eContainer == instance, name == "exists?" )
				
		checkOperation : CompositeOperation ( eContainer == scope, name == "check instance" )

		not ( StartNode ( eContainer == checkOperation ))
		
		eval ( handler.veto( checkOperation ))

	then
		StartNode start = handler.generatedStartNode(checkOperation, checkOperation);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(checkOperation, checkOperation);
		queue.add(finish, drools);
		
		# not ok
		CancelNode cancel = handler.generatedCancelNode(checkOperation, checkOperation);
		handler.setValue(cancel, OperationsPackage.eINSTANCE.getCancelNode_ExceptionText(), "Invalid domain instance, you need to login.");
		queue.add(cancel, drools);
		
		# a virtual operation call
		# (the 'exists?' operation cannot have more than 2 execution edges out)
		OperationCallNode call = handler.generatedOperationCallNode(checkOperation, checkOperation);
		handler.setName(call, "call exists?");
		queue.add(call, drools);
		
		# connect with a RunAction
		RunAction run = handler.generatedRunAction(checkOperation, checkOperation, call, ex);
		handler.setName(run, "virtual operation call");
		queue.add(run, drools);
		
		ExecutionEdge edge0 = handler.generatedExecutionEdge(checkOperation, checkOperation);
		handler.setFrom(edge0, start);
		handler.setTo(edge0, call);		
		queue.add(edge0, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(checkOperation, checkOperation);
		handler.setName(edge1, "yes");
		handler.setFrom(edge1, call);
		handler.setTo(edge1, finish);
		queue.add(edge1, drools);

		ExecutionEdge edge2 = handler.generatedExecutionEdge(checkOperation, checkOperation);
		handler.setName(edge2, "no");
		handler.setFrom(edge2, call);
		handler.setTo(edge2, cancel);
		queue.add(edge2, drools);

end

/*
We don't want the expected login key to connect to the operation: it is already
explicitly defined in the Operation itself.
rule "Connect expected login key as parameter to check key operation"
	when 
		scope : Session( )
		page : Frame( eContainer == scope )
		access : EventTrigger( name == "access", eContainer == page )
		check : CompositeOperation( name == "check key", eContainer == scope )
		wire : RunAction( from == access, to == check )
		login_handler : LoginHandler( eContainer == scope )
		
		expected : StaticValue( ) 
		expected_param : ParameterEdge( from == expected, to == login_handler )
		
		not (ParameterEdge(from == expected, to == check ))	
	
	then
		ParameterEdge param = handler.generatedParameterEdge(login_handler, page, expected, wire);
		queue.add(param, drools);
	
end
*/

rule "Create login form for 'login' pages"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )

		not (InputForm( eContainer == login ))
				
		eval ( handler.veto( login_handler ))
		
	then
		InputForm form = handler.generatedInputForm(login_handler, login);
		handler.setName(form, "login form");
		queue.add(form, drools);

		Button button = handler.generatedButton(form, form);
		handler.setName(button, "Login");
		queue.add(button, drools);
		
end

rule "Connect 'Login' button to 'do login' operation"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )

		form : InputForm ( eContainer == login, name == "login form" )
		button : Button ( eContainer == form, name == "Login" )
		
		operation : Operation ( eContainer == login_session, name == "do login" )
		
		not (RunAction ( from == button, to == operation, name == "onClick"))
		
		eval ( handler.veto( login_handler ))

	then
		RunAction run = handler.generatedRunAction(login_handler, login, button, operation);
		handler.setName(run, "onClick");
		queue.add(run, drools);

end

rule "Create text fields for login form of 'login' pages [type=secret_key]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.SECRET_KEY )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )

		form : InputForm( eContainer == login, name == "login form" )
		
		not ( InputTextField ( eContainer == form, name == "login key" ))
					
		eval ( handler.veto( form ))
		
	then

		InputTextField field = handler.generatedInputTextField(form, form);
		handler.setName(field, "login key");		# login field name
		queue.add(field, drools);

end

rule "Create contents of 'do login' operation [type=secret_key]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.SECRET_KEY )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )

		value : Property( )
		mySetWire : SetWire( from == login_handler, to == value, name == "set" )

		expected : StaticValue( ) 
		expected_param : ParameterEdge( from == expected, to == login_handler )

		form : InputForm( eContainer == login, name == "login form" )
		button : Button ( eContainer == form, name == "Login" )
		
		field : InputTextField ( eContainer == form, name == "login key" )
		fieldValue : Property( field.fieldValue == fieldValue )
		
		loginOperation : CompositeOperation ( eContainer == login_session, name == "do login" )
		runClick : RunAction ( from == button, to == loginOperation, name == "onClick" )
		
		not ( StartNode ( eContainer == loginOperation ))
		
		eval ( handler.veto( loginOperation ))
			
	then
		
		# connect field value as parameter
		ParameterEdge clickParam = handler.generatedParameterEdge(loginOperation, login, fieldValue, runClick);
		handler.setName(clickParam, "[sessions] field value as param");
		queue.add(clickParam, drools);
		
		# create contents of login operation
		Parameter parameter = handler.generatedParameter(loginOperation, loginOperation);
		handler.setName(parameter, "provided key");
		queue.add(parameter, drools);
		
		DecisionNode op = handler.generatedDecisionNode(loginOperation, loginOperation);
		handler.setName(op, "equal?");
		queue.add(op, drools);
		
		StartNode start = handler.generatedStartNode(loginOperation, loginOperation);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(loginOperation, loginOperation);
		queue.add(finish, drools);
		
		# not ok
		CancelNode cancel = handler.generatedCancelNode(loginOperation, loginOperation);
		handler.setValue(cancel, OperationsPackage.eINSTANCE.getCancelNode_ExceptionText(), "Invalid key.");
		queue.add(cancel, drools);
		
		DataFlowEdge data1 = handler.generatedDataFlowEdge(loginOperation, loginOperation);
		handler.setFrom(data1, parameter);
		handler.setTo(data1, op);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(loginOperation, loginOperation);
		handler.setFrom(data2, expected);
		handler.setTo(data2, op);
		queue.add(data2, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setFrom(edge1, start);
		handler.setTo(edge1, op);
		queue.add(edge1, drools);
		
		# not ok	
		ExecutionEdge edge2 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setName(edge2, "no");
		handler.setFrom(edge2, op);
		handler.setTo(edge2, cancel);
		queue.add(edge2, drools);

		# ok: set value operation
		PrimitiveOperation setProperty = handler.generatedPrimitiveOperation(loginOperation, loginOperation);
		handler.setName(setProperty, "setPropertyToValue");
		queue.add(setProperty, drools);
		
		DataFlowEdge data3 = handler.generatedDataFlowEdge(loginOperation, loginOperation);
		handler.setFrom(data3, parameter);
		handler.setTo(data3, setProperty);
		queue.add(data3, drools);

		DataFlowEdge data4 = handler.generatedDataFlowEdge(loginOperation, loginOperation);
		handler.setFrom(data4, setProperty);
		handler.setTo(data4, value);
		queue.add(data4, drools);

		# ok
		ExecutionEdge edge3 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setName(edge3, "yes");
		handler.setFrom(edge3, op);
		handler.setTo(edge3, setProperty);
		queue.add(edge3, drools);

		# finish
		ExecutionEdge edge4 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setFrom(edge4, setProperty);
		handler.setTo(edge4, finish);
		queue.add(edge4, drools);
				
end

rule "Create text fields for login form of 'login' pages [type=domain_object]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.DOMAIN_OBJECT )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )

		form : InputForm( eContainer == login, name == "login form" )
		
		# from a domain object
		attribute : DomainAttribute ( )
		param : ParameterEdge ( from == attribute, to == login_handler )
		
		not ( InputTextField ( eContainer == form, name == attribute.name ))
		
		eval ( handler.veto( form ))

	then
		InputTextField field = handler.generatedInputTextField(form, form);
		# login field name
		handler.setName(field, attribute.getName());		
		queue.add(field, drools);		
		
end

/**
 * A LoginHandler[user] uses all of the fields from the given
 * DomainObject parameter as input fields, except for 
 * any generated primary keys.
 */
rule "Create text fields for login form of 'login' pages [type=user]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.USER )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )

		form : InputForm( eContainer == login, name == "login form" )

		# from a role		
		role : Role ( )
		param : ParameterEdge ( from == role, to == login_handler )
		
		# an attribute in that role
		attribute : DomainAttribute ( eContainer == role, eval(functions.notPrimaryKey(attribute)) )
		
		not ( InputTextField ( eContainer == form, name == attribute.name ))
		
		eval ( handler.veto( form ))

	then
		InputTextField field = handler.generatedInputTextField(form, form);
		# login field name
		handler.setName(field, attribute.getName());		
		queue.add(field, drools);
		
end

rule "Connect text fields for login form of 'login' pages to 'do login' run wire [type=domain_object]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.DOMAIN_OBJECT )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )
		
		operation : Operation( eContainer == login_session, name == "do login" )

		form : InputForm( eContainer == login, name == "login form" )
		
		# from a domain object
		attribute : DomainAttribute ( )
		param : ParameterEdge ( from == attribute, to == login_handler )
		
		field : InputTextField ( eContainer == form, name == attribute.name )
		fieldValue : Property ( field.fieldValue == fieldValue )
		
		button : Button ( eContainer == form, name == "Login" )
		run : RunAction ( from == button, to == operation, name == "onClick" )
		
		not ( ParameterEdge ( from == fieldValue, to == run, name == attribute.name )) 
		
		eval ( handler.veto( login_handler ))

	then
		ParameterEdge param2 = handler.generatedParameterEdge(login_handler, fieldValue, fieldValue, run);
		handler.setName(param2, attribute.getName());
		queue.add(param2, drools); 
		
end

rule "Connect text fields for login form of 'login' pages to 'do login' run wire [type=user]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.USER )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )
		
		operation : Operation( eContainer == login_session, name == "do login" )

		form : InputForm( eContainer == login, name == "login form" )
		
		# from a role
		role : Role ( )
		attribute : DomainAttribute ( eContainer == role )
		param : ParameterEdge ( from == role, to == login_handler )
		
		field : InputTextField ( eContainer == form, name == attribute.name )
		fieldValue : Property ( field.fieldValue == fieldValue )		
		
		button : Button ( eContainer == form, name == "Login" )
		run : RunAction ( from == button, to == operation, name == "onClick" )
		
		not ( ParameterEdge ( from == fieldValue, to == run, name == attribute.name )) 
		
		eval ( handler.veto( login_handler ))

	then
		ParameterEdge param2 = handler.generatedParameterEdge(login_handler, fieldValue, fieldValue, run);
		handler.setName(param2, attribute.getName());
		queue.add(param2, drools); 
		
end

/**
 * The 'do login' page must be OUTSIDE the Scope, otherwise it might
 * not be possible to actually call it from outside (since Session.onAccess
 * may require a valid domain instance, for example - even though it hasn't been
 * set yet).
 *
 * @implementation Operation,OperationCallNode,Scope
 *		All {@model OperationCallNode operation calls} to {@model Operation}s contained
 *		within {@model Scope}s are first evaluated for any
 * 		{@model Scope#onAccess} {@model EventTrigger events}.
 * @implementation LoginHandler
 *		The generated {@model Property} containing the current password
 *		for a {@model LoginHandler} is set before it is evaluated whether
 *		the instance actually exists, thus the Property may not be
 *		valid.
 */
rule "Create 'do login' operation within all login_handlers"
	when
		container : InternetApplication( )
		session : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == session )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		
		not ( Operation ( eContainer == login_session, name == "do login" ))
		
		eval ( handler.veto( login_handler ))

	then
		CompositeOperation loginOperation = handler.generatedCompositeOperation(login_handler, login_session);
		handler.setName(loginOperation, "do login");
		queue.add(loginOperation, drools);
		
end

rule "Create contents of 'do login' operation [type=domain_object]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.DOMAIN_OBJECT )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		
		instance : DomainObjectInstance ( eContainer == scope )
		setWire : SetWire ( from == login_handler, to == instance, name == "set" )
		
		ex : Operation ( eContainer == instance, name == "exists?" )
				
		loginOperation : CompositeOperation ( eContainer == login_session, name == "do login" )

		not ( StartNode ( eContainer == loginOperation ))
		
		eval ( handler.veto( loginOperation ))

	then
		StartNode start = handler.generatedStartNode(loginOperation, loginOperation);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(loginOperation, loginOperation);
		queue.add(finish, drools);
		
		# not ok
		CancelNode cancel = handler.generatedCancelNode(loginOperation, loginOperation);
		handler.setValue(cancel, OperationsPackage.eINSTANCE.getCancelNode_ExceptionText(), "No such instance found.");
		queue.add(cancel, drools);
		
		// make a split/join
		SplitNode split = handler.generatedSplitNode(loginOperation, loginOperation);
		queue.add(split, drools);
		JoinNode join = handler.generatedJoinNode(loginOperation, loginOperation);
		queue.add(join, drools);
				
		ExecutionEdge edge0 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setFrom(edge0, start);
		handler.setTo(edge0, split);		
		queue.add(edge0, drools);
		
		// we will leave the other rules to generate the contents

		# a virtual operation call
		# (the 'exists?' operation cannot have more than 2 execution edges out)
		OperationCallNode call = handler.generatedOperationCallNode(loginOperation, loginOperation);
		handler.setName(call, "call exists?");
		queue.add(call, drools);
		
		# connect with a RunAction
		RunAction run = handler.generatedRunAction(loginOperation, loginOperation, call, ex);
		handler.setName(run, "virtual operation call");
		queue.add(run, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setFrom(edge1, join);
		handler.setTo(edge1, call);
		queue.add(edge1, drools);
		
		# not ok	
		ExecutionEdge edge2 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setName(edge2, "no");
		handler.setFrom(edge2, call);
		handler.setTo(edge2, cancel);
		queue.add(edge2, drools);

		# ok
		ExecutionEdge edge3 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setName(edge3, "yes");
		handler.setFrom(edge3, call);
		handler.setTo(edge3, finish);
		queue.add(edge3, drools);

end

rule "Create parameter for 'do login' operation inside login handler[type=domain_object]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.DOMAIN_OBJECT )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		
		attribute : DomainAttribute ( )
		paramWire : ParameterEdge( from == attribute, to == login_handler )
		
		instance : DomainObjectInstance ( eContainer == scope )
		setWire : SetWire ( from == login_handler, to == instance, name == "set" )

		operation : CompositeOperation ( eContainer == login_session, name == "do login" )
		split : SplitNode ( eContainer == operation )
		join : JoinNode ( eContainer == operation )
		
		target : Property ( eContainer == scope, eval(functions.loginAttributeMatches(target, attribute)))

		not ( Parameter ( eContainer == operation, name == attribute.name ))
		
		eval ( handler.veto( operation ))

	then
		Parameter param = handler.generatedParameter(operation, operation);
		handler.setName(param, attribute.getName());
		queue.add(param, drools);
		
		CompositeOperation setValue = handler.generatedCompositeOperation(operation, operation);
		handler.setName(setValue, "setPropertyToValue");
		queue.add(setValue, drools);
		
		// split to set value
		ExecutionEdge edge1 = handler.generatedExecutionEdge(operation, operation);
		handler.setFrom(edge1, split);
		handler.setTo(edge1, setValue);
		queue.add(edge1, drools);
		
		// set value to join
		ExecutionEdge edge2 = handler.generatedExecutionEdge(operation, operation);
		handler.setFrom(edge2, setValue);
		handler.setTo(edge2, join);
		queue.add(edge2, drools);
		
		// flow from param to value
		DataFlowEdge data1 = handler.generatedDataFlowEdge(operation, operation);
		handler.setFrom(data1, param);
		handler.setTo(data1, setValue);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(operation, operation);
		handler.setFrom(data2, setValue);
		handler.setTo(data2, target);
		queue.add(data2, drools);

end

rule "Create contents of 'do login' operation [type=user]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.USER )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		
		instance : DomainObjectInstance ( eContainer == scope )
		setWire : SetWire ( from == login_handler, to == instance, name == "set" )
		
		ex : Operation ( eContainer == instance, name == "exists?" )
				
		loginOperation : CompositeOperation ( eContainer == login_session, name == "do login" )

		not ( StartNode ( eContainer == loginOperation ))
		
		eval ( handler.veto( loginOperation ))

	then
		StartNode start = handler.generatedStartNode(loginOperation, loginOperation);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(loginOperation, loginOperation);
		queue.add(finish, drools);
		
		# not ok
		CancelNode cancel = handler.generatedCancelNode(loginOperation, loginOperation);
		handler.setValue(cancel, OperationsPackage.eINSTANCE.getCancelNode_ExceptionText(), "No such user found.");
		queue.add(cancel, drools);
		
		// make a split/join
		SplitNode split = handler.generatedSplitNode(loginOperation, loginOperation);
		queue.add(split, drools);
		JoinNode join = handler.generatedJoinNode(loginOperation, loginOperation);
		queue.add(join, drools);
				
		ExecutionEdge edge0 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setFrom(edge0, start);
		handler.setTo(edge0, split);		
		queue.add(edge0, drools);
		
		// we will leave the other rules to generate the contents

		# a virtual operation call
		# (the 'exists?' operation cannot have more than 2 execution edges out)
		OperationCallNode call = handler.generatedOperationCallNode(loginOperation, loginOperation);
		handler.setName(call, "call exists?");
		queue.add(call, drools);
		
		# connect with a RunAction
		RunAction run = handler.generatedRunAction(loginOperation, loginOperation, call, ex);
		handler.setName(run, "virtual operation call");
		queue.add(run, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setFrom(edge1, join);
		handler.setTo(edge1, call);
		queue.add(edge1, drools);
		
		# not ok	
		ExecutionEdge edge2 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setName(edge2, "no");
		handler.setFrom(edge2, call);
		handler.setTo(edge2, cancel);
		queue.add(edge2, drools);

		# ok
		ExecutionEdge edge3 = handler.generatedExecutionEdge(loginOperation, loginOperation);
		handler.setName(edge3, "yes");
		handler.setFrom(edge3, call);
		handler.setTo(edge3, finish);
		queue.add(edge3, drools);

end

rule "Create parameter for 'do login' operation inside login handler[type=user]"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.USER )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		
		role : Role ( )
		attribute : DomainAttribute ( eContainer == role )
		paramWire : ParameterEdge( from == role, to == login_handler )
		
		operation : CompositeOperation ( eContainer == login_session, name == "do login" )
		split : SplitNode ( eContainer == operation )
		join : JoinNode ( eContainer == operation )
		
		target : Property ( eContainer == scope, eval(functions.loginAttributeMatches(target, attribute)))

		not ( Parameter ( eContainer == operation, name == attribute.name ))
		
		eval ( handler.veto( operation ))

	then
		Parameter param = handler.generatedParameter(operation, operation);
		handler.setName(param, attribute.getName());
		queue.add(param, drools);
		
		CompositeOperation setValue = handler.generatedCompositeOperation(operation, operation);
		handler.setName(setValue, "setPropertyToValue");
		queue.add(setValue, drools);
		
		// split to set value
		ExecutionEdge edge1 = handler.generatedExecutionEdge(operation, operation);
		handler.setFrom(edge1, split);
		handler.setTo(edge1, setValue);
		queue.add(edge1, drools);
		
		// set value to join
		ExecutionEdge edge2 = handler.generatedExecutionEdge(operation, operation);
		handler.setFrom(edge2, setValue);
		handler.setTo(edge2, join);
		queue.add(edge2, drools);
		
		// flow from param to value
		DataFlowEdge data1 = handler.generatedDataFlowEdge(operation, operation);
		handler.setFrom(data1, param);
		handler.setTo(data1, setValue);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(operation, operation);
		handler.setFrom(data2, setValue);
		handler.setTo(data2, target);
		queue.add(data2, drools);

end

/* it's possible in the future that this method should be split up. */
rule "Connect successful 'login' operation to navigate to final 'login' page"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )
		
		login_operation : CompositeOperation( eContainer == login_session, name == "do login" )		
		login_target : Frame ( ) 
		login_wire : NavigateAction( from == login_handler, to == login_target, name == "login" )

		not (NavigateAction(from == login_operation, to == login_target))
		
		eval ( handler.veto( login_handler ))
			
	then
		NavigateAction wire = handler.generatedNavigateAction(login_handler, scope, login_operation, login_target);
		handler.setName(wire, "navigate on successful login");
		queue.add(wire, drools);
				
end

rule "Connect failed 'login' operation to navigate back to 'login'"
	when
		container : InternetApplication( )
		scope : Session( eContainer == container ) 
		login_handler : LoginHandler( eContainer == scope )
		login_session : Session ( eContainer == container, eval(functions.loginHandlerScopeMatches( login_session, login_handler )) )
		login : Frame (eContainer == login_session, name=="login" )
		login_operation : CompositeOperation( eContainer == login_session, name == "do login" )		

		not (NavigateAction(from == login_operation, to == login, name == "fail"))
		
		eval ( handler.veto( login_handler ))
			
	then
		NavigateAction wire = handler.generatedNavigateAction(login_handler, scope, login_operation, login);
		handler.setName(wire, "fail");
		queue.add(wire, drools);
		
end

rule "Create 'do logout' operation in session"
	when
		container : InternetApplication( )
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope )
		logout : Frame ( eContainer == scope, name == "logout" )
	
		not (CompositeOperation ( eContainer == scope, name == "do logout" ))
		
		eval ( handler.veto( login_handler ))

	then
		CompositeOperation operation = handler.generatedCompositeOperation(login_handler, scope);
		handler.setName(operation, "do logout");
		queue.add(operation, drools); 
		
end 

rule "Connect 'access' operation for logout page to 'do logout' operation"
	when
		container : InternetApplication( )
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope )
		
		logout : Frame ( )
		wire : NavigateAction ( from == login_handler, to == logout, name == "logout" )
		
		logout_operation : Operation ( eContainer == scope, name == "do logout" )
		access : EventTrigger ( eContainer == logout, logout.onAccess == access )
		# we can't add it to the end of the 'check key' operation, because then
		# all operations will have to run it as well.
		# add it to the end of the access operation chain
		
		not (RunAction( from == access, to == logout_operation ))
		
		eval ( handler.veto( login_handler ))
	
	then 
		RunAction run = handler.generatedRunAction(login_handler, logout, access, logout_operation);
		handler.setName(run, "run logout operation");
		queue.add(run, drools);

end 

rule "Connect new navigate wire from logout to logout destination"
	when
		container : InternetApplication( )
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope )
		logout : Frame ( eContainer == scope, name == "logout" )
		logout_operation : CompositeOperation ( eContainer == scope, name == "do logout" )
		# add it at the end of the operation chain (final_operation may == logout_operation)
		# in this case, we want all accesses to "do logout" to always redirect to "home" (for example)
		final_operation : CompositeOperation ( eval(final_operation.equals(functions.lastChainedOperation(logout_operation))) )
		destination : Frame ( )
		logout_wire : NavigateAction( from == login_handler, to == destination, name == "logout" )
		
		not (NavigateAction( from == final_operation, to == destination ))
		
		eval ( handler.veto( login_handler ))
	
	then
		NavigateAction wire = handler.generatedNavigateAction(login_handler, scope, final_operation, destination);
		handler.setName(wire, "navigate on successful logout");
		queue.add(wire, drools);
		
end

rule "Create contents of 'do logout' operation [type=secret_key]"
	when
		scope : Session( )
		o : CompositeOperation( name == "do logout", eContainer == scope )
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.SECRET_KEY )

		value : Property( )
		mySetWire : SetWire( from == login_handler, to == value, name == "set" )
		
		not (StartNode( eContainer == o))
		not (FinishNode( eContainer == o))
		
		eval ( handler.veto( o ))
	
	then
		# create a 'null' value
		StaticValue myNull = handler.generatedStaticValue(o, o);
		handler.setName(myNull, "reset value");
		handler.setValue(myNull, ModelPackage.eINSTANCE.getStaticValue_Value(), "null");
		queue.add(myNull, drools);
		
		StartNode start = handler.generatedStartNode(o, o);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(o, o);
		queue.add(finish, drools);
		
		# setPropertyToValue
		PrimitiveOperation op = handler.generatedPrimitiveOperation(o, o);
		handler.setName(op, "setPropertyToValue");
		queue.add(op, drools);
		
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data1, myNull);
		handler.setTo(data1, op);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data2, op);
		handler.setTo(data2, value);
		queue.add(data2, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge1, start);
		handler.setTo(edge1, op);
		queue.add(edge1, drools);

		# ok
		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge2, op);
		handler.setTo(edge2, finish);
		queue.add(edge2, drools);

end

rule "Create contents (initial) of 'do logout' operation [type=object or user]"
	when
		scope : Session( )
		o : CompositeOperation( name == "do logout", eContainer == scope )
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.DOMAIN_OBJECT || type == LoginHandlerTypes.USER )

		not (StartNode( eContainer == o))
		not (FinishNode( eContainer == o))
		
		eval ( handler.veto( o ))
	
	then
		# create a 'null' value
		StaticValue myNull = handler.generatedStaticValue(o, o);
		handler.setName(myNull, "reset value");
		handler.setValue(myNull, ModelPackage.eINSTANCE.getStaticValue_Value(), "null");
		queue.add(myNull, drools);
		
		StartNode start = handler.generatedStartNode(o, o);
		queue.add(start, drools);
		
		# ok
		FinishNode finish = handler.generatedFinishNode(o, o);
		queue.add(finish, drools);
		
		SplitNode split = handler.generatedSplitNode(o, o);
		queue.add(split, drools);
		
		JoinNode join = handler.generatedJoinNode(o, o);
		queue.add(join, drools);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge1, start);
		handler.setTo(edge1, split);
		queue.add(edge1, drools);

		# ok
		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge2, join);
		handler.setTo(edge2, finish);
		queue.add(edge2, drools);

end

rule "Create contents (specific keys) of 'do logout' operation [type=object]"
	when
		session : Session( )
		o : CompositeOperation( name == "do logout", eContainer == session )
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.DOMAIN_OBJECT )

		attribute : DomainAttribute ( )
		paramWire : ParameterEdge ( from == attribute, to == login_handler )
		
		key : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(key, attribute) ) )

		myNull : StaticValue ( eContainer == o, name == "reset value" )
		split : SplitNode ( eContainer == o )
		join : JoinNode ( eContainer == o )
			
		not (DataFlowEdge ( eContainer == o, from == key ))
		
		eval ( handler.veto( o ))
	
	then
	
		# setPropertyToValue
		PrimitiveOperation op = handler.generatedPrimitiveOperation(o, o);
		handler.setName(op, "setPropertyToValue");
		queue.add(op, drools);
	
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data1, myNull);
		handler.setTo(data1, op);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data2, op);
		handler.setTo(data2, key);
		queue.add(data2, drools);

		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge1, split);
		handler.setTo(edge1, op);
		queue.add(edge1, drools);

		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge2, op);
		handler.setTo(edge2, join);
		queue.add(edge2, drools);

end

rule "Create contents (specific keys) of 'do logout' operation [type=user]"
	when
		session : Session( )
		o : CompositeOperation( name == "do logout", eContainer == session )
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.USER )

		role : Role ( )
		attribute : DomainAttribute ( eContainer == role, eval(functions.notPrimaryKey(attribute)) )
		paramWire : ParameterEdge ( from == role, to == login_handler )
		
		key : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(key, attribute) ) )

		myNull : StaticValue ( eContainer == o, name == "reset value" )
		split : SplitNode ( eContainer == o )
		join : JoinNode ( eContainer == o )
			
		not (DataFlowEdge ( eContainer == o, from == key ))
		
		eval ( handler.veto( o ))
	
	then
	
		# setPropertyToValue
		PrimitiveOperation op = handler.generatedPrimitiveOperation(o, o);
		handler.setName(op, "setPropertyToValue");
		queue.add(op, drools);
	
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data1, myNull);
		handler.setTo(data1, op);
		queue.add(data1, drools);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		handler.setFrom(data2, op);
		handler.setTo(data2, key);
		queue.add(data2, drools);
	
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge1, split);
		handler.setTo(edge1, op);
		queue.add(edge1, drools);

		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		handler.setFrom(edge2, op);
		handler.setTo(edge2, join);
		queue.add(edge2, drools);

end

rule "Create default login successful page"
	when
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope )
		
		not ( wire : NavigateAction (from == login_handler, name == "login" ))
		
		eval ( handler.veto( login_handler ))

	then
		Frame page = handler.generatedFrame(login_handler, scope);
		handler.setName(page, "Login Successful");
		queue.add(page, drools);
		
		NavigateAction wire = handler.generatedNavigateAction(login_handler, login_handler, login_handler, page);
		handler.setName(wire, "login");
		queue.add(wire, drools);

end

rule "Create default logout successful page"
	when
		container : InternetApplication( )
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope )
		
		not ( wire : NavigateAction (from == login_handler, name == "logout" ))
		
		eval ( handler.veto( login_handler ))

	then
		Frame page = handler.generatedFrame(login_handler, container);
		handler.setName(page, "Logout Successful");
		queue.add(page, drools);
		
		NavigateAction wire = handler.generatedNavigateAction(login_handler, login_handler, login_handler, page);
		handler.setName(wire, "logout");
		queue.add(wire, drools);

end

/**
 * If we have multiple incoming ParameterEdges, we need special logic to
 * only instantiate this rule once (thanks to queued insertions).
 *
 * Essentially, we create only SelectWire for each DomainObject
 * linked by a ParameterEdge, and then use Java to generate the
 * actual query from the Attributes.
 */
rule "Create Select Wire between Domain Object types [object]"
	when
		scope : Session ( )
		dobj : DomainObject ( eval(functions.hasDomainAttribute(dobj)) )
		
		login_handler : LoginHandler( 
			eContainer == scope, 
			type == LoginHandlerTypes.DOMAIN_OBJECT,
			eval(functions.hasIncomingParameterEdgesFrom(login_handler, dobj)) 
		)
		
		instance : DomainObjectInstance ( )
		setWire : SetWire ( from == login_handler, to == instance )
		
		not ( SelectWire ( from == dobj, to == instance )) 
		
		eval ( handler.veto( login_handler ))
		
	then
		// find all the attributes as incoming parameter wires for the
		// given DomainObject
		String q = functions.getQueryString(login_handler, dobj);
			
		SelectWire wire = handler.generatedSelectWire(login_handler, login_handler, dobj, instance);
		handler.setName(wire, "select");
		handler.setQuery(wire, q);
		queue.add(wire, drools); 

end

rule "Create Select Wire between Domain Object types [user]"
	when
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.USER )

		role : Role ( )
		parameter : ParameterEdge( from == role, to == login_handler )

		instance : UserInstance ( )
		setWire : SetWire ( from == login_handler, to == instance )
		
		not ( SelectWire ( from == role, to == instance )) 
			
		eval ( handler.veto( login_handler ))
		
	then
		// find all the attributes as incoming parameter wires for the
		// given DomainObject (including superclasses)
		String q = functions.getUserQueryString(role);
			
		SelectWire wire = handler.generatedSelectWire(login_handler, login_handler, role, instance);
		handler.setName(wire, "select");
		handler.setQuery(wire, q);
		queue.add(wire, drools); 

end

# if the attributes have changed, we need to update the
# query string
rule "Update Select Wire between Domain Object types [user]"
	when
		scope : Session ( )
		login_handler : LoginHandler( eContainer == scope, type == LoginHandlerTypes.USER )

		role : Role ( )
		parameter : ParameterEdge( from == role, to == login_handler )

		instance : UserInstance ( )
		setWire : SetWire ( from == login_handler, to == instance )
		
		select : SelectWire ( from == role, to == instance )
		
		# a new attribute has been inserted (trigger)
		attribute : DomainAttributeInstance ( eContainer == instance )
		
		not (eval(select.getQuery() != null && select.getQuery().equals(functions.getUserQueryString(role))))
		
		eval ( handler.veto( login_handler ))
		
	then
		String q = functions.getUserQueryString(role);
		handler.setQuery(select, q);

end

rule "Create 'key attribute' property for LoginHandler[type = object]s"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.DOMAIN_OBJECT )
		
		attribute : DomainAttribute ( )
		paramWire : ParameterEdge ( from == attribute, to == login_handler )
		
		not ( p : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(p, attribute) ) ) )
		
		eval ( handler.veto( login_handler ))
				
	then
		Property key = handler.generatedProperty(login_handler, session);
		handler.setName(key, "current " + attribute.getName());
		# need to set a default value, or else require_session(this) will throw an exception before we can catch it to redirect
		handler.setValue(key, ModelPackage.eINSTANCE.getProperty_DefaultValue(), "");
		queue.add(key, drools);
		
end

rule "Create 'key attribute' property for LoginHandler[type = user]s"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.USER )
		
		role : Role ( )
		attribute : DomainAttribute ( eContainer == role, eval(functions.notPrimaryKey(attribute)) )
		paramWire : ParameterEdge ( from == role, to == login_handler )
		
		not ( p : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(p, attribute) ) ) )
		
		eval ( handler.veto( login_handler ))
				
	then
		Property key = handler.generatedProperty(login_handler, session);
		handler.setName(key, "current " + attribute.getName());
		# need to set a default value, or else require_session(this) will throw an exception before we can catch it to redirect
		handler.setValue(key, ModelPackage.eINSTANCE.getProperty_DefaultValue(), "");
		queue.add(key, drools);
		
end

rule "Connect key properties to LoginHandler for LoginHandler[type = object]"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.DOMAIN_OBJECT )
		
		object : DomainObject ( )
		attribute : DomainAttribute ( eContainer == object )
		paramWire : ParameterEdge ( from == attribute, to == login_handler )
		
		instance : DomainObjectInstance ( )
		setWire : SetWire ( from == login_handler, to == instance )
		
		select : SelectWire ( from == object, to == instance )
		
		key : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(key, attribute) ) )
			
		not ( SetWire ( from == login_handler, to == key ))
		
		eval ( handler.veto( login_handler ))
		
	then
		SetWire wire = handler.generatedSetWire(login_handler, session, login_handler, key);
		handler.setName(wire, "set");
		queue.add(wire, drools); 
	
end

rule "Connect key properties to SelectWire for LoginHandler[type = object]"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.DOMAIN_OBJECT )
		
		object : DomainObject ( )
		attribute : DomainAttribute ( eContainer == object )
		paramWire : ParameterEdge ( from == attribute, to == login_handler )
		
		instance : DomainObjectInstance ( )
		setWire : SetWire ( from == login_handler, to == instance )
		
		select : SelectWire ( from == object, to == instance )
		
		key : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(key, attribute) ) )
			
		not ( ParameterEdge ( from == key, to == select ))
		
		eval ( handler.veto( login_handler ))
		
	then
		ParameterEdge wire = handler.generatedParameterEdge(login_handler, session, key, select);
		handler.setName(wire, attribute.getName());
		queue.add(wire, drools); 
	
end

rule "Connect key properties to SelectWire for LoginHandler[type = user]"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.USER )
		
		role : Role ( )
		attribute : DomainAttribute ( eContainer == role )
		paramWire : ParameterEdge ( from == role, to == login_handler )
		
		instance : UserInstance ( )
		setWire : SetWire ( from == login_handler, to == instance )
		
		select : SelectWire ( from == role, to == instance )
		
		key : Property ( eContainer == session, 
			eval(functions.loginAttributeMatches(key, attribute) ) )
			
		not ( ParameterEdge ( from == key, to == select ))
		
		eval ( handler.veto( login_handler ))
		
	then
		ParameterEdge wire = handler.generatedParameterEdge(login_handler, session, key, select);
		handler.setName(wire, attribute.getName());
		queue.add(wire, drools); 
	
end

rule "Create 'check instance' operation for LoginHandler[type = object or user]"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.DOMAIN_OBJECT || type == LoginHandlerTypes.USER )
		
		not (Operation( eContainer == session, name == "check instance") )
		
		eval ( handler.veto( login_handler ))
					
	then
		CompositeOperation op = handler.generatedCompositeOperation( login_handler, session );
		handler.setName(op, "check instance");
		queue.add(op, drools);
		
end

rule "Create 'current instance' for LoginHandler[type=object]"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.DOMAIN_OBJECT )
		
		not (DomainObjectInstance ( eContainer == session ))
		
		eval ( handler.veto( login_handler ))
		
	then
		DomainObjectInstance instance = handler.generatedDomainObjectInstance( login_handler, session );
		handler.setName(instance, "current instance");
		queue.add(instance, drools);
		
		// connect with SetWire
		SetWire setWire = handler.generatedSetWire(login_handler, session, login_handler, instance);
		handler.setName(setWire, "set");
		queue.add(setWire, drools);

end

rule "Create 'current instance' for LoginHandler[type=user]"
	when
		session : Session( ) 
		login_handler : LoginHandler( eContainer == session, type == LoginHandlerTypes.USER )
		
		not (UserInstance ( eContainer == session ))
		
		eval ( handler.veto( login_handler ))
		
	then
		UserInstance instance = handler.generatedUserInstance( login_handler, session );
		handler.setName(instance, "current instance");
		queue.add(instance, drools);
		
		// connect with SetWire
		SetWire setWire = handler.generatedSetWire(login_handler, session, login_handler, instance);
		handler.setName(setWire, "set");
		queue.add(setWire, drools);

end
