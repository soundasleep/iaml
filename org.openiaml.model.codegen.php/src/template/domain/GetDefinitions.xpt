«IMPORT iaml»

/**
 * Methods for accessing data from domain objects and attributes.
 * All of this code is expected to execute on the server.
 */
«EXTENSION template::GeneratorExtensions»

/* code to get domain attributes */
«DEFINE getDomainAttribute FOR model::DomainAttributeInstance-»
	/**
	 * Get the attribute instance '«safeNameString(name)»' contained in
	 * '«safeName(eContainer)»'.
	 *
	 * Returns the current value for attribute ID '«id»'.
	 */
	function get_attribute_instance_«safeName()»($default = false) {
		«IF model::DomainObjectInstance.isInstance(eContainer)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
		«ELSE»
			/* contained in an attribute instance '«this»': get it from the instance */
			$iterator = DomainIterator_Attribute_«safeName()»::getInstance();
		«REM»
		«ELSEIF !inWires.typeSelect(model::wires::NewInstanceWire).isEmpty»
			/* sourced from a new instance wire */
			return get_new_attribute_instance_«safeName()-»();
		«ELSE»
			/* not contained in an object instance; select it manually */
			«IF inWires.typeSelect(model::wires::SelectWire).isEmpty»
				throw new IamlRuntimeException("No selection wires exist for getting attribute instance '«this»'");
			«ELSE»
				«IF model::DomainObjectInstance.isInstance(eContainer)»
					$offset = get_current_offset_«safeName(eContainer)»();
					object_instance_onChange_«safeName(eContainer)»()
					«EXPAND Select::evaluateSelectWire(true, true) FOR inWires.typeSelect(model::wires::SelectWire).first()»
				«ELSE»
					«EXPAND Select::evaluateSelectWire(true, false) FOR inWires.typeSelect(model::wires::SelectWire).first()»
				«ENDIF»
				if ($row === null) {
					if ($default === false)					
						throw new IamlRuntimeException("Could not find any value instance for attribute '«id»'");
					return $default;
				}
				return $row["«attributeName(this)-»"];
			«ENDIF»
		«ENDREM»
		«ENDIF»
		$value = $iterator->getAttributeInstance( DomainAttribute_«safeName(getAttributeForAttributeInstance())»::getInstance() )->getValue();
		
		// make sure we can cast this value to the appropriate type
		$type = "«escapePhpString(type.uRI)»";
		
		if (!can_cast($value, $type)) {
			throw new IamlRuntimeException("Unexpectedly could not cast value '$value' into type '$type'"); 
		}
		
		// return the casted value
		$value = do_cast($value, $type);
		
		// but internally, we store all values as strings
		return do_cast($value, 'http://openiaml.org/model/datatypes#iamlString');
	}
	
	/**
	 * Does the attribute instance '«safeNameString(name)»' exist yet; that is,
	 * does it exist in any DomainStore yet?
	 *
	 * Returns true or false.
	 */
	function has_attribute_instance_«safeName()»($default = false) {
		«IF model::DomainObjectInstance.isInstance(eContainer)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
		«ELSE»
			/* contained in an attribute instance '«this»': get it from the instance */
			$iterator = DomainIterator_Attribute_«safeName()»::getInstance();
		«REM»
		«ELSEIF !inWires.typeSelect(model::wires::NewInstanceWire).isEmpty»
			/* sourced from a new instance wire */
			return has_new_attribute_instance_«safeName()-»();
		«ELSE»
			/* not contained in an object instance; select it manually */
			«IF inWires.typeSelect(model::wires::SelectWire).isEmpty»
				throw new IamlRuntimeException("No selection wires exist for trying to find attribute instance '«this»'");
			«ELSE»
				«IF model::DomainObjectInstance.isInstance(eContainer)»
					$offset = get_current_offset_«safeName(eContainer)»();
					object_instance_onChange_«safeName(eContainer)»();
					«EXPAND Select::evaluateSelectWire(false, true) FOR inWires.typeSelect(model::wires::SelectWire).first()»
				«ELSE»
					«EXPAND Select::evaluateSelectWire(false, false) FOR inWires.typeSelect(model::wires::SelectWire).first()»
				«ENDIF»
				if ($row === null) {
					// not found
					return false;
				}
				return true;
			«ENDIF»
		«ENDREM»
		«ENDIF»
		return !$iterator->isEmpty() && ($iterator->getAttributeInstance( DomainAttribute_«safeName(getAttributeForAttributeInstance())»::getInstance() )->getValue() !== null);
	}
	
	«IF !inWires.typeSelect(model::wires::NewInstanceWire).isEmpty»
		«EXPAND getNewAttributeInstance(inWires.typeSelect(model::wires::NewInstanceWire).first()) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE getNewAttributeInstance(model::wires::NewInstanceWire wire) FOR model::DomainAttributeInstance»
	/**
	 * Get an instance of an attribute '«safeNameString(name)»',
	 * attribute ID '«id»'.
	 */
	function get_new_attribute_instance_«safeName()-»($force = true) {
		«IF containingSession() != null»
			// in the session
			if (has_session('new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»', false) === false) {
				// force creation?
				«IF isAutosaveOff()»
					if ($force == false) {
						// don't force creation; return a default
						return "";	/* TODO put in actual default for attribute "«safeNameString(name)-»" */
					}
				«ENDIF»
			
				// insert a new one
				log_message("Inserting new domain attribute [session] '«safeNameString(name)»' ('«safeNameString(id)»')");
				
				// where are we loading it from? sets $db_name
				«EXPAND Select::selectDatabase FOR wire.from»
				
				// create query
				$query = "INSERT INTO «safeNameString(((model::DomainObject) wire.from).name)»
					DEFAULT VALUES";
					
				$db_query = new DatabaseQuery($db_name);
				$db = $db_query->execute($query, array());

				// get the inserted id
				$new_id = $db->lastInsertId("«attributeName(getPrimaryKey(this))-»");
				log_message("new session variable id [«attributeName(getPrimaryKey(this))-»]: $new_id");

				// add a link to this
				$_SESSION['new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»'] = $new_id;
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT «safeNameString(name)» FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE «attributeName(getPrimaryKey(this))-»=?";
			$args = array(require_session('new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));
			log_message("selecting previously created new session object: " . print_r($args, true));

			$db_query = new DatabaseQuery($db_name);
			$row = $db_query->fetchFirst($query, $args);
			if ($row === null) {
				throw new IamlRuntimeException("No results found for query '$query'"); 
			}
			
			return $row["«safeNameString(name)»"];
		«ELSE»
			«throwException("TODO not completed yet")»
		«ENDIF»	
	}

	/**
	 * Does the attribute instance '«safeNameString(name)»',
	 * attribute ID '«id»', exist yet in the database?
	 *
	 * Returns true or false.
	 */
	function has_new_attribute_instance_«safeName()-»() {
		«IF containingSession() != null»
			// in the session
			if (has_session('new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»', false) === false) {
				// does not exist
				return false;
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT «safeNameString(name)» FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE «attributeName(getPrimaryKey(this))-»=?";
			$args = array(require_session('new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));
			log_message("selecting previously created new session object: " . print_r($args, true));

			$db_query = new DatabaseQuery($db_name);
			$row = $db_query->fetchFirst($query, $args);
			if ($row === null) {
				return false;	// none found
			}
			
			return true;		// exists
		«ELSE»
			«throwException("TODO not completed yet")»
		«ENDIF»	
	}
«ENDDEFINE»

«DEFINE getDomainObject FOR model::DomainObjectInstance-»
	/**
	 * Contains all of the Events that need to occur when 'onChange'
	 * is called, if any.
	 */
	function object_instance_onChange_«safeName()»() {
		«IF onChange != null»
			«EXPAND template::events::EventCall::callEvent(true) FOR onChange»
		«ENDIF» 
	}

	/**
	 * Get the domain object instance '«id»' as a basic associative array. 
	 * If a {@model RemoteDomainObject}, this may refresh the remote data source.
	 */
	function get_object_instance_«safeName()»($default = false) {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$result = $iterator->toArray();
		$basic = array();
		foreach ($result as $key => $inst) {
			$basic[$key] = $inst->getValue();
		}
		return $basic;
	}
		
	/**
	 * Get the number of results for the current query.
	 * If a {@model RemoteDomainObject}, this may refresh the remote data source.
	 */
	function get_instance_count_«safeName()»() {
		$iterator = DomainIterator_«safeName()»::getInstance();
		return $iterator->count();
	}
	
	/**
	 * Does the domain object instance '«id»' exist yet in the database?
	 * If a {@model RemoteDomainObject}, this may refresh the remote data source.
	 *
	 * Returns true or false.
	 */
	function has_object_instance_«safeName()»($default = false) {
		$iterator = DomainIterator_«safeName()»::getInstance();
		return !$iterator->isEmpty();
	}
	
	/**
	 * Ignore the current domain object instance and create
	 * a new one.
	 */
	function new_domain_instance_«safeName()»($default = false) {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->createNew();
	}

	«IF !inWires.typeSelect(model::wires::NewInstanceWire).isEmpty»
		«EXPAND getNewDomainObject(inWires.typeSelect(model::wires::NewInstanceWire).first()) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE getNewDomainObject(model::wires::NewInstanceWire wire) FOR model::DomainObjectInstance-»
	«LET ((model::DomainObject) wire.from) AS sourceObject»
	/**
	 * Explicitly create a new DomainObjectInstance of type '«safeNameString(sourceObject.name)»'
	 * and insert it into the database.
	 *
	 * This also sets a session variable 'new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'
	 * to track the newly created instance.
	 */
	function create_new_domain_object_«safeName()»() {
		// insert a new one
		log_message("Inserting new domain object [session] '«safeNameString(name)»' ('«safeNameString(id)»')");
		
		// where are we loading it from? sets $db_name
		«EXPAND Select::selectDatabase FOR wire.from»
		
		// create query
		$query = "INSERT INTO «safeNameString(sourceObject.name)»
					DEFAULT VALUES";
		
		// execute			
		$db_query = new DatabaseQuery($db_name);
		$db = $db_query->execute($query, array());

		// get the inserted id
		$new_id = $db->lastInsertId("«attributeName(getPrimaryKey(this))-»");
		log_message("new session variable id [«attributeName(getPrimaryKey(this))-»]: $new_id");

		// add a link to this
		$_SESSION['new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'] = $new_id;			
	}

	/**
	 * Create a new DomainObjectInstance '«safeNameString(name)»' (ID = '«id»').
	 */
	function get_new_domain_object_«safeName()-»($force = true) {
		«IF containingSession() != null»
			// in the session
			if (has_session('new_object_«safeNameString(containingSession().id)-»_«safeNameString(id)-»', false) === false) {
				// force creation?
				«IF isAutosaveOff()»
					if ($force == false) {
						// don't force creation; return a default
						return «EXPAND newDomainObjectTemplate FOR wire.from»;
					}
				«ENDIF»
				
				// create the new object 
				$instance = create_new_instance_«safeName(sourceObject)-»();
				
				$_SESSION['new_object_«safeNameString(containingSession().id)-»_«safeNameString(id)-»'] =
					 $instance["«safeNameString(getPrimaryKey(this).name)-»"];
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			$args = array(require_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));

			log_message("Selecting previously created new object [session]"); 
			$result = evaluate_select_wire(
				$db_name,
				'«safeNameString(sourceObject.id)»',
				'«safeNameString(sourceObject.name)»',
				'«safeNameString(sourceObject.name)».«attributeName(getPrimaryKey(this))-» = ?',
				$args
			);
			
			if ($result === null)
				throw new IamlInvalidSessionException("Could not get new session domain object '«safeNameString(id)»': args = " . print_r($args, true));
			
			return $result;
		«ELSE»
			// in the frame
			if (get_application_value('new_object_«safeNameString(id)-»', false) === false) {
				// force creation?
				«IF isAutosaveOff()»
					if ($force == false) {
						// don't force creation; return a default
						return «EXPAND newDomainObjectTemplate FOR wire.from»;
					}
				«ENDIF»

				// create the new object 
				$instance = create_new_instance_«safeName(sourceObject)»();
				log_message("created instance: " . print_r($instance, true));

				set_application_value('new_object_«safeNameString(id)-»', $instance["«safeNameString(getPrimaryKey(this).name)-»"]);
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			$args = array(get_application_value('new_object_«safeNameString(id)-»', 'missing'));

			log_message("Selecting previously created new object [frame]");
			 
			$result = evaluate_select_wire(
				$db_name,
				'«safeNameString(sourceObject.id)»',
				'«safeNameString(sourceObject.name)»',
				'«safeNameString(sourceObject.name)».«attributeName(getPrimaryKey(this))-» = ?',
				$args
			);
			
			if ($result === null)
				throw new IamlRuntimeException("Could not get new frame domain object '«safeNameString(id)»': args = " . print_r($args, true));
				
			return $result;
		«ENDIF»
	}

	/**
	 * Does a new DomainObjectInstance '«safeNameString(name)»' (ID = '«id»')
	 * exist yet in the database?
	 *
	 * Returns true or false.
	 */
	function has_new_domain_object_«safeName()-»() {
		«IF containingSession() != null»
			// in the session
			if (has_session('new_object_«safeNameString(containingSession().id)-»_«safeNameString(id)-»', false) === false) {
				// does not exist
				return false;
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			$args = array(require_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));

			log_message("Selecting previously created new object [session]"); 
			$result = evaluate_select_wire(
				$db_name,
				'«safeNameString(sourceObject.id)»',
				'«safeNameString(sourceObject.name)»',
				'«safeNameString(sourceObject.name)».«attributeName(getPrimaryKey(this))-» = ?',
				$args
			);
			
			if ($result === null)
				return false;
			
			return true;
		«ELSE»
			// in the frame
			if (get_application_value('new_object_«safeNameString(id)-»', false) === false) {
				// does not exist
				return false;
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			$args = array(get_application_value('new_object_«safeNameString(id)-»', 'missing'));

			log_message("Selecting previously created new object [frame]");
			 
			$result = evaluate_select_wire(
				$db_name,
				'«safeNameString(sourceObject.id)»',
				'«safeNameString(sourceObject.name)»',
				'«safeNameString(sourceObject.name)».«attributeName(getPrimaryKey(this))-» = ?',
				$args
			);
			
			if ($result === null)
				return false;
				
			return true;
		«ENDIF»
	}
	«ENDLET»
«ENDDEFINE»

«DEFINE newDomainObjectTemplate FOR model::WireSource»
	«throwException("Cannot get domain object template for object: " + this)»
«ENDDEFINE»

«DEFINE newDomainObjectTemplate FOR model::DomainObject»
	array(
		"_is_new" => true,
		«EXPAND newDomainAttributeTemplate FOREACH attributes SEPARATOR ", "»
	);
«ENDDEFINE»

«DEFINE newDomainAttributeTemplate FOR model::DomainAttribute»
	"«safeNameString(name)-»" => "" /* TODO eventually put the default value in here */
«ENDDEFINE»
