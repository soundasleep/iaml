«IMPORT iaml»

/**
 * Methods for accessing data from domain objects and attributes.
 * All of this code is expected to execute on the server.
 */
«EXTENSION template::GeneratorExtensions»

/* code to get domain attributes */
«DEFINE getDomainAttribute FOR model::DomainAttributeInstance-»
	function get_attribute_instance_«safeName()»($default = false) {
		/* return the current value for attribute id '«id»' */
		«IF eContainer.metaType.isAssignableFrom(model::DomainObjectInstance)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			$obj = get_object_instance_«safeName(eContainer)»();
			return $obj["«attributeName(this)-»"];
		«ELSEIF !inEdges.typeSelect(model::wires::NewInstanceWire).isEmpty»
			/* sourced from a new instance wire */
			return get_new_attribute_instance_«safeName()-»();
		«ELSE»
			/* not contained in an object instance; select it manually */
			«IF inEdges.typeSelect(model::wires::SelectWire).isEmpty»
				throw new IamlRuntimeException("No selection wires exist for getting attribute instance '«this»'");
			«ELSE»
				«EXPAND Select::evaluateSelectWire FOR inEdges.typeSelect(model::wires::SelectWire).first()»
				$row = $rs->fetch();
				if (!$row) {
					if ($default === false)					
						throw new IamlRuntimeException("Could not find any value instance for attribute '«id»'");
					return $default;
				}
				return $row["«attributeName(this)-»"];
			«ENDIF»
		«ENDIF»
	}
	
	«IF !inEdges.typeSelect(model::wires::NewInstanceWire).isEmpty»
		«EXPAND getNewAttributeInstance(inEdges.typeSelect(model::wires::NewInstanceWire).first()) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE getNewAttributeInstance(model::wires::NewInstanceWire wire) FOR model::DomainAttributeInstance»
	/** Get an instance of an attribute */
	function get_new_attribute_instance_«safeName()-»($force = true) {
		«IF containingSession() != null»
			// in the session
			if (has_session('new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»', false) === false) {
				// force creation?
				«IF isAutosaveOff()»
					if ($force == false) {
						// don't force creation; return a default
						return "";	/* TODO put in actual default for attribute "«safeNameString(name)-»" */
					}
				«ENDIF»
			
				// insert a new one
				log_message("Inserting new domain attribute [session] '«safeNameString(name)»' ('«safeNameString(id)»')");
				
				// where are we loading it from? sets $db
				«EXPAND Select::selectDatabase FOR wire.from»
				
				// create query
				$query = "INSERT INTO «safeNameString(((model::DomainObject) wire.from).name)»
					DEFAULT VALUES";
				
				// execute query
				$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
				$rs->execute() or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));

				// get the inserted id
				$new_id = $db->lastInsertId("«attributeName(getPrimaryKey(this))-»");
				log_message("new session variable id [«attributeName(getPrimaryKey(this))-»]: $new_id");

				// add a link to this
				$_SESSION['new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»'] = $new_id;
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT «safeNameString(name)» FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE «attributeName(getPrimaryKey(this))-»=?";
			$args = array(require_session('new_attribute_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));
			log_message("selecting previously created new session object: " . print_r($args, true));

			// execute query
			$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
			$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
			
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				throw new IamlRuntimeException("No results found for query '$query'");
			}
			
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj["«safeNameString(name)»"];
		«ELSE»
			«EXPAND exception FOR throwException("TODO not completed yet")»
		«ENDIF»	
	}
«ENDDEFINE»

«DEFINE getDomainObject FOR model::DomainObjectInstance-»
	function get_object_instance_«safeName()»($default = false) {
		/* get the object instance '«id»' */
		/* not contained in an object instance; select it manually */
		«IF inEdges.typeSelect(model::wires::SelectWire).isEmpty»
			«IF inEdges.typeSelect(model::wires::NewInstanceWire).isEmpty»
				throw new IamlRuntimeException("No selection or new instance wires exist for object instance '«id»'");
			«ELSE»
				// return a "new" object
				return get_new_domain_object_«safeName()-»(«IF isAutosaveOff()»false«ENDIF»);
			«ENDIF»
		«ELSE»
			«EXPAND Select::evaluateSelectWire FOR inEdges.typeSelect(model::wires::SelectWire).first()»
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				if ($default !== false) {
					return $default;
				} else {
					throw new IamlRuntimeException("No results found for query '$query'");
				}
			}
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj;
		«ENDIF»
	}

	/* Does the DomainObjectInstance «id» exist? */
	function exists_object_instance_«safeName()»() {
		return get_object_instance_«safeName()»(0) !== 0;
	}
	
	«IF !inEdges.typeSelect(model::wires::NewInstanceWire).isEmpty»
		«EXPAND getNewDomainObject(inEdges.typeSelect(model::wires::NewInstanceWire).first()) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE getNewDomainObject(model::wires::NewInstanceWire wire) FOR model::DomainObjectInstance-»
	function get_new_domain_object_«safeName()-»($force = true) {
		«IF containingSession() != null»
			// in the session
			if (has_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»', false) === false) {
				// force creation?
				«IF isAutosaveOff()»
					if ($force == false) {
						// don't force creation; return a default
						return «EXPAND newDomainObjectTemplate FOR wire.from»;
					}
				«ENDIF»
			
				// insert a new one
				log_message("Inserting new domain object [session] '«safeNameString(name)»' ('«safeNameString(id)»')");
				
				// where are we loading it from? sets $db
				«EXPAND Select::selectDatabase FOR wire.from»
				
				// create query
				$query = "INSERT INTO «safeNameString(((model::DomainObject) wire.from).name)»
					DEFAULT VALUES";
				
				// execute query
				$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
				$rs->execute() or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));

				// get the inserted id
				$new_id = $db->lastInsertId("«attributeName(getPrimaryKey(this))-»");
				log_message("new session variable id [«attributeName(getPrimaryKey(this))-»]: $new_id");

				// add a link to this
				$_SESSION['new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'] = $new_id;
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT * FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE «attributeName(getPrimaryKey(this))-»=?";
			$args = array(require_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));
			log_message("selecting previously created new session object: " . print_r($args, true));

			// execute query
			$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
			$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
			
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				throw new IamlRuntimeException("No results found for query '$query'");
			}
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj;
		«ELSE»
			// in the page
			if (get_application_value('new_object_«safeNameString(id)-»', false) === false) {
				// force creation?
				«IF isAutosaveOff()»
					if ($force == false) {
						// don't force creation; return a default
						return «EXPAND newDomainObjectTemplate FOR wire.from»;
					}
				«ENDIF»

				// insert a new one
				log_message("Inserting new domain object [page] '«safeNameString(name)»' ('«safeNameString(id)»')");
				
				// where are we loading it from? sets $db
				«EXPAND Select::selectDatabase FOR wire.from»
				
				// create query
				$query = "INSERT INTO «safeNameString(((model::DomainObject) wire.from).name)»
					DEFAULT VALUES";
				
				// execute query
				$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
				$rs->execute() or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));

				// get the inserted id
				$new_id = $db->lastInsertId("«attributeName(getPrimaryKey(this))-»");
				log_message("new page variable id [«attributeName(getPrimaryKey(this))-»]: $new_id");

				// add a link to this
				set_application_value('new_object_«safeNameString(id)-»', $new_id);
			}
				
			// return the newly inserted object
			«EXPAND Select::selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT * FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE «attributeName(getPrimaryKey(this))-»=?";
			$args = array(get_application_value('new_object_«safeNameString(id)-»', 'missing'));
			log_message("selecting previously created new page object: " . print_r($args, true));

			// execute query
			$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
			$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
			
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				throw new IamlRuntimeException("No results found for query '$query'");
			}
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj;
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE newDomainObjectTemplate FOR model::WireEdgesSource»
	«EXPAND exception FOR throwException("Cannot get domain object template for object: " + this)»
«ENDDEFINE»

«DEFINE newDomainObjectTemplate FOR model::DomainObject»
	array(
		"_is_new" => true,
		«EXPAND newDomainAttributeTemplate FOREACH attributes SEPARATOR ", "»
	);
«ENDDEFINE»

«DEFINE newDomainAttributeTemplate FOR model::DomainAttribute»
	"«safeNameString(name)-»" => "" /* TODO eventually put the default value in here */
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
