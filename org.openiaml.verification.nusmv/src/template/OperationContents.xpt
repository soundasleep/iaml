«IMPORT iaml»

«EXTENSION metamodel::LoopExtensions»


«DEFINE operationContents FOR model::operations::ActivityOperation»
«LET nodes.typeSelect(model::operations::StartNode) AS startNodes»
«LET nodes.typeSelect(model::operations::FinishNode) AS finishNodes»
«LET nodes.typeSelect(model::operations::CancelNode) AS cancelNodes»
«LET nodes.typeSelect(model::ActivityNode) AS allNodes»
«LET operations.typeSelect(model::Operation) AS allOperations»
«LET variables AS allTemporaryVariables»

-- definitions for split nodes
«FOREACH nodes.typeSelect(model::operations::SplitNode) AS split»
«FOREACH split.outExecutions.to AS splitPath»
MODULE split_«safeName(splitPath)»(flag«FOREACH variables AS v», «safeName(v)»«ENDFOREACH»)

VAR
	-- has the operation completed?
	finished : boolean;

	-- current operation step
	current_step : {
		null 
		«REM»nodes«ENDREM»
		«FOREACH allNodes AS n»
			, «safeName(n)»
		«ENDFOREACH»
		«REM»operations«ENDREM»
		«FOREACH allOperations AS n»
			, «safeName(n)»
		«ENDFOREACH» 
	};
	
	«REM»TODO split/join paths can not currently support operation calls«ENDREM»
	
	-- value overflow
	value_overflow : boolean;

ASSIGN
	init(finished) := 0;
	init(current_step) := null;
	
	next(finished) := case
		-- currently running
		flag = 1 : case
			«FOREACH allNodes.typeSelect(model::operations::JoinNode) AS n»
				current_step = «safeName(n)» : 1;
			«ENDFOREACH»

			1 : finished;
		esac;
		
		-- operation isn't running
		1 : 0;
	esac;
	
	next(current_step) := case
		-- operation hasn't started yet
		current_step = null : case
			flag = 1 : «safeName(splitPath)»;
			1 : null;
		esac;
		
		-- operation is running
		«REM»we cannot yet support two layers of split/join«ENDREM»
		«FOREACH allNodes.reject(n|model::operations::SplitNode.isInstance(n)).typeSelect(model::operations::ExecutionEdgesSource).select(n|!n.outExecutions.to.isEmpty) AS n»
			current_step = «safeName(n)» :
				«EXPAND Flow::nextStep FOR n»;
		«ENDFOREACH»
		«FOREACH allOperations.typeSelect(model::operations::ExecutionEdgesSource).select(n|!n.outExecutions.to.isEmpty) AS n»
			current_step = «safeName(n)» :
				«EXPAND Flow::nextStep FOR n»;
		«ENDFOREACH»
		
		-- operation is running, but shouldn't be
		1 : null;
	esac;
	
	«FOREACH allTemporaryVariables AS v»
		next(«safeName(v)») := case
			-- is operation running?
			flag = 1 : case
			
				-- are we on a step which modifies it?
				«FOREACH allOperations.typeSelect(model::operations::SetNode)
						.select(n|n.outFlows.to.contains(v)) AS n»
					current_step = «safeName(n)» : («EXPAND Flow::getTemporaryVariableValue FOR n.inFlows.from.first()») mod «maximumIntegerSize() + 1»;
				«ENDFOREACH»	
				
				-- otherwise, it remains the same
				1 : «safeName(v)»;
			esac;
			
			1 : 0;
		esac;
	«ENDFOREACH»
	
	-- check for value overflow
	next(value_overflow) := case
		flag = 1 : case
			«FOREACH allTemporaryVariables AS v»
				«FOREACH allOperations.typeSelect(model::operations::SetNode)
						.select(n|n.outFlows.to.contains(v)) AS n»
					current_step = «safeName(n)» : case
						(«EXPAND Flow::getTemporaryVariableValue FOR n.inFlows.from.first()») = («EXPAND Flow::getTemporaryVariableValue FOR n.inFlows.from.first()») mod «maximumIntegerSize() + 1» : 0;
						-- if they are not equal, then we have overflowed
						1 : 1;
					esac;
				«ENDFOREACH»
			«ENDFOREACH»
			1 : value_overflow;
		esac;
		
		1 : value_overflow;
	esac;
	
FAIRNESS
	running
	
«ENDFOREACH»«REM»splitPath«ENDREM»
«ENDFOREACH»«REM»SplitNode«ENDREM»

-- operation definition
MODULE operation_«safeName()»(flag
	«FOREACH allApplicationProperties(getRoot()) AS p», property_«safeName(p)»«ENDFOREACH»)

VAR
	-- has the operation completed?
	finished : boolean;

	-- current operation step
	«IF !allNodes.isEmpty || !allOperations.isEmpty»
	current_step : {
		null 
		«REM»nodes«ENDREM»
		«FOREACH allNodes AS n»
			, «safeName(n)»
		«ENDFOREACH»
		«REM»operations«ENDREM»
		«FOREACH allOperations AS n»
			, «safeName(n)»
		«ENDFOREACH» 
	};
	«ENDIF»
	
	-- temporary variables
	«FOREACH allTemporaryVariables AS v»
		«safeName(v)» : 0..«maximumIntegerSize()»;
	«ENDFOREACH»
	
	-- split nodes
	«FOREACH nodes.typeSelect(model::operations::SplitNode).outExecutions.to AS split»
		run_split_«safeName(split)» : boolean;
		split_«safeName(split)» : process split_«safeName(split)»(run_split_«safeName(split)»«FOREACH variables AS v», «safeName(v)»«ENDFOREACH»);
	«ENDFOREACH»
	
	-- operation calls
	«FOREACH nodes.typeSelect(model::operations::OperationCallNode).listeners.select(a|model::Operation.isInstance(a.target)).target AS call»
		run_call_«safeName(call)» : boolean;
		call_«safeName(call)» : process operation_«safeName(call)»(run_call_«safeName(call)»«REM»operation calls have their own variable instances«ENDREM», navigation_finished);
	«ENDFOREACH»
	
	-- value overflow
	value_overflow : boolean;

ASSIGN
	init(finished) := 0;
	init(current_step) := null;
	
	«FOREACH nodes.typeSelect(model::operations::SplitNode).outExecutions.to AS split»
		init(run_split_«safeName(split)») := 0;
	«ENDFOREACH»
	
	next(finished) := case
		-- currently running
		flag = 1 : case
			«FOREACH finishNodes AS n»
				current_step = «safeName(n)» : 1;
			«ENDFOREACH»
			«FOREACH cancelNodes AS n»
				current_step = «safeName(n)» : 1;
			«ENDFOREACH»

			1 : finished;
		esac;
		
		-- operation isn't running
		1 : 0;
	esac;
	
	«IF !allNodes.isEmpty || !allOperations.isEmpty»
	next(current_step) := case
		-- we've already finished
		finished = 1 : current_step;
		
		-- operation hasn't started yet
		current_step = null : case
			«IF selectStartNode() != null»
			flag = 1 : «safeName(selectStartNode())»;
			«ENDIF»
			1 : null;
		esac;
		
		-- operation is running
		«FOREACH allNodes.typeSelect(model::operations::ExecutionEdgesSource).select(n|!n.outExecutions.to.isEmpty) AS n»
			current_step = «safeName(n)» :
				«EXPAND Flow::nextStep FOR n»;
		«ENDFOREACH»
		«FOREACH allOperations.typeSelect(model::operations::ExecutionEdgesSource).select(n|!n.outExecutions.to.isEmpty) AS n»
			current_step = «safeName(n)» :
				«EXPAND Flow::nextStep FOR n»;
		«ENDFOREACH»
		
		-- operation is running, but shouldn't be
		1 : null;
	esac;
	«ENDIF»
	
	«FOREACH allTemporaryVariables AS v»
		next(«safeName(v)») := case
			-- is operation running?
			flag = 1 : case
			
				-- are we on a step which modifies it?
				«FOREACH allOperations.typeSelect(model::operations::SetNode)
						.select(n|n.outFlows.to.contains(v)) AS n»
					current_step = «safeName(n)» : («EXPAND Flow::getTemporaryVariableValue FOR n.inFlows.from.first()») mod «maximumIntegerSize() + 1»;
				«ENDFOREACH»	
				
				-- otherwise, it remains the same
				1 : «safeName(v)»;
			esac;
			
			1 : 0;
		esac;
	«ENDFOREACH»
	
	-- split nodes
	«FOREACH nodes.typeSelect(model::operations::SplitNode) AS split»
		«FOREACH split.outExecutions.to AS target»
		next(run_split_«safeName(target)») := case
			current_step = «safeName(split)» : 1;
			1 : 0;
		esac;
		«ENDFOREACH»
	«ENDFOREACH»

	-- operation calls
	«FOREACH nodes.typeSelect(model::operations::OperationCallNode) AS call»
		«FOREACH call.listeners.select(a|model::Operation.isInstance(a.target)).target AS target»
		next(run_call_«safeName(target)») := case
			current_step = «safeName(call)» : 1;
			1 : 0;
		esac;
		«ENDFOREACH»
	«ENDFOREACH»
		
	-- check for value overflow
	next(value_overflow) := case
		flag = 1 : case
			«FOREACH allTemporaryVariables AS v»
				«FOREACH allOperations.typeSelect(model::operations::SetNode)
						.select(n|n.outFlows.to.contains(v)) AS n»
					current_step = «safeName(n)» : case
						(«EXPAND Flow::getTemporaryVariableValue FOR n.inFlows.from.first()») = («EXPAND Flow::getTemporaryVariableValue FOR n.inFlows.from.first()») mod «maximumIntegerSize() + 1» : 0;
						-- if they are not equal, then we have overflowed
						1 : 1;
					esac;
				«ENDFOREACH»
			«ENDFOREACH»
			1 : value_overflow;
		esac;
		
		1 : value_overflow;
	esac;

	-- we have to let operations change property values, as they have access
	-- to their current status
	«FOREACH allApplicationProperties(getRoot()) AS p»
	next(property_«safeName(p)») := case
		«REM»find all operations that change it«ENDREM»
		«FOREACH operations.typeSelect(model::operations::SetNode)
				.select(o | !o.outFlows.select(f|f.to == p).isEmpty) AS setOp»
			current_step = «safeName(setOp)» :
				(«EXPAND Flow::getTemporaryVariableValue FOR setOp.inFlows.from.first()») mod «maximumIntegerSize() + 1»;
			«REM»TODO value overflow«ENDREM»
		«ENDFOREACH»
	
		-- otherwise, property value stays the same
		1 : property_«safeName(p)»;
	esac;
	«ENDFOREACH»

FAIRNESS
  running

«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDLET»

«ENDDEFINE»

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540  
 */
«DEFINE exception FOR Object»
«ENDDEFINE»
