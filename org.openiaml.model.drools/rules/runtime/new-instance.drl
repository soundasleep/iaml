# Update the attributes in "new instance" objects when they
# are connected to DomainObjects.
package org.openiaml.model.drools

#list any import classes here.
import org.eclipse.emf.ecore.*;
import java.util.*;
import java.io.*;
import org.openiaml.model.*;
import org.openiaml.model.model.*;	// for ModelPackage
import org.openiaml.model.model.domain.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.operations.*;

import org.openiaml.model.inference.*;		// for handler

#declare any global variables here
global EcoreCreateElementsHelper handler;

# insertion queue
import org.openiaml.model.drools.*;
global DroolsInsertionQueue queue;

rule "Refresh NewInstanceWire Instance Object mappings"
	when
		object : DomainObject ( )
		instance : DomainObjectInstance ( )
		wire : NewInstanceWire( overridden == false, from == object, to == instance )

		attribute : DomainAttribute ( eContainer == object )
		
		not ( DomainAttributeInstance( eContainer == instance, name == attribute.name ))
		
	then
		# create a new one
		DomainAttributeInstance attr = handler.generatedDomainAttributeInstance(wire, instance);
		handler.setName(attr, attribute.getName());
		queue.add(attr, drools);

end

rule "Refresh SelectWire Instance Object mappings"
	when
		object : DomainObject ( )
		instance : DomainObjectInstance ( )
		wire : SelectWire( overridden == false, from == object, to == instance )

		attribute : DomainAttribute ( eContainer == object )
		
		not ( DomainAttributeInstance( eContainer == instance, name == attribute.name ))
		
	then
		# create a new one
		DomainAttributeInstance attr = handler.generatedDomainAttributeInstance(wire, instance);
		handler.setName(attr, attribute.getName());
		queue.add(attr, drools);

end

rule "Create 'save' operation for DomainObjectInstances"
	when
		instance : DomainObjectInstance ( )
		
		not ( Operation( eContainer == instance, name == "save" ))
		
	then
		# create a new one
		CompositeOperation op = handler.generatedCompositeOperation(instance, instance);
		handler.setName(op, "save");
		queue.add(op, drools);

end

rule "Create 'exists?' operation for DomainObjectInstances"
	when
		instance : DomainObjectInstance ( )
		
		not ( DecisionOperation( eContainer == instance, name == "exists?" ))
		
	then
		# create a new one
		DecisionOperation op = handler.generatedDecisionOperation(instance, instance);
		handler.setName(op, "exists?");
		queue.add(op, drools);

end

rule "Create 'edit' event for DomainAttributeInstances"
	when
		instance : DomainAttributeInstance ( )
		
		not ( EventTrigger( eContainer == instance, name == "edit" ))
		
	then
		# create a new one
		EventTrigger event = handler.generatedEventTrigger(instance, instance);
		handler.setName(event, "edit");
		queue.add(event, drools);

end

rule "Create 'fieldValue' value for DomainAttributeInstances"
	when
		instance : DomainAttributeInstance ( )
		
		not ( ApplicationElementProperty( eContainer == instance, name == "fieldValue" ))
		
	then
		# create a new one
		ApplicationElementProperty value = handler.generatedApplicationElementProperty(instance, instance);
		handler.setName(value, "fieldValue");
		queue.add(value, drools);

end

