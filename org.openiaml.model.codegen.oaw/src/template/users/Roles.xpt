«IMPORT iaml»

/**
 * Code behind Roles.
 *
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE roleFunctions FOR model::users::Role»
	«REM»all roles that extend this role«ENDREM»
	«FOREACH getDomainStore().eAllContents.typeSelect(model::users::Role) AS role»
		«EXPAND addRoleFunction(role) FOR this»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE addRoleFunction(model::users::Role target) FOR model::users::Role»
/**
 * Add the role '«target.name»' to the current instance of '«name»'.
 *
 * This role can only be added if there is a common ancestor of both.
 *
 */
function add_role_«safeName(target)»_to_«safeName()»($instance) {
	«IF target==this»
		// same role; no need to do any more
		return $instance;
	«ELSEIF allSubtypes().contains(target)»
		// the type '«target.name»' is a subtype of '«name»'
		
		«LET inEdges.typeSelect(model::wires::ExtendsWire).from.typeSelect(model::users::Role) AS directSubtypes»
		«FOREACH directSubtypes AS subType»
			«IF allSubtypes(subType).contains(target)»
				// the subtype '«subType.name»' has a path to '«target.name»'
				
				// does an instance of '«subType.name»' exist?
				$this_instance = cast_«safeName()»_as_«safeName(subType)»($instance);
				if ($this_instance === null) {
					// insert in a new instance
					
					«LET getPrimaryKey() AS pk»
					«LET subType.attributes.select(a|a.outEdges.typeSelect(model::wires::ExtendsWire).to.contains(pk)).first() AS subtypeFk»

					«EXPAND template::domain::Select::selectDatabase FOR subType»
					
					// the database will insert in a new primary key
					$query = "INSERT INTO «safeNameString(subType.name)» 
						(«safeNameString(subtypeFk.name)»)
						VALUES
						(?)";
						
					if (!isset($instance["«safeNameString(pk.name)-»"])) {
						throw new IamlRuntimeException("Primary key '«pk.name»' did not exist in instance of '«name»'");
					}
					$args = array($instance["«safeNameString(pk.name)-»"]);
					
					$db_query = new DatabaseQuery($db_name);
					$db = $db_query->execute($query, $args);
					«ENDLET»
					«ENDLET»

					// now that we have inserted it, we should be able to successfully cast
					$this_instance = cast_«safeName()»_as_«safeName(subType)»($instance);
					if ($this_instance === null) {
						throw new IamlRuntimeException("Could not successfully add new role '«subType.name»' to existing role '«name»'");
					}
				}
				
				// now get the next subtype to add information 
				return add_role_«safeName(target)»_to_«safeName(subType)»($this_instance);
			«ENDIF»
		«ENDFOREACH»
		«ENDLET»		
	«ELSE»
		// the target class is not in any subclasses; try the direct superclasses
		«FOREACH outEdges.typeSelect(model::wires::ExtendsWire).to.typeSelect(model::DomainObject) AS superclass»
			// subclass '«superclass.name»'
			$superclass_instance = get_subclass_«safeName(superclass)»_from_«safeName()»($instance);
			if ($superclass_instance != null) {
				$result = add_role_«safeName(target)»_to_«safeName(superclass)»($superclass_instance);
				if ($result !== null) {
					// successful
					return $result;
				}
				log_message("[add role] could not add role from superclass '«superclass.name»'");
			}
		«ENDFOREACH»
		
		// could not find any
		throw new IamlRuntimeException("Could not find any common ancestor between '«target.name»' and '«name»'"); 
	«ENDIF»
}
«ENDDEFINE»

«DEFINE getRoleSuperclass FOR model::users::Role»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»