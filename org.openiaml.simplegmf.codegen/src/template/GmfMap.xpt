«IMPORT simplegmf»
«IMPORT ecore»

«EXTENSION metamodel::SimpleGMFExtensions»

«DEFINE generateGmfMap(simplegmf::GMFConfiguration root) FOR simplegmf::DiagramEditor»
	«FILE toString(id) + ".gmfmap"-»
<?xml version="1.0" encoding="UTF-8"?>
<gmfmap:Mapping xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:gmfmap="http://www.eclipse.org/gmf/2008/mappings"
    xmlns:gmftool="http://www.eclipse.org/gmf/2005/ToolDefinition">
    
  «EXPAND elementDefinition(root, this) FOREACH elements.typeSelect(simplegmf::ContainedNode).toSet().addAll(elements.typeSelect(simplegmf::ReferencedNode))»

  <!-- canvas element -->
  <diagram>
    <diagramCanvas
        href="«root.id».gmfgraph#model"/>
    <domainModel
        href="«getResourceFileName(classifier)»#/"/>
    <domainMetaElement
        href="«EXPAND toHref(root) FOR classifier»"/>
    <palette
        href="«id».gmftool#//@palette"/>
  </diagram>
</gmfmap:Mapping>
	«ENDFILE»
«ENDDEFINE»

«DEFINE elementDefinition(simplegmf::GMFConfiguration root, simplegmf::DiagramEditor editor) FOR simplegmf::DiagramElement»
	«IF containmentFeatures.isEmpty»
		<!-- node '«classifier.name»' -->
		<nodes>
		«IF simplegmf::ContainedNode.isInstance(this)»
			«REM»ContainedNodes: derive containment feature«ENDREM»
			«LET editor.classifier.eAllContainments.select(c| ecore::EClass.isInstance(c.eType) &&
				toBoolean(((ecore::EClass) c.eType).isSuperTypeOf(this.classifier))) AS allContainmentFeatures»
				«IF allContainmentFeatures.isEmpty»
					«throwException("No containment feature found for: " + this)»
				«ELSEIF allContainmentFeatures.size > 1»
					«throwException("More than one containment feature found for: " + this + ", found " + allContainmentFeatures.size + ": " + allContainmentFeatures)»
				«ELSE»
				    <containmentFeature
				        href="«EXPAND toHref(root) FOR allContainmentFeatures.first()»"/>
				    «EXPAND ownedChild(root, editor) FOR this»
				«ENDIF»
			«ENDLET»
		«ELSE»
			«REM»ReferencedNodes: no containment feature«ENDREM»
			<!-- no containment feature -->
		«ENDIF»
		</nodes>
	«ELSE»
		«IF simplegmf::ContainedNode.isInstance(this)»
			<!-- contained node '«classifier.name»' -->
			«REM»ContainedNodes: lots of specific containment features«ENDREM»
			«FOREACH containmentFeatures AS feature»
				<!-- containment feature: «EXPAND toHref(root) FOR feature» -->
				<nodes>
					<containmentFeature
				        href="«EXPAND toHref(root) FOR feature»"/>
				    «EXPAND ownedChild(root, editor) FOR this»
				</nodes>
			«ENDFOREACH»
		«ELSE»
			«REM»ReferencedNodes: exception«ENDREM»
			«throwException("Only ContainedNodes can have containment features set: " + this)»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE ownedChild(simplegmf::GMFConfiguration root, simplegmf::DiagramEditor editor)  FOR simplegmf::DiagramElement»
<ownedChild>
	<domainMetaElement
		href="«EXPAND toHref(root) FOR classifier»"/>
	<diagramNode
		href="«root.id».gmfgraph#«classifier.name»"/>
</ownedChild>
«ENDDEFINE»

/**
 * Translates an EStructuralFeature into something similar to:
 * <code>iaml.ecore#//ContainsOperations/operations</code>
 */
«DEFINE toHref(simplegmf::GMFConfiguration root) FOR ecore::EStructuralFeature-»
«EXPAND toHref(root) FOR eContainingClass-»/«name-»
«ENDDEFINE»

«DEFINE toHref(simplegmf::GMFConfiguration root) FOR ecore::EClass-»
«getResourceFileName()-»#//«EXPAND toHrefPackage(root) FOR ePackage-»«name-»
«ENDDEFINE»

«DEFINE toHrefPackage(simplegmf::GMFConfiguration root) FOR ecore::EPackage-»
«IF this == null»«throwException("Unexpected null ePackage for EClass: " + this)»«ENDIF-»
«IF this != root.rootElement.ePackage»«EXPAND toHrefPackage(root) FOR this.eSuperPackage»«name»/«ENDIF-»
«ENDDEFINE»

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540  
 */
«DEFINE exception FOR Object»
«ENDDEFINE»
