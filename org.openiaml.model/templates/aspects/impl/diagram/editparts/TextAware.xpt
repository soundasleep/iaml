/**
 * Add a isGenerated "/derived" property to all GeneratedElements that
 * are generated.
 *
 * ALSO: Disable resetting font colours (from user preferences, etc)
 * From http://dev.eclipse.org/newslists/news.eclipse.modeling.gmf/msg16145.html
 *
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»

/**
 * We have to redefine the entire command, because there are no
 * extension points which we can use.
 */
«AROUND getLabelText FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment("Add a /derived property to generated elements. Method is made public to allow for accessible testing.")»
	public String getLabelText() {
		String text = null;
		org.eclipse.emf.ecore.EObject parserElement = getParserElement();
		if (parserElement != null && getParser() != null) {
			text = getParser().getPrintString(
				new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(parserElement),
				getParserOptions().intValue());
		}
		if (text == null || text.length() == 0) {
			text = defaultText;
		}
		
		// Jevon addition: add "/derived" text
		if (getParserElement() instanceof org.openiaml.model.model.GeneratedElement) {
			if (((org.openiaml.model.model.GeneratedElement) getParserElement()).isIsGenerated()) {
				text = "/" + text;
			}
		}		
		
		return text;
	}
«ENDAROUND»

«AROUND setFontColor FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: Disable refreshing the font color.")»
	protected void setFontColor(org.eclipse.swt.graphics.Color color) {
		// some weird logic: if we can edit this field, then
		// we should be able to change its color. (makes some sense?)
		// NOTE: this also means all editable fields will be black by default.
		if (isEditable()) {
			getFigure().setForegroundColor(color);
		} else {			
			/* [jevon] is this a stereotype label? */
			String labelText = getLabelText();
			boolean forceUnderline = false;
			if (labelText != null && (labelText.startsWith("/: ") || labelText.startsWith(": "))) {
				// yes it is; allow it to be changed too.
				getFigure().setForegroundColor(color);
			}
		}
	}
«ENDAROUND»

/**
 * Issue 162: display overridden elements in bold.
 *
 * We replace refreshFont() directly and add additional logic.
 */
«AROUND refreshFont FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment("[jevon] issue 162: display {@link GeneratesElements#isOverridden() overridden elements} as bold.")»
	protected void refreshFont() {
		org.eclipse.gmf.runtime.notation.FontStyle style =
			(org.eclipse.gmf.runtime.notation.FontStyle) getFontStyleOwnerView().getStyle(
				org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle());
		if (style != null) {
			// [jevon] issue 162: check isOverridden
			boolean forceBold = false;
			org.eclipse.emf.ecore.EObject obj = resolveSemanticElement();
			// NOTE: model-specific
			if (obj != null && obj instanceof org.openiaml.model.model.GeneratesElements) {
				if (((org.openiaml.model.model.GeneratesElements) obj).isOverridden()) {
					forceBold = true;
				}
			}

			org.eclipse.swt.graphics.FontData fontData = new org.eclipse.swt.graphics.FontData(
				style.getFontName(), style.getFontHeight(),
				/* force bold? */ forceBold ? org.eclipse.swt.SWT.BOLD : (style.isBold() ? org.eclipse.swt.SWT.BOLD : org.eclipse.swt.SWT.NORMAL) |
				(style.isItalic() ? org.eclipse.swt.SWT.ITALIC : org.eclipse.swt.SWT.NORMAL));
			setFont(fontData);
		}
	}
«ENDAROUND»

/**
 * Adds a new method, setUnderline(), that allows for external 
 * EditParts to set the underline on the current label.
 */
«AROUND refreshUnderline FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment("[jevon] Allows the underline on the element to be set manually. Meant for displaying stereotype/instance class names. Based on {@link #refreshUnderline()}. Does not actually refresh the underline.")»
	protected void refreshUnderline() {
		org.eclipse.gmf.runtime.notation.FontStyle style =
			(org.eclipse.gmf.runtime.notation.FontStyle) getFontStyleOwnerView().getStyle(
				org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle());
		if (style != null && getFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
			/* [jevon] should we force an underline? */
			String labelText = getLabelText();
			boolean forceUnderline = false;
			if (labelText != null && (labelText.startsWith("/: ") || labelText.startsWith(": "))) {
				forceUnderline = true;
			}
			
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getFigure()).setTextUnderline(forceUnderline || style.isUnderline());
		}
	}
«ENDAROUND»

