#created on: 4/11/2008
package org.openiaml.model.drools

#list any import classes here.
import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;

#declare any global variables here
global EcoreCreateElementsHelper handler;
# can we define ICreateElements as a global variable?

rule "Create empty domain store"
		
	when
		#conditions
		a : InternetApplication ( name == "test" )
		not (DomainStore( name=="test domain store") from a.domainStores)
		// how do we know when not to create the domainstore?
	then 
		#actions
		DomainStore ds = (DomainStore) handler.createElement( a, ModelPackage.eINSTANCE.getDomainStore(), ModelPackage.eINSTANCE.getInternetApplication_DomainStores() );
		ds.setName("test domain store");
		ds.setIsGenerated(true);
		ds.setGeneratedBy(a);
		insert(ds); // possibly infer new knowledge (this is probably necessary)
		
end

rule "Create sync wire components: run instance wire from source.edit to target.update"
	when
		sw : SyncWire(overridden == false)
		source : InputTextField( ) from sw.from
		target : InputTextField( ) from sw.to
	
		event : EventTrigger( eContainer == source, name=="edit" )
		operation : Operation( eContainer == target, name=="update" )
	
		not (RunInstanceWire( eContainer == sw, from == event, to == operation, name == "run" ))
		
	then
		RunInstanceWire rw = (RunInstanceWire) handler.createRelationship(sw, WiresPackage.eINSTANCE.getRunInstanceWire(), event, operation, ModelPackage.eINSTANCE.getContainsWires_Wires(), ModelPackage.eINSTANCE.getWireEdge_From(), ModelPackage.eINSTANCE.getWireEdge_To());
		rw.setName("run");
		rw.setIsGenerated(true);
		rw.setGeneratedBy(sw);
		insert(rw);

end

rule "Create sync wire components: connect parameter wire to: run instance wire from source.edit to target.update"
	when
		sw : SyncWire(overridden == false)
		source : InputTextField( ) from sw.from
		target : InputTextField( ) from sw.to
	
		field : ApplicationElementProperty( eContainer == source, name=="fieldValue" ) 
		event : EventTrigger( eContainer == source, name=="edit" )
		operation : Operation( eContainer == target, name=="update" )
		
		wire : RunInstanceWire( from == event, to == operation, name == "run" ) from sw.wires
		
		not (ParameterWire( eContainer == sw, from == field, to == wire )) 
		
	then
		ParameterWire pw = (ParameterWire) handler.createRelationship(sw, WiresPackage.eINSTANCE.getParameterWire(), field, wire, ModelPackage.eINSTANCE.getContainsWires_Wires(), ModelPackage.eINSTANCE.getWireEdge_From(), ModelPackage.eINSTANCE.getWireEdge_To());
		pw.setIsGenerated(true);
		pw.setGeneratedBy(sw);
		insert(pw);

end

/*
rule "Create sync wire components"
	when
		ie : ICreateElements( )
		sw : SyncWire( overridden == false )
		source : InputTextField( ) from sw.from
		target : InputTextField( ) from sw.to
		
		// should probably break this rule up into multiple separate ones
		
		// fields
		sourceField : ApplicationElementProperty( name=="fieldValue" ) from source.properties 
		targetField : ApplicationElementProperty( name=="fieldValue" ) from target.properties
		
		// operations
		sourceUpdate : CompositeOperation( name=="update" ) from source.operations
		targetUpdate : CompositeOperation( name=="update" ) from target.operations
		sourceRefresh : CompositeOperation( name=="refresh" ) from source.operations
		targetRefresh : CompositeOperation( name=="refresh" ) from target.operations
		
		// events
		sourceEdit : EventTrigger( name=="edit" ) from source.eventTriggers
		targetEdit : EventTrigger( name=="edit" ) from target.eventTriggers
		sourceChange : EventTrigger( name=="change" ) from source.eventTriggers
		targetChange : EventTrigger( name=="change" ) from target.eventTriggers
		
		not (RunInstanceWire( from == sourceEdit, to == targetUpdate, name == "run" ) from sw.wires)
		
	then

		RunInstanceWire rw = (RunInstanceWire) ie.createRelationship(sw, WiresPackage.eINSTANCE.getRunInstanceWire(), sourceEdit, targetUpdate, ModelPackage.eINSTANCE.getContainsWires_Wires(), ModelPackage.eINSTANCE.getWireEdge_From(), ModelPackage.eINSTANCE.getWireEdge_To());
		rw.setName("run");
		rw.setIsGenerated(true);
		rw.setGeneratedBy(sw);
		insert(rw);
		 
	
		// connect all of these fields up
		/*
		connectEventToOperationWithParameter(ie, sw, sourceEdit, targetUpdate, sourceField);
		connectEventToOperationWithParameter(ie, sw, targetChange, sourceRefresh, sourceField);
		connectEventToOperationWithParameter(ie, sw, sourceChange, targetRefresh, targetField);
		connectEventToOperationWithParameter(ie, sw, targetEdit, sourceUpdate, targetField);
		/
		
end
*/

rule "Create field value for input text field"
	when
		f : InputTextField( overridden == false )
		not (ApplicationElementProperty( eContainer == f, name=="fieldValue" ))
			
	then
		ApplicationElementProperty fieldValue = handler.generatedApplicationElementProperty(f, f);
		fieldValue.setName("fieldValue");
		insert(fieldValue);
		
end

rule "Create 'edit' event trigger for input text field"
	when
		f : InputTextField( overridden == false )
		not (EventTrigger( eContainer == f, name=="edit" ))
			
	then
		// debug: System.out.println(drools.getRule().getName() + ": " + f); 

		EventTrigger event = handler.generatedEventTrigger(f, f);
		event.setName("edit");
		insert(event);
		
end

rule "Create 'change' event trigger for input text field"
	when
		f : InputTextField( overridden == false )
		not (EventTrigger( eContainer == f, name=="change" ))
			
	then
		EventTrigger event = handler.generatedEventTrigger(f, f);
		event.setName("change");
		insert(event);
		
end

rule "Create 'update' operation for input text field"
	when
		f : InputTextField( overridden == false )
		not (Operation( eContainer == f, name=="update" ))
			
	then
		CompositeOperation operation = handler.generatedCompositeOperation(f, f);
		operation.setName("update");
		insert(operation);
		
end

rule "Create 'refresh' operation for input text field"
	when
		f : InputTextField( overridden == false )
		not (Operation( eContainer == f, name=="refresh" ))
			
	then
		CompositeOperation operation = handler.generatedCompositeOperation(f, f);
		operation.setName("refresh");
		insert(operation);
		
end

rule "Create components of 'update' operation"
	when
		o : CompositeOperation(overridden == false, name == "update")
		field : ApplicationElementProperty( eContainer == o.eContainer, name == "fieldValue" )

	then
		Parameter parameter = handler.generatedParameter(o, o);
		parameter.setName("setValueTo");
		insert(parameter);
		
		ChainedOperation op = handler.generatedChainedOperation(o, o);
		op.setName("setPropertyToValue");
		insert(op);
		
		StartNode start = handler.generatedStartNode(o, o);
		insert(start);
		
		StopNode stop = handler.generatedStopNode(o, o);
		insert(stop);
		
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		data1.setFrom(parameter);
		data1.setTo(op);
		insert(data1);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		data2.setFrom(op);
		data2.setTo(field);
		insert(data2);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		edge1.setFrom(start);
		edge1.setTo(op);
		insert(edge1);

		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		edge2.setFrom(op);
		edge2.setTo(stop);
		insert(edge2);

end
