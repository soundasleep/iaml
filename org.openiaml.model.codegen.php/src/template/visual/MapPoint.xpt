«IMPORT iaml»

/**
 * Visually rendering a map point, usually within a map.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * @implementation MapPoint
 *		If a {@model MapPoint} is not contained within a {@model Map}, then
 *		a single temporary Map implementation will still be generated to contain
 *		the map point.
 */
«DEFINE renderMapPoint(model::visual::Frame currentFrame) FOR model::visual::MapPoint-»
	«IF eContainer == null || !model::visual::Map.isInstance(eContainer)»
		«REM»since this MapPoint isn't contained within a Map, we output
		a single map to wrap around it«ENDREM»
		«EXPAND Map::renderMapSolo(currentFrame)»
	«ELSE»
		«EXPAND continueMapPointRender(currentFrame)»
	«ENDIF»
«ENDDEFINE»

«DEFINE continueMapPointRender(model::visual::Frame currentFrame) FOR model::visual::MapPoint-»
	«REM»print out any required scripting for the point«ENDREM»
	<?php
		$id = "«safeNameString(id)-»";
		$parent_id = «IF getParentMap() == null»
			"point_«safeNameString(id)-»"
		«ELSE»
			"«safeNameString(getParentMap().id)-»"
		«ENDIF»
		;
	
		switch (MAP_HANDLER) {
			case "googlemaps":
				echo_google_map_point_script($id, $parent_id);
				break;
			
			case "mock":
				echo_mock_map_point_script($id, $parent_id);
				break;
			
			default:
				throw new IamlRuntimeException("Map handler '" + MAP_HANDLER + "' unexpected");
		}
		?>

	«REM»output name«ENDREM»
	<label
		id="«safeNameString(id)-»_label" 
		for="«safeNameString(id)-»">«escapeHtmlString(name)»</label>

	<div
		id="«safeNameString(id)-»" 
		style="display: none;"
		«EXPAND EventHandlers::getInlineClickJavascript(currentFrame)»	
		> 
		
		<?php
		
		switch (MAP_HANDLER) {
			case "googlemaps":
				echo_google_map_point($id, $parent_id);
				break;
			
			case "mock":
				echo_mock_map_point($id, $parent_id);
				break;
			
			default:
				throw new IamlRuntimeException("Map handler '" + MAP_HANDLER + "' unexpected");
		}
		?>
		
		<?php 
		
		$point_visible = false;
		$point_address = null; 
	
		// cycle over fieldValue properties		
		«FOREACH properties.select(e|e.name == "fieldValue") AS fieldValue»
		if (!$point_visible) {
			«EXPAND staticInitialMapPointValue(currentFrame) FOR fieldValue»
		}
		«ENDFOREACH» 

		«IF fieldValue != null && fieldValue.length > 0»
			// default fieldValue
			if (!$point_visible) {
				$point_address = "«escapePhpString(fieldValue)»";
				$point_visible = true; 
			} 
		«ENDIF»

		?>

		«REM»
			show/hide the map point at runtime (client-side)
		«ENDREM»
		<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			addOnloadFunction( function() {
				<?php if ($point_visible) { ?>
					show_map_point_«safeNameString(id)-»();
					set_map_point_«safeNameString(id)-»("<?php echo htmlspecialchars($point_address); ?>");
				<?php } else { ?>
					hide_map_point_«safeNameString(id)-»();
				<?php } ?>
			} );
		/* ]]> */
		</script> 
		
		«REM»expand all children«ENDREM»
		«EXPAND Render::renderVisual(currentFrame) FOREACH children-»
	</div>
	
	«EXPAND EventHandlers::getScriptClickDefinition(currentFrame)»
	
	<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			«REM»any on-access events?«ENDREM»
			addOnloadFunction( function() {
			«IF onAccess != null»
				// expand all onAccess
				«EXPAND template::events::EventCall::callEvent(false) FOR onAccess-»
			«ENDIF»
			} );
		/* ]]> */
	</script> 
«ENDDEFINE»

/* we have a property to provide [in PHP] */
«DEFINE staticInitialMapPointValue(model::visual::Frame currentFrame) FOR model::Property»
	«IF containingSession(this) == null»
		«REM»contained in a Frame or InternetApplication: a static value«ENDREM»
		if (get_application_value("«safeNameString(id)»", null) !== null) {
			$value = get_application_value("«safeNameString(id)»", "«escapeString(defaultValue)»");
			$point_address = $value;
			$point_visible = true;
		}		
	«ELSE»
		«REM»contained in a Session: a session value«ENDREM»
		if (has_session("«safeName(containingSession(this))»_«safeNameString(id)»")) {
			$value = require_session("«safeName(containingSession(this))»_«safeNameString(id)»", "«escapeString(defaultValue)»");
			$point_address = $value;
			$point_visible = true;
		}		
	«ENDIF»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
