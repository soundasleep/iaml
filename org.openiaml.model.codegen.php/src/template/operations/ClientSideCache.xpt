«IMPORT iaml»

/**
 * If we are in Javascript and we are trying to get an operation on a DomainObjectInstance (usually 'empty') 
 * and we are in a condition, we can't wait for an async result. In this case, we use
 * cached operation results (stored in Javascript) which can be updated through
 * callbacks, etc.
 *
 * All of this file is assumed to be in Javascript mode.
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE cachedPrimitiveConditions FOR model::InternetApplication»
	«EXPAND cachedPrimitiveConditions FOREACH getClientSideCacheConditions()»
«ENDDEFINE»

«DEFINE cachedPrimitiveConditions FOR model::Function»
	«throwException("Cannot expand client-side cached condition '" + this + "'")»
«ENDDEFINE»

«DEFINE cachedPrimitiveConditions FOR model::PrimitiveCondition»
	«LET ((model::domain::DomainIterator) eContainer) AS object»
		// primitive condition '«name»'
		
		// initial value (i.e. at execution time)
		var cached_result_«safeName()»_value = 
		<?php
		/* save the current cached result, so we know when to update it on the client */
		$_SESSION["cached_result_«safeName()»_value"] = «EXPAND template::domain::DomainInstance::domainInstanceCondition(true, object) FOR this»;
		echo $_SESSION["cached_result_«safeName()»_value"] ? "true" : "false";
		?>;

		function cached_result_«safeName()»() {
			return cached_result_«safeName()»_value;
		}
		
		function update_cached_result_«safeName()»(result) {
			if (result === "true")
				result = true;
			if (result === "false")
				result = false;
			cached_result_«safeName()»_value = result;
		}
	«ENDLET»
«ENDDEFINE»

«DEFINE cachedProperties FOR model::InternetApplication»
	«EXPAND cachedProperties FOREACH getClientSideCacheProperties()»
«ENDDEFINE»

/**
 * Cached properties can be stored anywhere.
 */
«DEFINE cachedProperties FOR model::Value»
	// property '«name»'
	
	// initial value (i.e. at execution time)
	var cached_instance_property_«safeName()»_value = 
	<?php
		/* save the current cached result, so we know when to update it on the client */
		$_SESSION["cached_property_«safeName()»_value"] = «EXPAND template::operations::Parameters::callParameterValue(true, false) FOR this»;
		«IF isNumeric(type)»
			// numeric type
			if ($_SESSION["cached_property_«safeName()»_value"] == 0) {
				echo "0";
			} else {
				echo $_SESSION["cached_property_«safeName()»_value"];
			}
		«ELSE»
			// string type
			echo '"' . $_SESSION["cached_property_«safeName()»_value"] . '"';
		«ENDIF»
		?>;

		function get_instance_property_«safeName()»() {
		return cached_instance_property_«safeName()»_value;
	}
	
	function update_instance_property_«safeName()»(result) {
		cached_instance_property_«safeName()»_value = result;
	}
«ENDDEFINE»
