/**
 * Create the default {@model Event}s for {@model Accessible} and {@model Changeable} elements.
 */
#created on: 4/11/2008
package org.openiaml.model.drools.rules.events

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.domain.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

/**
 * @inference Changeable,DomainAttribute 
 *		A {@model Changeable} thing contains an {@model Event} named 'onChange'. 
 */
rule "Create 'onChange' event trigger for Changeable things"
	when
		f : Changeable( )
		g : GeneratesElements ( this == f )
		not (event : Event( f.onChange == event ))
				
		eval ( handler.veto( g ))
			
	then
		Event event = handler.generatedEventOnChange(g, f);
		queue.add(event, drools);
		
end

/**
 * @inference Accessible
 *		An {@model Accessible} thing contains an {@model Event} named 'onAccess'.
 */
rule "Create 'onAccess' event trigger for Accessible things"
	when
		f : Accessible( )
		g : GeneratesElements ( this == f )
		not (event : Event( f.onAccess == event ))
				
		eval ( handler.veto( g ))
			
	then
		handler.veto(g);
		Event event = handler.generatedEventOnAccess(g, f);
		queue.add(event, drools);
		
end
