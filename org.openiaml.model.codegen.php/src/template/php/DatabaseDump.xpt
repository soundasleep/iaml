«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/**
 * A script to dump out the current database structure
 * (debug-only).
 */
«DEFINE databaseDump FOR model::InternetApplication»
<?php

«EXPAND template::Template::setPath("")»
require("config.php"); // runtime library configuration
require(IAML_RUNTIME_ROOT . "global.php"); // runtime library import

?>
<?php
$body_id = "database_dump";
$body_name = "database_dump";
$body_title = "Database dump";
if (file_exists(CUSTOM_PATH . "templates/meta/" . $body_id . ".php")) {
	require(CUSTOM_PATH . "templates/meta/" . $body_id . ".php");
} elseif (file_exists(CUSTOM_PATH . "templates/meta/default.php")) {
	require(CUSTOM_PATH . "templates/meta/default.php");
} else {
	require("meta_default.php");
}
?>
</head>
		
<body id="database_dump">
	<div style="font-size:small; text-align: right;">
		<a href="clear_session.php">clear session</a> - 
		<a href="view_log.php">view log</a> - 
		<a href="sitemap.html">sitemap</a>
	</div>

<?php
$databases = array(
	"sqlite:stored_events.db",
	«EXPAND getDomainStores FOREACH sources SEPARATOR ", "»
);

// remove duplicate sources
$databases = array_unique($databases);

foreach ($databases as $db_name) {
	echo "<h1>$db_name</h1>\n";
	
	$query = "select * from sqlite_master;";
	$dq = new DatabaseQuery($db_name);
	
	$results = $dq->fetch($query, array());
	
    foreach ($results as $table) {
		if ($table["type"] == "table") {
			echo "<h2>" . $table["name"] . "</h2>\n\n";
	
			$q2 = new DatabaseQuery($db_name);
			$r2 = $q2->fetch("SELECT * FROM " . $table["name"], array());
	
			echo "<table>";
			$done = false;
			foreach ($r2 as $row) {
				echo "<tr>";
				if (!$done) {
					foreach ($row as $key => $value) {
						if ($key === null) $key = "<i>NULL</i>";
						echo "<th>$key</th>";
					}
					echo "</tr><tr>";
					$done = true;
				}
				foreach ($row as $key => $value) {
					if ($value === null) $value = "<i>NULL</i>";
					echo "<td>$value</td>";
				}
				echo "</tr>";
			}
			echo "</table>";
		}
	}

}
?>

</body>
</html>
«ENDDEFINE»

«DEFINE getDomainStores FOR model::domain::DomainSource»
	«EXPAND template::domain::Select::getDatabaseStoreString»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»