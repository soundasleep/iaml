/**
 * [issue 47]
 * Add convenience methods to XXXDiagramUpdater, to allow us to
 * easily identify which elements need to be rendered on a
 * given diagram.
 *
 * Most of this dynamic template is model-specific.
 *
 * [issue 57]
 * Phantom nodes should not render _all_ nodes from the entire
 * model when called from getSemanticChildren().
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION gmf::GenModelUtils»

«AROUND additions FOR gmfgen::GenDiagramUpdater-»
	«targetDef.proceed()»

	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get all the shortcut elements that need to be rendered for a particular view.")»
	public static java.util.List getAllShortcutElements(org.eclipse.gmf.runtime.notation.View view) {
		java.util.List elements = new java.util.ArrayList();
		java.util.List edges = new java.util.ArrayList();
		getBothShortcutElementsAndEdges(view, elements, edges);
		return elements;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get all the edges that need to be rendered for a particular view.")»
	public static java.util.List getAllChildrenEdges(org.eclipse.gmf.runtime.notation.View view) {
		java.util.List elements = new java.util.ArrayList();
		java.util.List edges = new java.util.ArrayList();
		getBothShortcutElementsAndEdges(view, elements, edges);
		return edges;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get both the shortcut elements and the edges that are required for a particular view.")»
	public static void getBothShortcutElementsAndEdges(org.eclipse.gmf.runtime.notation.View view, 
			java.util.List targetElements, java.util.List targetEdges) {
		if (!view.isSetElement()) {
			return;
		}
		org.eclipse.emf.ecore.EObject modelElement = (org.eclipse.emf.ecore.EObject) view.getElement();
		java.util.List contents = modelElement.eContents();

		java.util.List<org.eclipse.emf.ecore.EObject> doneAlready = new java.util.ArrayList<org.eclipse.emf.ecore.EObject>();
		
		// EObject.eContents() will get all elements contained directly within the EObject,
		// i.e. we don't need to cast to any model-specific types anymore
		getAllImportantRelationships(doneAlready, targetElements, targetEdges, view, modelElement
				.eContents());
	}

	«REM»
		TODO There is a lot of copy and paste code in this dynamic template. This should be refactored somehow.
	«ENDREM»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] For a given list of EObjects in the model, what edges should be displayed?")»
	private static void getAllImportantRelationships(java.util.List<org.eclipse.emf.ecore.EObject> doneAlready, 
			java.util.List<org.eclipse.emf.ecore.EObject> elements, 
			java.util.List<org.eclipse.emf.ecore.EObject> edges, 
			org.eclipse.gmf.runtime.notation.View view,
			org.eclipse.emf.common.util.EList<? extends org.eclipse.emf.ecore.EObject> list) {
			
		// we now pass this to a helper class (issue 151)
		org.openiaml.model.diagram.helpers.GetShortcuts.getAllImportantRelationships(doneAlready,
			elements, edges, view, list, «editorGen.diagram.visualIDRegistryClassName».getInstance(), getDiagramUpdaterInstance());
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 151]")»
	private static org.openiaml.model.diagram.helpers.IDiagramUpdater diagramUpdater = null;
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 151]")»
	private static org.openiaml.model.diagram.helpers.IDiagramUpdater getDiagramUpdaterInstance() {
		if (diagramUpdater == null) {
			diagramUpdater = new org.openiaml.model.diagram.helpers.IDiagramUpdater() {
				«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Add descriptors for elements that exist in the current diagram editor registry.")»
				public boolean considerElementForShortcut(org.eclipse.emf.ecore.EObject childElement, 
						org.eclipse.emf.ecore.EObject wire,
						org.eclipse.gmf.runtime.notation.View view, 
						org.eclipse.emf.ecore.EObject source,
						java.util.List doneAlready,
						java.util.List result, 
						java.util.List edges) {
			
					if (childElement != null && !childElement.equals(source)) {
						if (doneAlready.contains(childElement))
							return true;
						int visualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR editorGen.diagram»(view,
								childElement);
						if (visualID != -1) {
							result.add(new «getNodeDescriptorQualifiedClassName()»(childElement,
									visualID));
							doneAlready.add(childElement);
							if (!edges.contains(wire))
								edges.add(wire);
							return true;
						}
					}
					
					return false;
				}
			};
		}
		return diagramUpdater;
	}
	
«ENDAROUND»
/**
 * Issue 57: In order to allow creation of shortcut elements that are not
 * directly contained, we make the .gmfmap element a phantom node by setting
 * its containment element to null. However, the default implementation of
 * getSemanticChildren() calls getPhantomNodesIterator() for each phantom node,
 * which by default returns _all_ elements in the current document.
 *
 * We change this behaviour to return an empty iterator instead, restoring
 * its old functionality.
 */
«AROUND getPhantomNodesIterator FOR gmfgen::GenDiagramUpdater-»
	«IF not editorGen.diagram.getPhantomNodes()->isEmpty()-»
	
	«EXPAND xpt::Common::generatedMemberComment("[jevon] Issue 57: Phantom nodes should <b>not</b> automatically return <i>all</i> matching elements in the model.")»
	private static java.util.Iterator getPhantomNodesIterator(org.eclipse.emf.ecore.resource.Resource resource) {
		return java.util.Collections.EMPTY_LIST.iterator();
	}
	«ENDIF-»
«ENDAROUND»
