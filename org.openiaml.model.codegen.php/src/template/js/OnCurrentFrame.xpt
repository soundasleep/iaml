«IMPORT iaml»

/**
 * Allows the runtime to know when we can get data from the current frame.
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE onCurrentFrame FOR model::InternetApplication»
	«FILE "output/onCurrentFrame.js"-»
function containing_frame(element_id) {
	switch (element_id) {
	
	«REM»
		to reduce the size of the generated file, we are only interested
		in particular destinations:
		
		1. scopes
		2. visible things
		3. things that can contain operations
		4. data flow destinations that are contained by
		   things that canBeSet()
		
		everything else can return null.
	«ENDREM»
	«LET
		eAllContents.select( e | model::Scope.isInstance(e) )
			.union( eAllContents.typeSelect(model::VisibleThing) )
			.union( eAllContents.typeSelect(model::ContainsOperations ))
			.union( eAllContents.select( e | e.eContainer != null && canBeSet(e.eContainer) ))
			.sortBy( e | safeName(e) )
				AS targets»
	«FOREACH targets AS e»
		case "«safeName(e)»":
			«IF containingFrame(e) == null»
			return null;
			«ELSE»
			return "«safeName(containingFrame(e))»";
			«ENDIF»
	«ENDFOREACH»
	«ENDLET»
	
		default:
			return null;
	}
}

function containing_email(element_id) {
	switch (element_id) {
	
	«REM»
		to reduce the size of the generated file, we are only interested
		in particular destinations:
		
		(1. scopes
		2. visible things
		3. things that can contain operations
		4. data flow destinations that are contained by
		   things that canBeSet())
		   
		that are actually contained by emails.
		   
		everything else can return null.
	«ENDREM»
	«LET
		eAllContents.select( e | model::Scope.isInstance(e) )
			.union( eAllContents.select( e | model::VisibleThing.isInstance(e) ))
			.union( eAllContents.select( e | model::ContainsOperations.isInstance(e) ))
			.union( eAllContents.select( e | e.eContainer != null && canBeSet(e.eContainer) ))
			.select( t | containingEmail(t) != null )
			.sortBy( e | safeName(e) )
				AS targets»
	«FOREACH targets AS e»
		case "«safeName(e)»":
			«IF containingEmail(e) == null»
			return null;
			«ELSE»
			return "«safeName(containingEmail(e))»";
			«ENDIF»
	«ENDFOREACH»
	«ENDLET»
	
		default:
			return null;
	}
}

/** 
 * Copied from GeneratorExtensions.ext
 */
function on_current_frame(source, target) {
	return containing_frame(source) != null &&
		containing_frame(source) == containing_frame(target);
}

	«ENDFILE»
«ENDDEFINE»
