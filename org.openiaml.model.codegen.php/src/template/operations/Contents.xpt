«IMPORT iaml»

/**
 * The contents of primitive operation types.
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE operationContents(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::Operation-»
	«throwException("Unknown primitive operation to expand: " + this)»
«ENDDEFINE»

/**
 * Expand the definition of an operation, assumed to be called 
 * as part of an existing function call.
 */
«DEFINE operationContents(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::PrimitiveOperation-»
	«REM»special primitive operation names«ENDREM»
	«IF name == "setPropertyToValue"-»
		«EXPAND setPropertyToValueOperation(start, container, php) FOR this»
	«ELSEIF name == "set"»
		«EXPAND setOperation(start, container, php) FOR this»
	«ELSEIF name == "javascriptAlert"»
		«EXPAND javascriptAlert(start, container, php) FOR this»
	«ELSEIF name == "hide"»
		«EXPAND hideOperation(start, container, php) FOR this»
	«ELSEIF name == "show"»
		«EXPAND showOperation(start, container, php) FOR this»
	«ELSE»
		«throwException("Unknown function to expand '" + name + "': " + this)»
	«ENDIF»
«ENDDEFINE»

/* expand the definition of an operation, assumed to be called as part of an existing function call */
«DEFINE operationContents(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::operations::DecisionOperation-»
	«REM»compare operations«ENDREM»
	if (
	«IF name == "equal?"-»
		«REM»check all inflow targets are identical«ENDREM»
		«IF php»
			«EXPAND getDataValue(php, container) FOREACH inFlows SEPARATOR " == "»
		«ELSE»
			is_array_equal(new Array(«EXPAND getDataValue(php, container) FOREACH inFlows SEPARATOR ", "»))
		«ENDIF»
	«ELSEIF name == "true?"-»
		«REM»check all inflow targets are identical«ENDREM»
		«IF php»
			«EXPAND trueDecisionOperationSource(php, container) FOREACH inFlows SEPARATOR " == "»
		«ELSE»
			is_array_true(new Array(«EXPAND trueDecisionOperationSource(php, container) FOREACH inFlows SEPARATOR ", "»))
		«ENDIF»
	«ELSEIF name == "can cast?"-»
		«REM»inflow should be a CastNode; ask the CastNode about the success of the cast.«ENDREM»
		«IF inFlows.from.typeSelect(model::operations::CastNode).isEmpty»
			«throwException("'can cast?' check needs to have at least one incoming CastNode")»
		«ENDIF»
		«EXPAND getCastCanCast(php, container) FOREACH inFlows.from.typeSelect(model::operations::CastNode) SEPARATOR " && "»
	«ELSE»
		«REM»??? who knows«ENDREM»
		«throwException("Unknown decision operation to expand '" + name + ": " + this)»
	«ENDIF»
	) {
		// passes
		«IF hasPassFlow(this)»
			«FOREACH getPassFlows() AS e-»
				«EXPAND ExecutionFlow::addStack(start, php) FOR e»
			«ENDFOREACH»
		«ELSE»
			// no pass flow
		«ENDIF»
	} else {
		// fails
		«IF hasFailFlow(this)»
			«FOREACH getFailFlows() AS e-»
				«EXPAND ExecutionFlow::addStack(start, php) FOR e»
			«ENDFOREACH»
		«ELSE»
			// no fail flow
		«ENDIF»
	}
«ENDDEFINE»

/* primitive DecisionConditions */
«DEFINE operationContents(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::operations::DecisionCondition-»
	«REM»compare operations«ENDREM»
	if (
		«IF name=="xpathMatch"»
			xpathMatch(«EXPAND getDataValue(php, container) FOREACH inFlows SEPARATOR ","»)
		«ELSEIF name=="emailAddress"»
			emailAddressMatch(«EXPAND getDataValue(php, container) FOREACH inFlows SEPARATOR ","»)
		«ELSEIF name=="is set?"»
			«EXPAND DataFlow::isSet(php, container) FOREACH inFlows.from SEPARATOR " && "»
		«ELSEIF name == "equal?"-»
			«REM»check all inflow targets are identical«ENDREM»
			«IF php»
				«EXPAND getDataValue(php, container) FOREACH inFlows SEPARATOR " == "»
			«ELSE»
				is_array_equal(new Array(«EXPAND getDataValue(php, container) FOREACH inFlows SEPARATOR ", "»))
			«ENDIF»
		«ELSEIF name == "true?"-»
			«REM»check all inflow targets are identical«ENDREM»
			«IF php»
				«EXPAND trueDecisionOperationSource(php, container) FOREACH inFlows SEPARATOR " == "»
			«ELSE»
				is_array_true(new Array(«EXPAND trueDecisionOperationSource(php, container) FOREACH inFlows SEPARATOR ", "»))
			«ENDIF»
		«ELSEIF name == "can cast?"-»
			«REM»inflow should be a CastNode; ask the CastNode about the success of the cast.«ENDREM»
			«IF inFlows.from.typeSelect(model::operations::CastNode).isEmpty»
				«throwException("'can cast?' check needs to have at least one incoming CastNode")»
			«ENDIF»
			«EXPAND getCastCanCast(php, container) FOREACH inFlows.from.typeSelect(model::operations::CastNode) SEPARATOR " && "»
		«ELSE»
			«REM»unknown condition«ENDREM»
			«throwException("Unknown DecisionCondition '" + name + "': " + this)»
		«ENDIF»
	) {
		// passes
		«IF hasPassFlow(this)»
			«FOREACH getPassFlows() AS e-»
				«EXPAND ExecutionFlow::addStack(start, php) FOR e»
			«ENDFOREACH»
		«ELSE»
			// no pass flow
		«ENDIF»
	} else {
		// fails
		«IF hasFailFlow(this)»
			«FOREACH getFailFlows() AS e-»
				«EXPAND ExecutionFlow::addStack(start, php) FOR e»
			«ENDFOREACH»
		«ELSE»
			// no fail flow
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE chainedEventFlow(Boolean php, model::visual::Frame currentFrame) FOR model::DataFlowEdgeDestination»
	/**
	 * Unexpected data flow edge destination: «this».
	 * Will not continue chained event trigger expansion. 
	 */
«ENDDEFINE»

«DEFINE chainedEventFlow(Boolean php, model::visual::Frame currentFrame) FOR model::Property»
	/* Chained event property: «this» */
	«IF model::VisibleThing.isInstance(eContainer)»
		«LET ((model::VisibleThing) eContainer) AS vt»
		«IF vt.onEdit != null»
			/* A property has changed - call any event triggers in its parent called "edit" */
			/* We assume the value to pass is stored in 'value' */
			«EXPAND chainedEvent(php, true, currentFrame, "edit") FOR vt.onEdit»
		«ENDIF»
		«ENDLET»
	«ELSE»
		/* A property has changed, but is not contained within something with Event Triggers */
	«ENDIF»
«ENDDEFINE»

/**
 * Chained events?
 * @param type the type of event, i.e. "edit", "access"
 */
«DEFINE chainedEvent(Boolean php, Boolean inStoreDb, model::visual::Frame currentFrame, String type) FOR model::EventTrigger»
	// expanding chained event trigger «name»
	«IF type=="edit"»
		«EXPAND OperationCall::callOperation(php, inStoreDb, currentFrame) FOREACH outWires»
		«EXPAND OperationCall::callOperation(php, inStoreDb, currentFrame) FOREACH outActions»
	«ELSEIF type=="access"»
		// we don't expand 'access' events as part of a chain
	«ELSE»
		«throwException("Unknown event trigger: " + type + " (" + this + ")")»
	«ENDIF»
«ENDDEFINE»

/**
 * Specific operation templates.
 */
«DEFINE getDataValue(Boolean php, model::visual::Frame container) FOR model::DataFlowEdge-»
	«EXPAND DataFlow::dataSource(php, container) FOR from-»
«ENDDEFINE»


/**
 * Get all the inflows for a DecisionOperation[equal], which are
 * then compared for equality.
 */
«DEFINE trueDecisionOperationSource(Boolean php, model::visual::Frame container) FOR model::DataFlowEdge-»
	make_into_boolean(«EXPAND DataFlow::dataSource(php, container) FOR from-»)
«ENDDEFINE»

/**
 * Can the given cast node cast successfully? 
 */
«DEFINE getCastCanCast(Boolean php, model::visual::Frame container) FOR model::operations::CastNode-»
	can_cast(
		«IF inFlows.size != 1»
			«throwException("Incorrect number of arguments for cast source:" + inFlows.size)»
		«ENDIF»
		«EXPAND DataFlow::dataSource(php, container) FOREACH inFlows.from-»,

		«LET outFlows.select(o | isCastDestination(o.to)) AS targets»
			«IF targets.size != 1»
				«throwException("Too many cast targets for castNode " + this + ": " + targets.size)»
			«ENDIF»
			«EXPAND DataTypes::getDataType(php, container) FOREACH targets.to-»
		«ENDLET»
	)
«ENDDEFINE»

/**
 * outflowTarget <-- inflowTarget
 */
«DEFINE setPropertyToValueOperation(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::PrimitiveOperation-»
	// outFlows first to = «outFlows.first().to»
	«IF php»
		$arg0 = «EXPAND DataFlow::dataSource(php, container) FOR inFlows.first().from-»; 
		«IF containingSession(outFlows.first().to) != null»
			$_SESSION["«safeName(containingSession(outFlows.first().to))»_«safeName(outFlows.first().to)-»"] = $arg0;
		«ELSE»
			set_application_value("«outFlows.first().to.safeName()»", $arg0);
		«ENDIF»
		if (true) {
	«ELSE»
		var value = «EXPAND DataFlow::dataSource(php, container) FOR inFlows.first().from-»;
		if (value !== null) {
			// ignore null parameters
			// a null parameter may occur if the remote parameter source is unavailable, or we will have a stored_event that
			// will populate this field
			«IF canBeSet(outFlows.first().to.eContainer)»
				// inflow container = «containingFrame(inFlows.first().from)»
				// outflow container = «containingFrame(outFlows.first().to)»
				«IF container == containingFrame(outFlows.first().to)»
					// set a variable in the current frame
					«EXPAND DataFlow::dataTarget(php) FOR outFlows.first().to» = value;
					
					// set server/session variables too
					«EXPAND OutgoingValues::outgoingValue((model::visual::InputTextField) outFlows.first().to.eContainer) FOR outFlows.first().to»
				«ELSEIF containingSession(outFlows.first().to) != null»
					// the target is a session variable
					set_session("«safeName(containingSession(outFlows.first().to))»_«safeName(outFlows.first().to)»", 
						value, 
						function_queue);
					function_queue_queued = true;		// we are waiting for it to return to execute the function queue
					
				«ELSE»
					// the target is a remote variable

					set_application_value("«outFlows.first().to.safeName()»", 
						value, 
						function_queue);
					function_queue_queued = true;		// we are waiting for it to return to execute the function queue
				«ENDIF»
			«ELSEIF isDomainAttribute(outFlows.first().to.eContainer)-»
				«REM»direct field --> domain attribute«ENDREM»
				store_db('«safeNameString(((model::DomainAttribute) outFlows.first().to.eContainer).id)»',
					value);

				// set server/session variables too
				«EXPAND OutgoingValues::outgoingValue((model::DomainAttribute) outFlows.first().to.eContainer) FOR outFlows.first().to»
			«ELSEIF containingSession(outFlows.first().to) == null»
				«REM»contained in a Frame or InternetApplication: a static value«ENDREM»
				set_application_value("«safeName(outFlows.first().to)»", 
					value, 
					function_queue);
				function_queue_queued = true;		// we are waiting for it to return to execute the function queue
			«ELSE»
				«REM»contained in a Session: a session value«ENDREM»
				set_session("«safeName(containingSession(outFlows.first().to))»_«safeName(outFlows.first().to)»", 
					value, 
					function_queue);
				function_queue_queued = true;		// we are waiting for it to return to execute the function queue
			«ENDIF»
	«ENDIF»

	«REM»
		in the future, we might want to make this into a function that is passed
		to ajax calls and executed once the call is successful.
	«ENDREM»
	«FOREACH outExecutions AS e-»
		«EXPAND ExecutionFlow::addStack(start, php) FOR e»
	«ENDFOREACH»
	
	«REM»
		here may be a good place to connect any chained EventTriggers
	«ENDREM»
	«IF shouldExpandEventTriggers(this)»
		// call outgoing event triggers (if any) 
		«EXPAND chainedEventFlow(php, container) FOREACH outFlows.to-»
	«ELSE»
		// we don't call additional events for «eContainer» 
	«ENDIF»
	}
	«IF !php» else {
		// we ignored a null parameter: set the operation as completed
		// (so we don't fall off the stack)
		completed = true;
	}«ENDIF»
«ENDDEFINE»

/**
 * Set temporary variable <-- inFlow
 */
«DEFINE setOperation(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::PrimitiveOperation-»
	«REM»set a temporary variable«ENDREM»
	«IF php»
		$temp_«safeName(outFlows.first().to)» = «EXPAND DataFlow::dataSource(php, container) FOR inFlows.first().from-»;
	«ELSE»
		temp_«safeName(outFlows.first().to)» = «EXPAND DataFlow::dataSource(php, container) FOR inFlows.first().from-»;
	«ENDIF»

	«REM»continue«ENDREM»
	«FOREACH outExecutions AS e-»
		«EXPAND ExecutionFlow::addStack(start, php) FOR e»
	«ENDFOREACH»
«ENDDEFINE»

/**
 * Hide a visible thing.
 */
«DEFINE hideOperation(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::PrimitiveOperation-»
	/* hide a visible thing: «this» */
	«IF php»
		// server-side: set property for later
		«IF containingSession(eContainer) != null»
			$_SESSION["«safeName(containingSession(eContainer))»_«safeName(eContainer)»_hidden"] = true;
		«ELSE»
			set_application_value("«safeName(eContainer)»_hidden", true);
		«ENDIF»
	«ELSE»
		// client-side
		«IF containingFrame(eContainer) == container»
			// it exists on this page
			document.getElementById('«safeName(eContainer)»').style.display = "none";
		«ELSE»
			// it doesn't exist on this page
		«ENDIF»
		
		// persist properties
		«IF containingSession(eContainer) != null»
			set_session("«safeName(containingSession(eContainer))»_«safeName(eContainer)»_hidden", true);
		«ELSE»
			set_application_value("«safeName(eContainer)»_hidden", true);
		«ENDIF»
	«ENDIF»

	«REM»continue«ENDREM»
	«FOREACH outExecutions AS e-»
		«EXPAND ExecutionFlow::addStack(start, php) FOR e»
	«ENDFOREACH»
«ENDDEFINE»

/**
 * Show a visible thing.
 */
«DEFINE showOperation(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::PrimitiveOperation-»
	/* show a visible thing: «this» */
	«IF php»
		// server-side: set property for later
		«IF containingSession(eContainer) != null»
			$_SESSION["«safeName(containingSession(eContainer))»_«safeName(eContainer)»_hidden"] = false;
		«ELSE»
			set_application_value("«safeName(eContainer)»_hidden", false);
		«ENDIF»
	«ELSE»
		// client-side
		«IF containingFrame(eContainer) == container»
			// it exists on this page
			document.getElementById('«safeName(eContainer)»').style.display = "";
		«ELSE»
			// it doesn't exist on this page
		«ENDIF»
		
		// persist properties
		«IF containingSession(eContainer) != null»
			set_session("«safeName(containingSession(eContainer))»_«safeName(eContainer)»_hidden", false);
		«ELSE»
			set_application_value("«safeName(eContainer)»_hidden", false);
		«ENDIF»
	«ENDIF»

	«REM»continue«ENDREM»
	«FOREACH outExecutions AS e-»
		«EXPAND ExecutionFlow::addStack(start, php) FOR e»
	«ENDFOREACH»
«ENDDEFINE»

/**
 * Throw a Javascript alert box on the client-side.
 * Fails on the server-side.
 *
 * TODO remove this and replace with a generic 'alert()' method.
 */
«DEFINE javascriptAlert(model::ExecutionEdgesSource start, model::visual::Frame container, Boolean php) FOR model::PrimitiveOperation-»
	«IF php»
		«REM»how are we supposed to throw an alert on the client from the server?«ENDREM»
		throw new IamlRuntimeException("Cannot call a Javascript alert from server-side: " . «EXPAND DataFlow::dataSource(php, container) FOR inFlows.first().from-»);
	«ELSE»
		// throw an alert box
		// NOTE: alert boxes currently aren't owned by any element; they are a direct
		// hack to display something immediately. eventually, this should be replaced
		// with a generic alert(), that will render an alert box in the most appropriate
		// way for the alert container. 
		alert(«EXPAND DataFlow::dataSource(php, container) FOR inFlows.first().from-»);
	«ENDIF»

	«REM»continue«ENDREM»
	«FOREACH outExecutions AS e-»
		«EXPAND ExecutionFlow::addStack(start, php) FOR e»	
	«ENDFOREACH»
«ENDDEFINE»
