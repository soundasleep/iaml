<?xml version="1.0" encoding="ASCII"?>
<md:ModelDocumentation xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:md="http://openiaml.org/modeldoc/2009/09">
  <classes name="NamedElement" abstract="true" interface="true" supertypes="//@classes.32" subtypes="//@classes.4 //@classes.9 //@classes.10 //@classes.14 //@classes.16 //@classes.17 //@classes.19 //@classes.20 //@classes.24 //@classes.28 //@classes.39 //@classes.43 //@classes.50 //@classes.53 //@classes.73 //@classes.74 //@classes.80" runtimeClass="//@references.0" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//NamedElement"/>
    <extensions reference="//@references.83/@lines.4" name="containingPage" value="model::visual::Page containingPage(model::NamedElement element)"/>
    <extensions reference="//@references.84/@lines.13" name="containingPage" value="model::visual::Page containingPage(model::NamedElement element)"/>
    <extensions reference="//@references.84/@lines.33" name="containingSession" value="model::scopes::Session containingSession(model::NamedElement this)"/>
    <attributes name="name" type="EString"/>
  </classes>
  <classes name="WireEdge" supertypes="//@classes.32" subtypes="//@classes.49 //@classes.50" runtimeClass="//@references.1" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//WireEdge"/>
    <constraints reference="//@references.82/@lines.17" constraint="from.!=(null)" message="&quot;A WireEdge must have a 'from'&quot;"/>
    <constraints reference="//@references.82/@lines.18" constraint="to.!=(null)" message="&quot;A WireEdge must have a 'to'&quot;"/>
    <extensions reference="//@references.84/@lines.31" name="isFailEdge" value="isFailEdge(model::WireEdge this)"/>
    <graphicalRepresentations reference="//@references.331"/>
    <references name="from" lowerBound="1" type="//@classes.3"/>
    <references name="to" lowerBound="1" type="//@classes.2"/>
  </classes>
  <classes name="WireEdgeDestination" abstract="true" interface="true" subtypes="//@classes.9 //@classes.14 //@classes.16 //@classes.51 //@classes.52 //@classes.54 //@classes.58 //@classes.59 //@classes.62 //@classes.74 //@classes.80" runtimeClass="//@references.2" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//WireEdgeDestination"/>
    <extensions reference="//@references.84/@lines.6" name="operationName" value="operationName(model::WireEdgeDestination this)"/>
    <references name="inEdges" upperBound="-1" type="//@classes.1"/>
  </classes>
  <classes name="WireEdgesSource" abstract="true" interface="true" supertypes="//@classes.31" subtypes="//@classes.4 //@classes.11 //@classes.14 //@classes.16 //@classes.17 //@classes.39 //@classes.43 //@classes.62 //@classes.73 //@classes.74 //@classes.80" runtimeClass="//@references.3" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//WireEdgesSource"/>
    <extensions reference="//@references.84/@lines.15" name="onCurrentPage" value="onCurrentPage(model::WireEdgesSource source,model::WireEdgeDestination target)"/>
    <extensions reference="//@references.84/@lines.16" name="onCurrentSession" value="onCurrentSession(model::WireEdgesSource source,model::WireEdgeDestination target)"/>
    <extensions reference="//@references.84/@lines.17" name="availableInCurrentScript" value="availableInCurrentScript(model::WireEdgesSource source,model::WireEdgeDestination target)"/>
    <extensions reference="//@references.84/@lines.62" name="getFailHandler" value="getFailHandler(model::WireEdgesSource this)"/>
    <references name="outEdges" upperBound="-1" type="//@classes.1"/>
  </classes>
  <classes name="EventTrigger" supertypes="//@classes.0 //@classes.3" runtimeClass="//@references.4" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//EventTrigger"/>
    <operationalSemantics reference="//@references.111/@methods.0" description="//@references.111/@methods.0/@javadocs.1"/>
    <inferenceSemantics reference="//@references.258/@rules.0" description="//@references.258/@rules.0/@javadocs.0"/>
    <graphicalRepresentations reference="//@references.294"/>
  </classes>
  <classes name="ContainsEventTriggers" abstract="true" interface="true" subtypes="//@classes.14 //@classes.19 //@classes.20 //@classes.74" runtimeClass="//@references.5" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ContainsEventTriggers"/>
    <references name="eventTriggers" upperBound="-1" containment="true" type="//@classes.4"/>
  </classes>
  <classes name="DomainObject" supertypes="//@classes.14 //@classes.30" subtypes="//@classes.79" runtimeClass="//@references.6" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DomainObject"/>
    <constraints reference="//@references.82/@lines.13" constraint="name.!=(&quot;single_values&quot;)" message="&quot;You cannot have a DomainObject called single_values (reserved word)&quot;"/>
    <extensions reference="//@references.84/@lines.37" name="getDomainStore" value="model::DomainStore getDomainStore(model::DomainObject this)"/>
    <extensions reference="//@references.84/@lines.39" name="getDomainObject" value="model::DomainObject getDomainObject(model::DomainObject this)"/>
    <extensions reference="//@references.84/@lines.67" name="getPrimaryKey" value="model::DomainAttribute getPrimaryKey(model::DomainObject this)"/>
    <extensions reference="//@references.84/@lines.70" name="allSubtypes" value="List[model::DomainObject] allSubtypes(model::DomainObject this)"/>
    <graphicalRepresentations reference="//@references.289"/>
    <references name="attributes" upperBound="-1" containment="true" type="//@classes.7"/>
  </classes>
  <classes name="DomainAttribute" supertypes="//@classes.14 //@classes.30" runtimeClass="//@references.7" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DomainAttribute"/>
    <extensions reference="//@references.84/@lines.9" name="attributeName" value="attributeName(model::DomainAttribute this)"/>
    <extensions reference="//@references.84/@lines.38" name="getDomainStore" value="model::DomainStore getDomainStore(model::DomainAttribute this)"/>
    <extensions reference="//@references.84/@lines.40" name="getDomainObject" value="model::DomainObject getDomainObject(model::DomainAttribute this)"/>
    <extensions reference="//@references.84/@lines.68" name="getPrimaryKey" value="model::DomainAttribute getPrimaryKey(model::DomainAttribute this)"/>
    <graphicalRepresentations reference="//@references.287"/>
    <attributes name="primaryKey" type="EBoolean" defaultLiteral="false"/>
  </classes>
  <classes name="ActivityNode" supertypes="//@classes.32" subtypes="//@classes.65 //@classes.66 //@classes.67 //@classes.68 //@classes.71 //@classes.72 //@classes.73" runtimeClass="//@references.8" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ActivityNode"/>
    <graphicalRepresentations reference="//@references.269"/>
  </classes>
  <classes name="Operation" abstract="true" supertypes="//@classes.0 //@classes.2 //@classes.22 //@classes.23 //@classes.26" subtypes="//@classes.11" runtimeClass="//@references.9" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//Operation"/>
    <constraints reference="//@references.82/@lines.2" constraint="name.length.>(0)" message="&quot;Operation must have a name&quot;"/>
    <extensions reference="//@references.83/@lines.1" name="isOperation" value="isOperation(model::Operation this)"/>
    <extensions reference="//@references.84/@lines.7" name="operationName" value="operationName(model::Operation this)"/>
    <extensions reference="//@references.84/@lines.43" name="getOperationName" value="getOperationName(model::Operation this)"/>
    <references name="parameters" upperBound="-1" containment="true" type="//@classes.10"/>
  </classes>
  <classes name="Parameter" supertypes="//@classes.0 //@classes.23" runtimeClass="//@references.10" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//Parameter"/>
    <graphicalRepresentations reference="//@references.309"/>
  </classes>
  <classes name="PrimitiveOperation" supertypes="//@classes.3 //@classes.9 //@classes.27" subtypes="//@classes.12 //@classes.69" runtimeClass="//@references.11" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//PrimitiveOperation"/>
    <constraints reference="//@references.82/@lines.34" constraint="name.==(&quot;setPropertyToValue&quot;)||name.==(&quot;set&quot;)||name.==(&quot;javascriptAlert&quot;)||name.==(&quot;save&quot;)||name.==(&quot;new&quot;)||name.==(&quot;exists?&quot;)||name.==(&quot;equal?&quot;)||name.==(&quot;add role&quot;)||name.==(&quot;add permission&quot;)||name.==(&quot;remove role&quot;)||name.==(&quot;remove permission&quot;)" type="WARNING" message="&quot;Unknown primitive operation name '&quot;.+(name).+(&quot;'&quot;)"/>
    <extensions reference="//@references.84/@lines.41" name="shouldExpandEventTriggers" value="shouldExpandEventTriggers(model::PrimitiveOperation this)"/>
    <extensions reference="//@references.84/@lines.42" name="shouldExpandEventTriggersServer" value="shouldExpandEventTriggersServer(model::PrimitiveOperation this)"/>
    <graphicalRepresentations reference="//@references.312"/>
  </classes>
  <classes name="CompositeOperation" supertypes="//@classes.11 //@classes.13 //@classes.30 //@classes.33 //@classes.38 //@classes.41" runtimeClass="//@references.12" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//CompositeOperation"/>
    <constraints reference="//@references.82/@lines.33" constraint="nodes.typeSelect(model::operations::StartNode).size.&lt;=(1)" message="&quot;An Operation can only contain one StartNode&quot;"/>
    <extensions reference="//@references.84/@lines.26" name="startNode" value="startNode(model::CompositeOperation this)"/>
    <extensions reference="//@references.84/@lines.30" name="getFailEdge" value="getFailEdge(model::CompositeOperation this)"/>
    <graphicalRepresentations reference="//@references.277"/>
    <references name="nodes" upperBound="-1" containment="true" type="//@classes.8"/>
    <references name="dataEdges" upperBound="-1" containment="true" type="//@classes.21"/>
    <references name="executionEdges" upperBound="-1" containment="true" type="//@classes.25"/>
    <references name="variables" upperBound="-1" containment="true" type="//@classes.24"/>
    <references name="values" upperBound="-1" containment="true" type="//@classes.17"/>
  </classes>
  <classes name="ContainsOperations" abstract="true" interface="true" subtypes="//@classes.12 //@classes.14 //@classes.19 //@classes.20 //@classes.74" runtimeClass="//@references.13" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ContainsOperations"/>
    <extensions reference="//@references.84/@lines.21" name="allContainerOperations" value="allContainerOperations(model::ContainsOperations this)"/>
    <references name="operations" upperBound="-1" containment="true" type="//@classes.9"/>
  </classes>
  <classes name="ApplicationElement" supertypes="//@classes.0 //@classes.2 //@classes.3 //@classes.5 //@classes.13 //@classes.33 //@classes.41" subtypes="//@classes.6 //@classes.7 //@classes.15 //@classes.29 //@classes.34 //@classes.35 //@classes.42" runtimeClass="//@references.14" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ApplicationElement"/>
    <extensions reference="//@references.83/@lines.0" name="parent" value="model::InternetApplication parent(model::ApplicationElement this)"/>
    <extensions reference="//@references.84/@lines.20" name="allContainerOperations" value="allContainerOperations(model::ApplicationElement this)"/>
    <graphicalRepresentations reference="//@references.270"/>
    <references name="properties" upperBound="-1" containment="true" type="//@classes.16"/>
    <references name="values" upperBound="-1" containment="true" type="//@classes.17"/>
  </classes>
  <classes name="ApplicationElementContainer" abstract="true" supertypes="//@classes.14 //@classes.30" subtypes="//@classes.18 //@classes.75 //@classes.76" runtimeClass="//@references.15" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ApplicationElementContainer"/>
    <extensions reference="//@references.84/@lines.18" name="allContainerOperations" value="allContainerOperations(model::ApplicationElementContainer this)"/>
    <graphicalRepresentations reference="//@references.271"/>
    <references name="children" upperBound="-1" containment="true" type="//@classes.14"/>
  </classes>
  <classes name="ApplicationElementProperty" supertypes="//@classes.0 //@classes.2 //@classes.3 //@classes.22 //@classes.23" runtimeClass="//@references.16" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ApplicationElementProperty"/>
    <constraints reference="//@references.82/@lines.27" constraint="defaultValue.==(null)&amp;&amp;inEdges.typeSelect(model::wires::SetWire).from.typeSelect(model::components::LoginHandler).size.>(0).!()" type="WARNING" message="&quot;A session property used as part of a login handler should have a default value set, otherwise secure pages will crash with an exception rather than going to the login page&quot;"/>
    <extensions reference="//@references.84/@lines.24" name="allApplicationElementProperties" value="List[model::ApplicationElementProperty] allApplicationElementProperties(model::ApplicationElementProperty this)"/>
    <graphicalRepresentations reference="//@references.272"/>
    <attributes name="defaultValue" type="EString"/>
  </classes>
  <classes name="StaticValue" supertypes="//@classes.0 //@classes.3 //@classes.23" runtimeClass="//@references.17" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//StaticValue"/>
    <graphicalRepresentations reference="//@references.324"/>
    <attributes name="value" type="EString"/>
  </classes>
  <classes name="VisibleThing" supertypes="//@classes.15" subtypes="//@classes.44 //@classes.45 //@classes.46 //@classes.47 //@classes.48" runtimeClass="//@references.18" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//VisibleThing"/>
    <graphicalRepresentations reference="//@references.329"/>
    <references name="sessions" upperBound="-1" containment="true" type="//@classes.74"/>
    <references name="parameters" upperBound="-1" containment="true" type="//@classes.43"/>
  </classes>
  <classes name="InternetApplication" supertypes="//@classes.0 //@classes.5 //@classes.13 //@classes.30 //@classes.33 //@classes.38 //@classes.41" runtimeClass="//@references.19" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//InternetApplication"/>
    <constraints reference="//@references.82/@lines.0" constraint="children.exists(e|model::visual::Page.isInstance(e))||sessions.exists(e|e.children.exists(f|model::visual::Page.isInstance(f)))" message="&quot;No pages in internet application&quot;"/>
    <extensions reference="//@references.84/@lines.0" name="pageTitle" value="pageTitle(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.22" name="allContainerOperations" value="allContainerOperations(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.23" name="allApplicationElementProperties" value="List[model::ApplicationElementProperty] allApplicationElementProperties(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.35" name="containingSession" value="model::scopes::Session containingSession(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.49" name="getRoot" value="model::InternetApplication getRoot(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.50" name="getAllConditions" value="List[model::Condition] getAllConditions(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.52" name="getAllPages" value="List[model::visual::Page] getAllPages(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.54" name="getAllDynamicElements" value="List[model::DynamicApplicationElementSet] getAllDynamicElements(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.56" name="getAllDomainAttributeInstances" value="List[model::DomainAttributeInstance] getAllDomainAttributeInstances(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.58" name="getAllDomainObjectInstances" value="List[model::DomainObjectInstance] getAllDomainObjectInstances(model::InternetApplication this)"/>
    <extensions reference="//@references.84/@lines.60" name="resolveDynamicSet" value="List[emf::EObject] resolveDynamicSet(model::InternetApplication root,model::DynamicApplicationElementSet set)"/>
    <graphicalRepresentations reference="//@references.301"/>
    <attributes name="runtimeUrl" type="EString" defaultLiteral="http://localhost:8080/output/"/>
    <references name="properties" upperBound="-1" containment="true" type="//@classes.16"/>
    <references name="children" upperBound="-1" containment="true" type="//@classes.14"/>
    <references name="domainStores" upperBound="-1" containment="true" type="//@classes.20"/>
    <references name="sessions" upperBound="-1" containment="true" type="//@classes.74"/>
  </classes>
  <classes name="DomainStore" supertypes="//@classes.0 //@classes.5 //@classes.13 //@classes.30 //@classes.33 //@classes.41" subtypes="//@classes.78" runtimeClass="//@references.20" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DomainStore"/>
    <extensions reference="//@references.84/@lines.36" name="getDomainStore" value="model::DomainStore getDomainStore(model::DomainStore this)"/>
    <extensions reference="//@references.84/@lines.44" name="isPropertiesFile" value="isPropertiesFile(model::DomainStore store)"/>
    <graphicalRepresentations reference="//@references.291"/>
    <attributes name="file" lowerBound="1" type="FileReference"/>
    <attributes name="type" lowerBound="1" type="DomainStoreTypes"/>
    <references name="children" upperBound="-1" containment="true" type="//@classes.6"/>
    <references name="properties" upperBound="-1" containment="true" type="//@classes.16"/>
    <references name="views" upperBound="-1" type="//@classes.34"/>
    <references name="attributes" upperBound="-1" containment="true" type="//@classes.7"/>
  </classes>
  <classes name="DataFlowEdge" supertypes="//@classes.32" runtimeClass="//@references.21" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DataFlowEdge"/>
    <graphicalRepresentations reference="//@references.282"/>
    <references name="from" lowerBound="1" type="//@classes.23"/>
    <references name="to" lowerBound="1" type="//@classes.22"/>
  </classes>
  <classes name="DataFlowEdgeDestination" abstract="true" interface="true" subtypes="//@classes.9 //@classes.16 //@classes.24 //@classes.69 //@classes.70 //@classes.73" runtimeClass="//@references.22" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DataFlowEdgeDestination"/>
    <references name="inFlows" upperBound="-1" type="//@classes.21"/>
  </classes>
  <classes name="DataFlowEdgesSource" abstract="true" interface="true" subtypes="//@classes.9 //@classes.10 //@classes.16 //@classes.17 //@classes.24 //@classes.39 //@classes.43 //@classes.73" runtimeClass="//@references.23" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DataFlowEdgesSource"/>
    <references name="outFlows" upperBound="-1" type="//@classes.21"/>
  </classes>
  <classes name="TemporaryVariable" supertypes="//@classes.0 //@classes.22 //@classes.23" runtimeClass="//@references.24" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//TemporaryVariable"/>
    <graphicalRepresentations reference="//@references.326"/>
  </classes>
  <classes name="ExecutionEdge" supertypes="//@classes.32" subtypes="//@classes.28" runtimeClass="//@references.25" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ExecutionEdge"/>
    <graphicalRepresentations reference="//@references.295"/>
    <references name="from" lowerBound="1" type="//@classes.27"/>
    <references name="to" lowerBound="1" type="//@classes.26"/>
  </classes>
  <classes name="ExecutionEdgeDestination" abstract="true" interface="true" subtypes="//@classes.9 //@classes.66 //@classes.67 //@classes.68 //@classes.70 //@classes.71 //@classes.72 //@classes.73" runtimeClass="//@references.26" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ExecutionEdgeDestination"/>
    <references name="inExecutions" upperBound="-1" type="//@classes.25"/>
  </classes>
  <classes name="ExecutionEdgesSource" abstract="true" interface="true" subtypes="//@classes.11 //@classes.65 //@classes.68 //@classes.70 //@classes.71 //@classes.72 //@classes.73" runtimeClass="//@references.27" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ExecutionEdgesSource"/>
    <references name="outExecutions" upperBound="-1" type="//@classes.25"/>
  </classes>
  <classes name="ConditionalEdge" supertypes="//@classes.0 //@classes.25" runtimeClass="//@references.28" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ConditionalEdge"/>
    <graphicalRepresentations reference="//@references.279"/>
  </classes>
  <classes name="DynamicApplicationElementSet" supertypes="//@classes.14" runtimeClass="//@references.29" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DynamicApplicationElementSet"/>
    <extensions reference="//@references.84/@lines.11" name="isXPath" value="isXPath(model::DynamicApplicationElementSet this)"/>
    <extensions reference="//@references.84/@lines.55" name="getAllDynamicElements" value="List[model::DynamicApplicationElementSet] getAllDynamicElements(model::DynamicApplicationElementSet this)"/>
    <graphicalRepresentations reference="//@references.292"/>
    <attributes name="query" type="EString"/>
  </classes>
  <classes name="ContainsWires" abstract="true" interface="true" subtypes="//@classes.6 //@classes.7 //@classes.12 //@classes.15 //@classes.19 //@classes.20 //@classes.31 //@classes.34 //@classes.35 //@classes.50 //@classes.74" runtimeClass="//@references.30" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ContainsWires"/>
    <references name="wires" upperBound="-1" containment="true" type="//@classes.1"/>
  </classes>
  <classes name="ShouldntContainWires" abstract="true" interface="true" supertypes="//@classes.30" subtypes="//@classes.3" runtimeClass="//@references.31" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ShouldntContainWires"/>
  </classes>
  <classes name="GeneratedElement" abstract="true" interface="true" subtypes="//@classes.0 //@classes.1 //@classes.8 //@classes.21 //@classes.25" runtimeClass="//@references.32" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//GeneratedElement"/>
    <extensions reference="//@references.84/@lines.5" name="safeName" value="safeName(model::GeneratedElement this)"/>
    <attributes name="isGenerated" type="EBoolean"/>
    <attributes name="id" id="true" type="EString"/>
    <attributes name="generatedRule" type="EString"/>
    <references name="generatedBy" upperBound="-1" type="//@classes.33"/>
  </classes>
  <classes name="GeneratesElements" abstract="true" interface="true" subtypes="//@classes.12 //@classes.14 //@classes.19 //@classes.20 //@classes.38 //@classes.40 //@classes.50 //@classes.61 //@classes.75 //@classes.76" runtimeClass="//@references.33" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//GeneratesElements"/>
    <attributes name="overridden" type="EBoolean"/>
    <references name="generatedElements" upperBound="-1" type="//@classes.32"/>
  </classes>
  <classes name="DerivedView" supertypes="//@classes.14 //@classes.30" runtimeClass="//@references.34" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DerivedView"/>
    <graphicalRepresentations reference="//@references.286"/>
    <attributes name="strQuery" type="EString"/>
    <references name="attributes" upperBound="-1" type="//@classes.7"/>
  </classes>
  <classes name="DomainObjectInstance" supertypes="//@classes.14 //@classes.30" subtypes="//@classes.81" runtimeClass="//@references.35" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DomainObjectInstance"/>
    <constraints reference="//@references.82/@lines.15" constraint="inEdges.typeSelect(model::wires::SelectWire).toSet().union(inEdges.typeSelect(model::wires::NewInstanceWire)).size.&lt;=(1)" message="&quot;A DomainObjectInstance cannot have more than one Select or NewInstance wire&quot;"/>
    <extensions reference="//@references.84/@lines.59" name="getAllDomainObjectInstances" value="List[model::DomainObjectInstance] getAllDomainObjectInstances(model::DomainObjectInstance this)"/>
    <extensions reference="//@references.84/@lines.64" name="isAutosaveOff" value="isAutosaveOff(model::DomainObjectInstance this)"/>
    <extensions reference="//@references.84/@lines.69" name="getPrimaryKey" value="model::DomainAttribute getPrimaryKey(model::DomainObjectInstance this)"/>
    <graphicalRepresentations reference="//@references.290"/>
    <attributes name="strQuery" type="EString"/>
    <attributes name="autosave" type="EBoolean" defaultLiteral="true"/>
    <references name="attributes" upperBound="-1" containment="true" type="//@classes.42"/>
  </classes>
  <classes name="PageRequest" runtimeClass="//@references.36" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//PageRequest"/>
    <graphicalRepresentations reference="//@references.308"/>
    <references name="parameters" upperBound="-1" type="//@classes.16"/>
  </classes>
  <classes name="VisitorAgent" runtimeClass="//@references.37" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//VisitorAgent"/>
    <graphicalRepresentations reference="//@references.330"/>
    <references name="properties" upperBound="-1" type="//@classes.16"/>
  </classes>
  <classes name="Scope" abstract="true" supertypes="//@classes.33" subtypes="//@classes.12 //@classes.19 //@classes.44 //@classes.48 //@classes.74" runtimeClass="//@references.38" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//Scope"/>
  </classes>
  <classes name="Condition" abstract="true" supertypes="//@classes.0 //@classes.3 //@classes.23" subtypes="//@classes.40 //@classes.70" runtimeClass="//@references.39" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//Condition"/>
    <extensions reference="//@references.84/@lines.8" name="conditionName" value="conditionName(model::Condition this)"/>
    <extensions reference="//@references.84/@lines.51" name="getAllConditions" value="List[model::Condition] getAllConditions(model::Condition this)"/>
  </classes>
  <classes name="CompositeCondition" supertypes="//@classes.33 //@classes.39 //@classes.41" runtimeClass="//@references.40" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//CompositeCondition"/>
    <extensions reference="//@references.84/@lines.27" name="startNodeCondition" value="startNodeCondition(model::CompositeCondition this)"/>
    <graphicalRepresentations reference="//@references.276"/>
    <references name="nodes" upperBound="-1" containment="true" type="//@classes.8"/>
    <references name="dataEdges" upperBound="-1" containment="true" type="//@classes.21"/>
    <references name="executionEdges" upperBound="-1" containment="true" type="//@classes.25"/>
    <references name="variables" upperBound="-1" containment="true" type="//@classes.24"/>
    <references name="values" upperBound="-1" containment="true" type="//@classes.17"/>
    <references name="parameters" upperBound="-1" containment="true" type="//@classes.10"/>
  </classes>
  <classes name="ContainsConditions" abstract="true" interface="true" subtypes="//@classes.12 //@classes.14 //@classes.19 //@classes.20 //@classes.40 //@classes.50 //@classes.74" runtimeClass="//@references.41" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//ContainsConditions"/>
    <references name="conditions" upperBound="-1" containment="true" type="//@classes.39"/>
  </classes>
  <classes name="DomainAttributeInstance" supertypes="//@classes.14" runtimeClass="//@references.42" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//DomainAttributeInstance"/>
    <constraints reference="//@references.82/@lines.14" constraint="inEdges.typeSelect(model::wires::SelectWire).toSet().union(inEdges.typeSelect(model::wires::NewInstanceWire)).size.&lt;=(1)" message="&quot;A DomainAttributeInstance cannot have more than one Select or NewInstance wire&quot;"/>
    <extensions reference="//@references.84/@lines.10" name="attributeName" value="attributeName(model::DomainAttributeInstance this)"/>
    <extensions reference="//@references.84/@lines.57" name="getAllDomainAttributeInstances" value="List[model::DomainAttributeInstance] getAllDomainAttributeInstances(model::DomainAttributeInstance this)"/>
    <extensions reference="//@references.84/@lines.63" name="isAutosaveOff" value="isAutosaveOff(model::DomainAttributeInstance this)"/>
    <extensions reference="//@references.84/@lines.65" name="getPrimaryKey" value="model::DomainAttribute getPrimaryKey(model::DomainAttributeInstance this)"/>
    <graphicalRepresentations reference="//@references.288"/>
    <attributes name="autosave" type="EBoolean" defaultLiteral="true"/>
  </classes>
  <classes name="QueryParameter" supertypes="//@classes.0 //@classes.3 //@classes.23" runtimeClass="//@references.43" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//QueryParameter"/>
    <constraints reference="//@references.82/@lines.28" constraint="outEdges.forAll(e|isAccessibleOnPage(containingPage(this.eContainer),e.to))" message="&quot;A QueryParameter cannot be used on a Page outside of its containing page (&quot;.+(containingPage(this.eContainer)).+(&quot;, &quot;).+(containingPage(outEdges.first().to.eContainer)).+(&quot;)&quot;)"/>
    <graphicalRepresentations reference="//@references.314"/>
    <attributes name="defaultValue" type="EString"/>
  </classes>
  <classes name="Page" supertypes="//@classes.18 //@classes.38" runtimeClass="//@references.44" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//visual/Page"/>
    <operationalSemantics reference="//@references.111/@methods.0" description="//@references.111/@methods.0/@javadocs.2"/>
    <constraints reference="//@references.82/@lines.1" constraint="name.length.>(0)" message="&quot;Page must have a name&quot;"/>
    <constraints reference="//@references.82/@lines.32" constraint="children.typeSelect(model::components::LoginHandler).size.==(0)" message="&quot;A Page cannot contain a LoginHandler&quot;"/>
    <extensions reference="//@references.83/@lines.3" name="containingPage" value="model::visual::Page containingPage(model::visual::Page element)"/>
    <extensions reference="//@references.83/@lines.5" name="isAccessibleOnPage" value="isAccessibleOnPage(model::visual::Page page,model::wires::CompositeWire wire)"/>
    <extensions reference="//@references.83/@lines.6" name="isAccessibleOnPage" value="isAccessibleOnPage(model::visual::Page page,model::wires::SingleWire wire)"/>
    <extensions reference="//@references.83/@lines.7" name="isAccessibleOnPage" value="isAccessibleOnPage(model::visual::Page page,model::NamedElement element)"/>
    <extensions reference="//@references.83/@lines.8" name="isAccessibleOnPage" value="isAccessibleOnPage(model::visual::Page page,emf::EObject element)"/>
    <extensions reference="//@references.84/@lines.1" name="pageTitle" value="pageTitle(model::visual::Page this)"/>
    <extensions reference="//@references.84/@lines.12" name="containingPage" value="model::visual::Page containingPage(model::visual::Page element)"/>
    <extensions reference="//@references.84/@lines.53" name="getAllPages" value="List[model::visual::Page] getAllPages(model::visual::Page this)"/>
    <graphicalRepresentations reference="//@references.307"/>
    <attributes name="url" type="EString"/>
  </classes>
  <classes name="InputForm" supertypes="//@classes.18" runtimeClass="//@references.45" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//visual/InputForm"/>
    <extensions reference="//@references.84/@lines.2" name="formName" value="formName(model::visual::InputForm this)"/>
    <graphicalRepresentations reference="//@references.299"/>
  </classes>
  <classes name="InputTextField" supertypes="//@classes.18" runtimeClass="//@references.46" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//visual/InputTextField"/>
    <operationalSemantics reference="//@references.111/@methods.0" description="//@references.111/@methods.0/@javadocs.2"/>
    <extensions reference="//@references.84/@lines.3" name="textFieldName" value="textFieldName(model::visual::InputTextField this)"/>
    <extensions reference="//@references.84/@lines.61" name="getFieldValue" value="getFieldValue(model::visual::InputTextField this)"/>
    <graphicalRepresentations reference="//@references.300"/>
  </classes>
  <classes name="Button" supertypes="//@classes.18" runtimeClass="//@references.47" tagline="Represents a clickable button to the user." description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//visual/Button"/>
    <operationalSemantics reference="//@references.111/@methods.0" description="//@references.111/@methods.0/@javadocs.0"/>
    <inferenceSemantics reference="//@references.258/@rules.0" description="//@references.258/@rules.0/@javadocs.0"/>
    <extensions reference="//@references.84/@lines.4" name="buttonName" value="buttonName(model::visual::Button this)"/>
    <graphicalRepresentations reference="//@references.273"/>
  </classes>
  <classes name="Frame" supertypes="//@classes.18 //@classes.38" runtimeClass="//@references.48" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//visual/Frame"/>
    <graphicalRepresentations reference="//@references.298"/>
  </classes>
  <classes name="SingleWire" supertypes="//@classes.1" subtypes="//@classes.53 //@classes.61 //@classes.62 //@classes.63 //@classes.64" runtimeClass="//@references.49" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/SingleWire"/>
  </classes>
  <classes name="CompositeWire" supertypes="//@classes.0 //@classes.1 //@classes.30 //@classes.33 //@classes.41" subtypes="//@classes.51 //@classes.52 //@classes.54 //@classes.55 //@classes.56 //@classes.57 //@classes.58 //@classes.59 //@classes.60" runtimeClass="//@references.50" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/CompositeWire"/>
    <extensions reference="//@references.84/@lines.32" name="isFailEdge" value="isFailEdge(model::wires::CompositeWire this)"/>
    <graphicalRepresentations reference="//@references.278"/>
    <references name="children" upperBound="-1" containment="true" type="//@classes.14"/>
    <references name="properties" upperBound="-1" containment="true" type="//@classes.16"/>
    <references name="operations" upperBound="-1" containment="true" type="//@classes.9"/>
    <references name="eventTriggers" upperBound="-1" containment="true" type="//@classes.4"/>
    <references name="parameters" upperBound="-1" containment="true" type="//@classes.10"/>
    <references name="values" upperBound="-1" containment="true" type="//@classes.17"/>
  </classes>
  <classes name="SyncWire" supertypes="//@classes.2 //@classes.50" runtimeClass="//@references.51" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/SyncWire"/>
    <constraints reference="//@references.82/@lines.7" constraint="model::StaticValue.isInstance(from).!()&amp;&amp;model::StaticValue.isInstance(to).!()" message="&quot;You cannot have a SyncWire that connects to a StaticValue&quot;"/>
    <constraints reference="//@references.82/@lines.8" constraint="model::QueryParameter.isInstance(from).!()&amp;&amp;model::QueryParameter.isInstance(to).!()" message="&quot;You cannot have a SyncWire that connects to a QueryParameter&quot;"/>
    <constraints reference="//@references.82/@lines.9" constraint="from.!=(to)" message="&quot;A SyncWire cannot connect to itself&quot;"/>
    <constraints reference="//@references.82/@lines.10" constraint="model::ApplicationElementProperty.isInstance(from)&amp;&amp;model::ApplicationElementProperty.isInstance(to).!()" message="&quot;You cannot have a SyncWire connecting two ApplicationElementProperties&quot;"/>
    <graphicalRepresentations reference="//@references.325"/>
  </classes>
  <classes name="RunInstanceWire" supertypes="//@classes.2 //@classes.50" runtimeClass="//@references.52" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/RunInstanceWire"/>
    <constraints reference="//@references.82/@lines.4" constraint="model::Operation.isInstance(to)" message="&quot;A run instance wire can only connect to an operation&quot;"/>
    <constraints reference="//@references.82/@lines.26" constraint="model::VisibleThing.isInstance(from)&amp;&amp;name.==(&quot;click&quot;)||name.==(&quot;onClick&quot;).!().!()" type="WARNING" message="&quot;This RunInstanceWire will not do anything: consider naming it 'onClick'&quot;"/>
    <extensions reference="//@references.83/@lines.2" name="isRunInstanceWire" value="isRunInstanceWire(model::wires::RunInstanceWire this)"/>
    <graphicalRepresentations reference="//@references.317"/>
    <attributes name="priority" type="EInt"/>
  </classes>
  <classes name="ParameterWire" supertypes="//@classes.0 //@classes.49" runtimeClass="//@references.53" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/ParameterWire"/>
    <graphicalRepresentations reference="//@references.310"/>
    <attributes name="parameterName" type="EString"/>
  </classes>
  <classes name="SetWire" supertypes="//@classes.2 //@classes.50" runtimeClass="//@references.54" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/SetWire"/>
    <graphicalRepresentations reference="//@references.320"/>
  </classes>
  <classes name="ShowWire" supertypes="//@classes.50" runtimeClass="//@references.55" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/ShowWire"/>
    <graphicalRepresentations reference="//@references.321"/>
  </classes>
  <classes name="CommitWire" supertypes="//@classes.50" runtimeClass="//@references.56" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/CommitWire"/>
    <graphicalRepresentations reference="//@references.275"/>
  </classes>
  <classes name="NavigateWire" supertypes="//@classes.50" runtimeClass="//@references.57" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/NavigateWire"/>
    <graphicalRepresentations reference="//@references.304"/>
  </classes>
  <classes name="SelectWire" supertypes="//@classes.2 //@classes.50" runtimeClass="//@references.58" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/SelectWire"/>
    <constraints reference="//@references.82/@lines.16" constraint="model::DomainObject.isInstance(from)" message="&quot;A SelectWire must come from a valid DomainObject&quot;"/>
    <constraints reference="//@references.82/@lines.30" constraint="inEdges.typeSelect(model::wires::ParameterWire).size.==(0)||query.!=(null)&amp;&amp;query.length.>(0)" message="&quot;A SelectWire has incoming Parameters, but does not have a query to use them&quot;"/>
    <graphicalRepresentations reference="//@references.318"/>
    <attributes name="query" type="EString"/>
    <attributes name="limit" type="EInt" defaultLiteral="1"/>
  </classes>
  <classes name="ConditionWire" supertypes="//@classes.2 //@classes.50" runtimeClass="//@references.59" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/ConditionWire"/>
    <graphicalRepresentations reference="//@references.280"/>
  </classes>
  <classes name="NewInstanceWire" supertypes="//@classes.50" runtimeClass="//@references.60" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/NewInstanceWire"/>
    <extensions reference="//@references.84/@lines.66" name="getPrimaryKey" value="model::DomainAttribute getPrimaryKey(model::wires::NewInstanceWire this)"/>
    <graphicalRepresentations reference="//@references.305"/>
  </classes>
  <classes name="ExtendsWire" supertypes="//@classes.33 //@classes.49" runtimeClass="//@references.61" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/ExtendsWire"/>
    <constraints reference="//@references.82/@lines.19" constraint="from.!=(to)" message="&quot;A Role cannot extend itself&quot;"/>
    <constraints reference="//@references.82/@lines.20" constraint="model::DomainObject.isInstance(from)||model::DomainAttribute.isInstance(from)||model::DomainAttributeInstance.isInstance(from)&amp;&amp;model::DomainObject.isInstance(to)||model::DomainAttribute.isInstance(to)||model::DomainAttributeInstance.isInstance(to)" message="&quot;An ExtendsWire can only connect to a DomainObject, DomainAttribute or DomainAttributeInstance&quot;"/>
    <graphicalRepresentations reference="//@references.296"/>
  </classes>
  <classes name="RequiresWire" supertypes="//@classes.2 //@classes.3 //@classes.49" runtimeClass="//@references.62" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/RequiresWire"/>
    <constraints reference="//@references.82/@lines.23" constraint="inEdges.forAll(e|model::wires::ConstraintWire.isInstance(e))" message="&quot;A RequiresWire can only be connected to ConstraintWires&quot;"/>
    <constraints reference="//@references.82/@lines.24" constraint="model::users::Permission.isInstance(to)||model::users::Role.isInstance(to)" message="&quot;A RequireWire must connect to a Permission or a Role&quot;"/>
    <graphicalRepresentations reference="//@references.315"/>
  </classes>
  <classes name="ConstraintWire" supertypes="//@classes.49" runtimeClass="//@references.63" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/ConstraintWire"/>
    <graphicalRepresentations reference="//@references.281"/>
    <attributes name="type" lowerBound="1" type="ConstraintTypes"/>
  </classes>
  <classes name="ProvidesWire" supertypes="//@classes.49" runtimeClass="//@references.64" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//wires/ProvidesWire"/>
    <constraints reference="//@references.82/@lines.21" constraint="model::users::Role.isInstance(from)" message="&quot;An ProvidesWire can only connect from a Role&quot;"/>
    <constraints reference="//@references.82/@lines.22" constraint="model::users::Permission.isInstance(to)" message="&quot;An ProvidesWire can only connect to a Permission&quot;"/>
    <graphicalRepresentations reference="//@references.313"/>
  </classes>
  <classes name="StartNode" supertypes="//@classes.8 //@classes.27" runtimeClass="//@references.65" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/StartNode"/>
    <graphicalRepresentations reference="//@references.323"/>
  </classes>
  <classes name="CancelNode" supertypes="//@classes.8 //@classes.26" runtimeClass="//@references.66" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/CancelNode"/>
    <graphicalRepresentations reference="//@references.274"/>
    <attributes name="exceptionText" type="EString"/>
  </classes>
  <classes name="FinishNode" supertypes="//@classes.8 //@classes.26" runtimeClass="//@references.67" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/FinishNode"/>
    <graphicalRepresentations reference="//@references.297"/>
  </classes>
  <classes name="DecisionNode" supertypes="//@classes.8 //@classes.26 //@classes.27" runtimeClass="//@references.68" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/DecisionNode"/>
    <graphicalRepresentations reference="//@references.284"/>
  </classes>
  <classes name="DecisionOperation" supertypes="//@classes.11 //@classes.22" runtimeClass="//@references.69" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/DecisionOperation"/>
    <constraints reference="//@references.82/@lines.5" constraint="name.==(&quot;equal?&quot;)&amp;&amp;inFlows.size.>=(2)||name.!=(&quot;equal?&quot;)" message="&quot;A compare decision operation must have at least two data flows in to compare&quot;"/>
    <constraints reference="//@references.82/@lines.6" constraint="outExecutions.size.&lt;=(2)" message="&quot;A DecisionOperation can only have at most two out execution edges&quot;"/>
    <extensions reference="//@references.84/@lines.28" name="passedExectionFlow" value="passedExectionFlow(model::operations::DecisionOperation this)"/>
    <extensions reference="//@references.84/@lines.29" name="failedExectionFlow" value="failedExectionFlow(model::operations::DecisionOperation this)"/>
    <graphicalRepresentations reference="//@references.285"/>
  </classes>
  <classes name="DecisionCondition" supertypes="//@classes.22 //@classes.26 //@classes.27 //@classes.39" runtimeClass="//@references.70" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/DecisionCondition"/>
    <extensions reference="//@references.84/@lines.45" name="getFailEdges" value="getFailEdges(model::operations::DecisionCondition this)"/>
    <extensions reference="//@references.84/@lines.47" name="getPassEdges" value="getPassEdges(model::operations::DecisionCondition this)"/>
    <graphicalRepresentations reference="//@references.283"/>
  </classes>
  <classes name="SplitNode" supertypes="//@classes.8 //@classes.26 //@classes.27" runtimeClass="//@references.71" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/SplitNode"/>
    <graphicalRepresentations reference="//@references.322"/>
  </classes>
  <classes name="JoinNode" supertypes="//@classes.8 //@classes.26 //@classes.27" runtimeClass="//@references.72" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/JoinNode"/>
    <graphicalRepresentations reference="//@references.302"/>
  </classes>
  <classes name="OperationCallNode" supertypes="//@classes.0 //@classes.3 //@classes.8 //@classes.22 //@classes.23 //@classes.26 //@classes.27" runtimeClass="//@references.73" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//operations/OperationCallNode"/>
    <constraints reference="//@references.82/@lines.25" constraint="outEdges.size.==(1)&amp;&amp;model::wires::RunInstanceWire.isInstance(outEdges.first())&amp;&amp;model::Operation.isInstance(outEdges.first().to)" message="&quot;An OperationCallNode must have exactly one RunInstanceWire connecting it to an Operation&quot;"/>
    <extensions reference="//@references.84/@lines.46" name="getFailEdges" value="getFailEdges(model::operations::OperationCallNode this)"/>
    <extensions reference="//@references.84/@lines.48" name="getPassEdges" value="getPassEdges(model::operations::OperationCallNode this)"/>
    <graphicalRepresentations reference="//@references.306"/>
  </classes>
  <classes name="Session" supertypes="//@classes.0 //@classes.2 //@classes.3 //@classes.5 //@classes.13 //@classes.30 //@classes.38 //@classes.41" runtimeClass="//@references.74" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//scopes/Session"/>
    <constraints reference="//@references.82/@lines.11" constraint="children.exists(e|model::visual::InputTextField.isInstance(e)).!()" message="&quot;Sessions cannot directly contain InputTextFields&quot;"/>
    <constraints reference="//@references.82/@lines.12" constraint="children.exists(e|model::visual::InputForm.isInstance(e)).!()" message="&quot;Sessions cannot directly contain InputForms&quot;"/>
    <constraints reference="//@references.82/@lines.31" constraint="children.typeSelect(model::components::LoginHandler).size.&lt;=(1)" message="&quot;A Session can only contain one LoginHandler&quot;"/>
    <extensions reference="//@references.84/@lines.14" name="containingPage" value="model::visual::Page containingPage(model::scopes::Session element)"/>
    <extensions reference="//@references.84/@lines.19" name="allContainerOperations" value="allContainerOperations(model::scopes::Session this)"/>
    <extensions reference="//@references.84/@lines.25" name="possibleParentOperations" value="possibleParentOperations(model::scopes::Session this)"/>
    <extensions reference="//@references.84/@lines.34" name="containingSession" value="model::scopes::Session containingSession(model::scopes::Session this)"/>
    <graphicalRepresentations reference="//@references.319"/>
    <references name="agents" upperBound="-1" containment="true" type="//@classes.37"/>
    <references name="children" upperBound="-1" containment="true" type="//@classes.14"/>
    <references name="properties" upperBound="-1" containment="true" type="//@classes.16"/>
    <references name="values" upperBound="-1" containment="true" type="//@classes.17"/>
  </classes>
  <classes name="LoginHandler" supertypes="//@classes.15 //@classes.33" runtimeClass="//@references.75" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//components/LoginHandler"/>
    <constraints reference="//@references.82/@lines.3" constraint="inEdges.exists(e|model::wires::ParameterWire.isInstance(e))" message="&quot;A login handler must have an incoming parameter to check against&quot;"/>
    <constraints reference="//@references.82/@lines.29" constraint="type.!=(model::components::LoginHandlerTypes::USER)||inEdges.typeSelect(model::wires::ParameterWire).size.&lt;=(1)" message="&quot;A LoginHandler[user] can not have more than one incoming ParameterWire&quot;"/>
    <graphicalRepresentations reference="//@references.303"/>
    <attributes name="type" lowerBound="1" type="LoginHandlerTypes"/>
  </classes>
  <classes name="AccessControlHandler" supertypes="//@classes.15 //@classes.33" runtimeClass="//@references.76" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//components/AccessControlHandler"/>
    <graphicalRepresentations reference="//@references.268"/>
  </classes>
  <classes name="EmptyDomainClass" abstract="true" runtimeClass="//@references.77" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//domain/EmptyDomainClass"/>
    <graphicalRepresentations reference="//@references.293"/>
  </classes>
  <classes name="UserStore" supertypes="//@classes.20" runtimeClass="//@references.78" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//users/UserStore"/>
    <graphicalRepresentations reference="//@references.328"/>
    <references name="permissions" upperBound="-1" containment="true" type="//@classes.80"/>
  </classes>
  <classes name="Role" supertypes="//@classes.6" runtimeClass="//@references.79" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//users/Role"/>
    <graphicalRepresentations reference="//@references.316"/>
  </classes>
  <classes name="Permission" supertypes="//@classes.0 //@classes.2 //@classes.3" runtimeClass="//@references.80" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//users/Permission"/>
    <graphicalRepresentations reference="//@references.311"/>
  </classes>
  <classes name="UserInstance" supertypes="//@classes.35" runtimeClass="//@references.81" description="TODO Description">
    <targetClass href="http://openiaml.org/model0.4#//users/UserInstance"/>
    <graphicalRepresentations reference="//@references.327"/>
  </classes>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="NamedElement"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="WireEdge"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="WireEdgeDestination"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="WireEdgesSource"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="EventTrigger"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ContainsEventTriggers"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DomainObject"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DomainAttribute"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ActivityNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="Operation"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="Parameter"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="PrimitiveOperation"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="CompositeOperation"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ContainsOperations"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ApplicationElement"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ApplicationElementContainer"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ApplicationElementProperty"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="StaticValue"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="VisibleThing"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="InternetApplication"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DomainStore"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DataFlowEdge"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DataFlowEdgeDestination"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DataFlowEdgesSource"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="TemporaryVariable"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ExecutionEdge"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ExecutionEdgeDestination"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ExecutionEdgesSource"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ConditionalEdge"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DynamicApplicationElementSet"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ContainsWires"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ShouldntContainWires"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="GeneratedElement"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="GeneratesElements"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DerivedView"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DomainObjectInstance"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="PageRequest"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="VisitorAgent"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="Scope"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="Condition"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="CompositeCondition"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="ContainsConditions"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="DomainAttributeInstance"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model" name="QueryParameter"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.visual" name="Page"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.visual" name="InputForm"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.visual" name="InputTextField"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.visual" name="Button"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.visual" name="Frame"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="SingleWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="CompositeWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="SyncWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="RunInstanceWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="ParameterWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="SetWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="ShowWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="CommitWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="NavigateWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="SelectWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="ConditionWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="NewInstanceWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="ExtendsWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="RequiresWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="ConstraintWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.wires" name="ProvidesWire"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="StartNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="CancelNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="FinishNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="DecisionNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="DecisionOperation"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="DecisionCondition"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="SplitNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="JoinNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.operations" name="OperationCallNode"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.scopes" name="Session"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.components" name="LoginHandler"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.components" name="AccessControlHandler"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.domain" name="EmptyDomainClass"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.users" name="UserStore"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.users" name="Role"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.users" name="Permission"/>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model" package="org.openiaml.model.model.users" name="UserInstance"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.codegen.oaw" package="src.metamodel" name="Checks.chk">
    <lines line="9"/>
    <lines line="13"/>
    <lines line="16"/>
    <lines line="19"/>
    <lines line="22"/>
    <lines line="25"/>
    <lines line="29"/>
    <lines line="32"/>
    <lines line="36"/>
    <lines line="40"/>
    <lines line="43"/>
    <lines line="47"/>
    <lines line="50"/>
    <lines line="53"/>
    <lines line="56"/>
    <lines line="59"/>
    <lines line="62"/>
    <lines line="65"/>
    <lines line="68"/>
    <lines line="71"/>
    <lines line="74"/>
    <lines line="78"/>
    <lines line="81"/>
    <lines line="84"/>
    <lines line="87"/>
    <lines line="99"/>
    <lines line="104"/>
    <lines line="107"/>
    <lines line="110"/>
    <lines line="113"/>
    <lines line="116"/>
    <lines line="119"/>
    <lines line="122"/>
    <lines line="125"/>
    <lines line="129"/>
  </references>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.codegen.oaw" package="src.metamodel" name="Extensions.ext">
    <lines line="3"/>
    <lines line="9"/>
    <lines line="15"/>
    <lines line="18"/>
    <lines line="21"/>
    <lines line="30"/>
    <lines line="34"/>
    <lines line="38"/>
    <lines line="41"/>
  </references>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.codegen.oaw" package="src.template" name="GeneratorExtensions.ext">
    <lines line="5"/>
    <lines line="8"/>
    <lines line="11"/>
    <lines line="14"/>
    <lines line="17"/>
    <lines line="20"/>
    <lines line="39"/>
    <lines line="42"/>
    <lines line="48"/>
    <lines line="51"/>
    <lines line="54"/>
    <lines line="60"/>
    <lines line="64"/>
    <lines line="67"/>
    <lines line="71"/>
    <lines line="82"/>
    <lines line="91"/>
    <lines line="105"/>
    <lines line="115"/>
    <lines line="121"/>
    <lines line="124"/>
    <lines line="127"/>
    <lines line="130"/>
    <lines line="134"/>
    <lines line="140"/>
    <lines line="144"/>
    <lines line="151"/>
    <lines line="154"/>
    <lines line="158"/>
    <lines line="161"/>
    <lines line="165"/>
    <lines line="168"/>
    <lines line="171"/>
    <lines line="178"/>
    <lines line="181"/>
    <lines line="184"/>
    <lines line="187"/>
    <lines line="189"/>
    <lines line="191"/>
    <lines line="196"/>
    <lines line="198"/>
    <lines line="205"/>
    <lines line="208"/>
    <lines line="211"/>
    <lines line="231"/>
    <lines line="235"/>
    <lines line="239"/>
    <lines line="242"/>
    <lines line="245"/>
    <lines line="252"/>
    <lines line="256"/>
    <lines line="262"/>
    <lines line="266"/>
    <lines line="272"/>
    <lines line="276"/>
    <lines line="283"/>
    <lines line="287"/>
    <lines line="293"/>
    <lines line="297"/>
    <lines line="303"/>
    <lines line="310"/>
    <lines line="314"/>
    <lines line="317"/>
    <lines line="320"/>
    <lines line="323"/>
    <lines line="329"/>
    <lines line="335"/>
    <lines line="338"/>
    <lines line="341"/>
    <lines line="344"/>
    <lines line="350"/>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.javadoc" name="MyDoclet">
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="toString" line="92">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Given the &lt;code>Tag&lt;/code> representation of this custom"/>
        <fragments xsi:type="md:JavadocTextElement" value="tag, return its string representation."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value="   the &lt;code>Tag&lt;/code> representation of this custom tag."/>
      </javadocs>
      <javadocs name="@see"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Given an array of &lt;code>Tag&lt;/code>s representing this custom"/>
        <fragments xsi:type="md:JavadocTextElement" value="tag, return its string representation."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value="  the array of &lt;code>Tag&lt;/code>s representing of this custom tag."/>
      </javadocs>
      <javadocs name="@see"/>
    </methods>
    <methods name="register" line="107">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Register this Taglet. If an exception is thrown,"/>
        <fragments xsi:type="md:JavadocTextElement" value="print it out to stderr as well."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value="the map to register this tag to."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="AllTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests."/>
    </javadocs>
    <javadocs name="@see"/>
    <javadocs name="@see"/>
    <javadocs name="@see"/>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Compile all the suites."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen" name="AllCodegenTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for code generation."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen" name="DatabaseCodegenTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
      <fragments xsi:type="md:JavadocTextElement" value="Extends code generation test cases to allow for simpler access"/>
      <fragments xsi:type="md:JavadocTextElement" value="to databases. Also includes database initialisation through "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.0"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;p>&lt;b>NOTE:&lt;/b> "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.1"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=" must be called in order to actually initialise the database.&lt;/b>"/>
    </javadocs>
    <javadocs name="@see">
      <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.1"/>
    </javadocs>
    <javadocs name="@see">
      <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.0"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getDatabaseInitialisers" line="29">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get initial database values. The results returned from here are"/>
        <fragments xsi:type="md:JavadocTextElement" value="queries executed against the initialised database."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="initialiseDatabase" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Initialise the database given the values specified in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.0"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" and "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.2"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
        <fragments xsi:type="md:JavadocTextElement" value="This must be called by subclasses if they wish to have the database"/>
        <fragments xsi:type="md:JavadocTextElement" value="initialised."/>
      </javadocs>
    </methods>
    <methods name="getDatabaseName" line="37">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the database filename, e.g. 'output/model_12109331eea_e3e.db'"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="hasDatabaseBeenInitialised" line="75">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Has "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.88/@methods.1"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" been successfully"/>
        <fragments xsi:type="md:JavadocTextElement" value="called?"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="executeQuery" line="85">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Directly execute a SQL query and get the results."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" SQL query to execute"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the result set found"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="AllModel0_1CodegenTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Code generation tests: model version 0.1"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="LoginHandlerKey">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test a Login Handler in a Session, where the login handler"/>
      <fragments xsi:type="md:JavadocTextElement" value="is authenticating against a key."/>
      <fragments xsi:type="md:JavadocTextElement" value="InternetApplication"/>
      <fragments xsi:type="md:JavadocTextElement" value="Page &quot;Home&quot;"/>
      <fragments xsi:type="md:JavadocTextElement" value="Session &quot;My Session&quot;"/>
      <fragments xsi:type="md:JavadocTextElement" value="LoginHandler type=key [in=42, set=myKey, navigate&quot;login&quot;=viewkey, navigate&quot;logout&quot;=home]"/>
      <fragments xsi:type="md:JavadocTextElement" value="StaticValue key=42"/>
      <fragments xsi:type="md:JavadocTextElement" value="FieldValue &quot;my login key&quot;"/>
      <fragments xsi:type="md:JavadocTextElement" value="Page &quot;View Page&quot;"/>
      <fragments xsi:type="md:JavadocTextElement" value="TextField &quot;current login key&quot;"/>
      <fragments xsi:type="md:JavadocTextElement" value="sync'd with &quot;my login key&quot;"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHasLoginPage" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login page."/>
      </javadocs>
    </methods>
    <methods name="testHasHomePage" line="42">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a home page."/>
      </javadocs>
    </methods>
    <methods name="testHasViewkeyPage" line="52">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a viewkey page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLogoutPage" line="66">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a logout page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
        <fragments xsi:type="md:JavadocTextElement" value="Normally the user wouldn't see the &quot;logout&quot; link, but we should"/>
        <fragments xsi:type="md:JavadocTextElement" value="check that if they access it manually without being authenticated,"/>
        <fragments xsi:type="md:JavadocTextElement" value="that an error is thrown."/>
      </javadocs>
    </methods>
    <methods name="testCantAccessViewKeyPageWithoutSession" line="90">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can't access the view key page without first"/>
        <fragments xsi:type="md:JavadocTextElement" value="logging in. It should redirect us to the login page."/>
      </javadocs>
    </methods>
    <methods name="testCanLoginLogoutFromSitemap" line="108">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can login; and then we can logout by going through the"/>
        <fragments xsi:type="md:JavadocTextElement" value="sitemap (since our model doesn't have a link to logout yet.)"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheckViewkey" line="143">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the viewkey page to make sure the key is there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testTryViewkeyThenLogin" line="182">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We try to view the viewkey page, but we get asked to login."/>
        <fragments xsi:type="md:JavadocTextElement" value="We login, check the viewkey page works, and then logout again."/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidLogin" line="217">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that we are actually comparing the login keys"/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutComplete" line="255">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we login, and then log out, we can not access"/>
        <fragments xsi:type="md:JavadocTextElement" value="the target page again."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SimpleTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A very simple test case: simply generates the site code, and"/>
      <fragments xsi:type="md:JavadocTextElement" value="makes sure a testing sitemap is available."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testSitemap" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the testing sitemap exists."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncFieldApplicationElementProperty">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test SyncWires when they connect an InputTextField to an ApplicationElementProperty"/>
      <fragments xsi:type="md:JavadocTextElement" value="(stored on the same Page, thus permanent)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getRuntimeClass" line="20">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Allows this class to be extended for test methods, yet allow"/>
        <fragments xsi:type="md:JavadocTextElement" value="each super class to run outside the cache. "/>
        <fragments xsi:type="md:JavadocTextElement" value="Classes extending this test case should also re-implement this"/>
        <fragments xsi:type="md:JavadocTextElement" value="method to return a new class."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncFieldDomainAttribute">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test just a single SyncWire with a InputTextField to a DomainAttribute"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDatabaseIsEmpty" line="25">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that the database is initially empty (and can be loaded "/>
        <fragments xsi:type="md:JavadocTextElement" value="through SQLite). It then goes into the only page in this "/>
        <fragments xsi:type="md:JavadocTextElement" value="InternetApplication and changes its value. It then checks to make"/>
        <fragments xsi:type="md:JavadocTextElement" value="sure this value persists over multiple page refreshes, and"/>
        <fragments xsi:type="md:JavadocTextElement" value="exists in the database."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncFormDomainObject">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Testing an entire Form connected with a SyncWire to an entire DomainObject"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncStaticValueField">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Testing a simple value to field sync wire."/>
      <fragments xsi:type="md:JavadocTextElement" value="property &lt;--> text field"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncWiresMultiple">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Testing a big complicated sync wires example."/>
      <fragments xsi:type="md:JavadocTextElement" value="page1 &lt;--> page2 &lt;--> user form &lt;--> signup form &lt;--> last signup user"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncWiresPagesTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test SyncWires across multiple pages"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testSyncAcrossPages" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests a single page that have multiple InputTextFields on them"/>
        <fragments xsi:type="md:JavadocTextElement" value="for a sync wire: when one field changes, the others"/>
        <fragments xsi:type="md:JavadocTextElement" value="should as well."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncWiresProperties">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Testing FileDomainObjects synchronisation with InputForms."/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;code>"/>
      <fragments xsi:type="md:JavadocTextElement" value="Page target"/>
      <fragments xsi:type="md:JavadocTextElement" value="InputForm target form"/>
      <fragments xsi:type="md:JavadocTextElement" value="/InputTextField ..."/>
      <fragments xsi:type="md:JavadocTextElement" value="SyncWire to: properties"/>
      <fragments xsi:type="md:JavadocTextElement" value="FileDomainStore properties file [SyncWiresProperties.properties)"/>
      <fragments xsi:type="md:JavadocTextElement" value="/FileDomainObject properties"/>
      <fragments xsi:type="md:JavadocTextElement" value="/FileDomainAttribute ..."/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;/code>"/>
      <fragments xsi:type="md:JavadocTextElement" value="We expect that:"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;ol>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;li>Since the target form has no elements in it, they will be inferred"/>
      <fragments xsi:type="md:JavadocTextElement" value="from the sync wire ("/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.98/@methods.0"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=") &lt;/li>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;li>The .properties file is copied over to the output destination, and"/>
      <fragments xsi:type="md:JavadocTextElement" value="exists ("/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.98/@methods.1"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=")&lt;/li>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;li>The wire starts out with values derived from the properties file"/>
      <fragments xsi:type="md:JavadocTextElement" value="("/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.98/@methods.2"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=")&lt;/li>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;li>If we change a value in a field, it persists over sessions"/>
      <fragments xsi:type="md:JavadocTextElement" value="("/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.98/@methods.3"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=")&lt;/li>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;li>If we change a value in a field, it changes in the .properties file"/>
      <fragments xsi:type="md:JavadocTextElement" value="("/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.98/@methods.4"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=")&lt;/li>"/>
      <fragments xsi:type="md:JavadocTextElement" value="&lt;/ol>"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testFormInference" line="67">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since the target form has no elements in it, they will be inferred"/>
        <fragments xsi:type="md:JavadocTextElement" value="from the sync wire."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCopyProperties" line="86">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The .properties file is copied over to the output destination, and"/>
        <fragments xsi:type="md:JavadocTextElement" value="exists"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPropertiesInitial"/>
    <methods name="testPropertiesPersist"/>
    <methods name="testPropertiesChangeFile"/>
    <methods name="copyProperties" line="52">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Copy the properties file into the local project workspace."/>
      </javadocs>
      <javadocs name="@see"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_1" name="SyncWiresTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test SyncWires"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testSyncOnPage" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests a single page that have multiple InputTextFields on them"/>
        <fragments xsi:type="md:JavadocTextElement" value="for a sync wire: when one field changes, the others"/>
        <fragments xsi:type="md:JavadocTextElement" value="should as well."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="AllModel0_2CodegenTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Code generation tests: model version 0.2"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="ConditionWireFalse">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A simple ConditionWire test case, which is a condition that is always false. "/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="ConditionWireFalseServer">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A simple ConditionWire test case, which is a condition that is always false."/>
      <fragments xsi:type="md:JavadocTextElement" value="Except in this case, the condition isn't directly in the containing page. "/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="ReloadPage">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A really simple test case, checking that text field values"/>
      <fragments xsi:type="md:JavadocTextElement" value="persist over page reloads. "/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="Requirement1SyncWires">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests requirement 1: sync wires."/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" ../examples/requirements/1-sync_wires.iaml "/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="Requirement2StaticParams">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests requirement 2: static value parameters"/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" ../examples/requirements/2-static_params.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="Requirement3DynamicParams">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests requirement 3: dynamic value parameters"/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" ../examples/requirements/3-dynamic_params.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="Requirement4DynamicSources">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests requirement 4: dynamic sources of elements"/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" ../examples/requirements/4-dynamic_sources.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="Requirement5Operations">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests requirement 5: operation composition"/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" ../examples/requirements/5-operations.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_2" name="Requirement6Conditions">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests requirement 6: simple conditions"/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" ../examples/requirements/4-dynamic_sources.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="AllModel0_3CodegenTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Code generation tests: model version 0.3"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="ButtonNavigate">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests the navigation of buttons."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testPage1to2" line="21">
      <javadocs name="@semantics">
        <fragments xsi:type="md:JavadocTextElement" value=" Button A "/>
        <fragments xsi:type="md:JavadocTagElement" name="@model">
          <fragments xsi:type="md:JavadocTextElement" value=" Button"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" renders on a page as a button. "/>
      </javadocs>
      <javadocs name="@semantics">
        <fragments xsi:type="md:JavadocTextElement" value=" EventTrigger A "/>
        <fragments xsi:type="md:JavadocTagElement" name="@model">
          <fragments xsi:type="md:JavadocTextElement" value=" Button"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" renders on "/>
        <fragments xsi:type="md:JavadocTagElement" name="@model">
          <fragments xsi:type="md:JavadocTextElement" value=" Page a page"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" as a button. "/>
      </javadocs>
      <javadocs name="@semantics">
        <fragments xsi:type="md:JavadocTextElement" value=" Page,InputTextField A multiple semantics link. "/>
      </javadocs>
      <javadocs name="@another">
        <fragments xsi:type="md:JavadocTextElement" value=" Also see "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="ButtonSetValue">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests buttons can set values."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testExplicitCopy" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Explicitly call the update operation."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testImplicitCopy" line="81">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Implicitly call the update operation."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="DatabaseWithInputForm">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test database connections that are wrapped with inputforms (or not)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="DataFlowTemporaryVariable">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests using temporary variables within operation modelling."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="FailingOperation">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests a failing operation."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="FailingOperationHandler">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests a failing operation that is contained with a"/>
      <fragments xsi:type="md:JavadocTextElement" value="navigate wire handler."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="FailingOperationHandlerSession">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests a failing operation within the 'access' of the session."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testNormalPage" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Normal pages work fine."/>
      </javadocs>
    </methods>
    <methods name="testFailingOperation" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If a Session fails on access, this is caught in the Session. "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="FailingOperationHandlerSessionContained">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A page will fail within a session, but the page does not have"/>
      <fragments xsi:type="md:JavadocTextElement" value="a fail handler. Only the containing session does, and we expect"/>
      <fragments xsi:type="md:JavadocTextElement" value="this session will handle the problem."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testFailingOperation" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If a Session fails on access, this is caught in the Session. "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="FailingOperationHandlerSessionMultiple">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests a failing operation within the 'access' of the session."/>
      <fragments xsi:type="md:JavadocTextElement" value="There is also another failing operation within the page, but"/>
      <fragments xsi:type="md:JavadocTextElement" value="we assert that the session has higher priority than the page, so"/>
      <fragments xsi:type="md:JavadocTextElement" value="we will be thrown the session error instead."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testNormalPage" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Normal pages work fine."/>
      </javadocs>
    </methods>
    <methods name="testFailingOperation" line="35">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If a Session fails on access, this is caught in the Session. "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="NewInstanceAttributeSession">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests creating new instances in sessions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testNewInstance" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test creating a new instance."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="NewInstanceAttributeSessionAutosave">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests creating new instances in sessions, but autosave is"/>
      <fragments xsi:type="md:JavadocTextElement" value="turned off."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testNewInstanceNoSave" line="45">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test creating a new instance that is not automatically saved."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNewInstanceSave" line="113">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test creating a new instance that is saved when"/>
        <fragments xsi:type="md:JavadocTextElement" value="we click the button."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="NewInstanceObject">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests creating new instances in the root."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testNewInstance" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test creating a new instance."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testOnlyOneNewInstance" line="98">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since this is contained within the page, there should only"/>
        <fragments xsi:type="md:JavadocTextElement" value="be one instance created."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="NewInstanceObjectAutosave">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests creating new instances in the root, but autosave is"/>
      <fragments xsi:type="md:JavadocTextElement" value="turned off."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testNewInstanceNoSave" line="45">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test creating a new instance that is not saved."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNewInstanceSave" line="96">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test creating a new instance, that is saved when we click "/>
        <fragments xsi:type="md:JavadocTextElement" value="the save button."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="PropertiesFileWithInputForm">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test properties files that are wrapped with inputforms (or not)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectField">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting only one field from any property."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDatabase" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure the database contains the expected data."/>
      </javadocs>
    </methods>
    <methods name="testSelectInstant" line="53">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Let's not try and reload/restart the web application yet;"/>
        <fragments xsi:type="md:JavadocTextElement" value="let's just access the database straight away."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelect" line="83">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test attribute instances, even over page reloads and"/>
        <fragments xsi:type="md:JavadocTextElement" value="session restarts."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldExplicit">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting an explicit query (no arguments)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldFromDynamicObject">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting only one field from any property."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testSelectDefault" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the default dynamic query parameter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectDynamic" line="97">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test changing the value of the parameter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldFromDynamicQuery">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting only one field from any property."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testSelectDefault" line="46">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the default dynamic query parameter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectDynamic" line="99">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test changing the value of the parameter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectMissing" line="163">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test changing the field value to something that doesn't exist"/>
        <fragments xsi:type="md:JavadocTextElement" value="in the database."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldFromDynamicQueryAutosave">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting only one field from any property, but"/>
      <fragments xsi:type="md:JavadocTextElement" value="the property has &quot;autosave&quot; set to false, so it does not save"/>
      <fragments xsi:type="md:JavadocTextElement" value="unless we call &quot;save&quot; operation on it."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getDatabaseName" line="30">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Override this method so we can try and do instrumentation/code"/>
        <fragments xsi:type="md:JavadocTextElement" value="coverage."/>
        <fragments xsi:type="md:JavadocTextElement" value="Unfortunately this doesn't work yet, because it appears the runtime"/>
        <fragments xsi:type="md:JavadocTextElement" value="test environment uses pre-compiled templates. We need some way to"/>
        <fragments xsi:type="md:JavadocTextElement" value="reload the templates manually, but this is too much work."/>
        <fragments xsi:type="md:JavadocTextElement" value="So, instead we will use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" to"/>
        <fragments xsi:type="md:JavadocTextElement" value="manually instrument the code."/>
      </javadocs>
      <javadocs name="@see"/>
    </methods>
    <methods name="testSelectDefaultNoSave" line="86">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Selecting the default value."/>
        <fragments xsi:type="md:JavadocTextElement" value="Check that it doesn't automatically save when we change it."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectDefaultSave" line="139">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Selecting the default value."/>
        <fragments xsi:type="md:JavadocTextElement" value="Check that it saves when we click the &quot;save&quot; button."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectDynamicNoSave" line="199">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Change the value of the parameter."/>
        <fragments xsi:type="md:JavadocTextElement" value="Check that it doesn't automatically save when we change it."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectDynamicSave" line="264">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Change the value of the parameter."/>
        <fragments xsi:type="md:JavadocTextElement" value="Check that it saves when we click the &quot;save&quot; button."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldFromObject">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting only one field from any property."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDatabase" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure the database contains the expected data."/>
      </javadocs>
    </methods>
    <methods name="testSelect" line="53">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test attribute instances, even over page reloads and"/>
        <fragments xsi:type="md:JavadocTextElement" value="session restarts."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldFromObjectQuery">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting a field using a query."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDatabase" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure the database contains the expected data."/>
      </javadocs>
    </methods>
    <methods name="testSelect" line="54">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test attribute instances, even over page reloads and"/>
        <fragments xsi:type="md:JavadocTextElement" value="session restarts."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectFieldQuery">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting a field using a query."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDatabase" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure the database contains the expected data."/>
      </javadocs>
    </methods>
    <methods name="testSelect" line="54">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test attribute instances, even over page reloads and"/>
        <fragments xsi:type="md:JavadocTextElement" value="session restarts."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectMissing">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting an initial value that doesn't exist"/>
      <fragments xsi:type="md:JavadocTextElement" value="in the database throws an error."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SelectMissingExpected">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests instances: Selecting an initial value that doesn't exist"/>
      <fragments xsi:type="md:JavadocTextElement" value="in the database throws an error, but we expect this error"/>
      <fragments xsi:type="md:JavadocTextElement" value="will occur, and catch it accordingly."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SessionInit">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests sessions initialisation (&quot;init&quot; event)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SessionSinglePage">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests sessions: an element on a single page."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SessionSyncInSession">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests sessions: sync wires within a session"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SessionSyncWires">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests sessions: sync wires across session boundaries."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="SessionSyncWiresMultiple">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests sessions: sync wires across session boundaries, with multiple"/>
      <fragments xsi:type="md:JavadocTextElement" value="pages involved."/>
      <fragments xsi:type="md:JavadocTextElement" value="page1 &lt;--> page2 &lt;-- [ --> page3 &lt;--> page4 &lt;--> page5 ]"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_3" name="TestProgressMonitor">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="If an exception is thrown in the code generation templates,"/>
      <fragments xsi:type="md:JavadocTextElement" value="we should catch it."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDisplaysProgress" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that when an exception is thrown, operation halts. "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="AbstractDefaultRoleUserLoginTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Adds additional database initialisation to set up permissions and"/>
      <fragments xsi:type="md:JavadocTextElement" value="'default role'."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="AbstractUserLoginTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Helper methods for setting up a database, and automatically logging into,"/>
      <fragments xsi:type="md:JavadocTextElement" value="an application protected with a LoginHandler."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="doStandardLoginAs" line="42">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Begin the application using "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.1"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=","/>
        <fragments xsi:type="md:JavadocTextElement" value="and then go to the &quot;login&quot; page and attempt to login with the"/>
        <fragments xsi:type="md:JavadocTextElement" value="specified e-mail and password."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method does not check whether the login was"/>
        <fragments xsi:type="md:JavadocTextElement" value="successful or not."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.2"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap file"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;em>Continue&lt;/em> the application using "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.3"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=","/>
        <fragments xsi:type="md:JavadocTextElement" value="and then go to the &quot;login&quot; page and attempt to login with the"/>
        <fragments xsi:type="md:JavadocTextElement" value="specified e-mail and password."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method does not check whether the login was"/>
        <fragments xsi:type="md:JavadocTextElement" value="successful or not."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.2"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap file"/>
      </javadocs>
    </methods>
    <methods name="beginAtSitemapThenPage"/>
    <methods name="actualDoStandardLoginAs" line="87">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Actually do the login."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.0"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.0"/>
      </javadocs>
    </methods>
    <methods name="gotoSitemapThenPage"/>
    <methods name="doStandardLoginAsIgnore" line="64">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;em>Continue&lt;/em> the application using "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.3"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=","/>
        <fragments xsi:type="md:JavadocTextElement" value="and then go to the &quot;login&quot; page and attempt to login with the"/>
        <fragments xsi:type="md:JavadocTextElement" value="specified e-mail and password."/>
        <fragments xsi:type="md:JavadocTextElement" value="Ignore what the current text fields contents are."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method does not check whether the login was"/>
        <fragments xsi:type="md:JavadocTextElement" value="successful or not."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.2"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap file"/>
      </javadocs>
    </methods>
    <methods name="actualDoStandardLoginAsIgnore" line="107">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Actually do the login, but ignore what the login fields used to say."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.0"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.0"/>
      </javadocs>
    </methods>
    <methods name="testCorrectDatabase" line="142">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that we have created the correct database in"/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.142/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="; i.e. check that no more"/>
        <fragments xsi:type="md:JavadocTextElement" value="than one database exists in the output folder"/>
        <fragments xsi:type="md:JavadocTextElement" value="after visiting the home page."/>
      </javadocs>
    </methods>
    <methods name="getDatabaseName"/>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="AllModel0_4CodegenTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Code generation tests: model version 0.4"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="DomainInheritance">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test the code generation of domain inheritance."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHome" line="79">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Just visiting the home page should not create a problem."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPerson" line="89">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Select person: name = 'Test User'."/>
        <fragments xsi:type="md:JavadocTextElement" value="This should work without any major problems because it is a"/>
        <fragments xsi:type="md:JavadocTextElement" value="standard query on the root object of the heirarchy."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testStudent" line="104">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Select student: enrolled = 'yesterday'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testTeacherById" line="120">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Select teacher: id = 24"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDoctoral" line="145">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Select doctoral: qualification = 'bsc' and degree = 'science'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedDatabase" line="172">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the contents of the database tables, if they were not"/>
        <fragments xsi:type="md:JavadocTextElement" value="created by "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.144/@methods.6"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="initialiseDatabase"/>
    <methods name="getGeneratedSQL" line="222">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the SQL used to create the table named tableName."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="assertContains" line="239">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given text contains the given needle."/>
      </javadocs>
    </methods>
    <methods name="assertNotContains" line="246">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given text does not contains the given needle."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="DomainInheritanceEditing">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test the code generation of domain inheritance"/>
      <fragments xsi:type="md:JavadocTextElement" value="when editing. In particular, this test case does"/>
      <fragments xsi:type="md:JavadocTextElement" value="not set up an initial database."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHome" line="25">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Just visiting the home page should not create a problem."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPersonError" line="35">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since the initial database is empty,"/>
        <fragments xsi:type="md:JavadocTextElement" value="we cannot visit Person."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testStudentError" line="51">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since the initial database is empty,"/>
        <fragments xsi:type="md:JavadocTextElement" value="we cannot visit Student."/>
        <fragments xsi:type="md:JavadocTextElement" value="Select student: enrolled = 'yesterday'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreatePerson" line="67">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We create a new Person; we can then view this"/>
        <fragments xsi:type="md:JavadocTextElement" value="Person."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreatePersonInvalid" line="95">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We create a new person, but it does not"/>
        <fragments xsi:type="md:JavadocTextElement" value="have the correct name, so we cannot view it"/>
        <fragments xsi:type="md:JavadocTextElement" value="without an error."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateStudent" line="126">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We create a new Student; but without explicitly"/>
        <fragments xsi:type="md:JavadocTextElement" value="saving the new instance, we cannot view it"/>
        <fragments xsi:type="md:JavadocTextElement" value="until it is saved."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateDoctoral" line="190">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can create a Doctoral and view it."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="checkDoctoralForm" line="235">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="A specific Doctoral instance we are checking for."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateDoctoralSession" line="262">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we create a new Doctoral, we can reset the session"/>
        <fragments xsi:type="md:JavadocTextElement" value="and create a new Doctoral student."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInvalidSession" line="310">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we set an invalid session property, then we will get"/>
        <fragments xsi:type="md:JavadocTextElement" value="an informative message when we try to create a new "/>
        <fragments xsi:type="md:JavadocTextElement" value="Doctoral object."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="setSession" line="343">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Set a session variable. Uses the &quot;set_session.php&quot; script generated."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="JoinSplitClientSide">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A JoinNode executing on the client-side."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Initially the three fields are empty."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testButton" line="46">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Press the button to start the operation, which should"/>
        <fragments xsi:type="md:JavadocTextElement" value="set all of the values."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="JoinSplitServerSide">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A JoinNode executing on the server-side."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="This operation is executed as soon as we hit the page, so"/>
        <fragments xsi:type="md:JavadocTextElement" value="the field values should exist already."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="LoginHandlerInstance">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test a Login Handler in a Session, where the login handler"/>
      <fragments xsi:type="md:JavadocTextElement" value="is authenticating against a domain object instance."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHasLoginPage" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login page."/>
      </javadocs>
    </methods>
    <methods name="testHasHomePage" line="59">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a home page."/>
      </javadocs>
    </methods>
    <methods name="testHasCurrentUserPage" line="75">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a current user page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLoginSuccesfulPage" line="91">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login successful page [generated], that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLogoutPage" line="107">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a logout page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
        <fragments xsi:type="md:JavadocTextElement" value="Normally the user wouldn't see the &quot;logout&quot; link, but we should"/>
        <fragments xsi:type="md:JavadocTextElement" value="check that if they access it manually without being authenticated,"/>
        <fragments xsi:type="md:JavadocTextElement" value="that an error is thrown."/>
      </javadocs>
    </methods>
    <methods name="testCantAccessSecurePageWithoutSession" line="134">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can't access the view key page without first"/>
        <fragments xsi:type="md:JavadocTextElement" value="logging in. It should redirect us to the login page."/>
      </javadocs>
    </methods>
    <methods name="testCanLoginLogoutFromSitemap" line="154">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can login; and then we can logout by going through the"/>
        <fragments xsi:type="md:JavadocTextElement" value="sitemap (since our model doesn't have a link to logout yet.)"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheck2" line="186">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the page to make sure we are the right user;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheck3" line="231">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the page to make sure we are the right user;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testChangeName" line="275">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Once we can login, we can change our name."/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidLogin" line="332">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that we are actually comparing against the database"/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutComplete" line="354">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we login, and then log out, we can not access"/>
        <fragments xsi:type="md:JavadocTextElement" value="the target page again."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="LoginHandlerInstanceComplete">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test a Login Handler in a Session, where the login handler"/>
      <fragments xsi:type="md:JavadocTextElement" value="is authenticating against a domain object instance."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHasLoginPage" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login page."/>
      </javadocs>
    </methods>
    <methods name="testHasHomePage" line="59">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a home page."/>
      </javadocs>
    </methods>
    <methods name="testHasCurrentUserPage" line="75">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a current user page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLoginSuccesfulPage" line="91">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login successful page [generated], that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLogoutPage" line="107">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a logout page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
        <fragments xsi:type="md:JavadocTextElement" value="Normally the user wouldn't see the &quot;logout&quot; link, but we should"/>
        <fragments xsi:type="md:JavadocTextElement" value="check that if they access it manually without being authenticated,"/>
        <fragments xsi:type="md:JavadocTextElement" value="that an error is thrown."/>
      </javadocs>
    </methods>
    <methods name="testCantAccessSecurePageWithoutSession" line="134">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can't access the view key page without first"/>
        <fragments xsi:type="md:JavadocTextElement" value="logging in. It should redirect us to the login page."/>
      </javadocs>
    </methods>
    <methods name="testCanLoginLogoutFromSitemap" line="154">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can login; and then we can logout by going through the"/>
        <fragments xsi:type="md:JavadocTextElement" value="sitemap (since our model doesn't have a link to logout yet.)"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheck2" line="190">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the page to make sure we are the right user;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheck3" line="233">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the page to make sure we are the right user;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testChangeName" line="274">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Once we can login, we can change our name."/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidLogin" line="332">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that we are actually comparing against the database"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="LoginHandlerInstanceMultiple">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test a Login Handler in a Session, where the login handler"/>
      <fragments xsi:type="md:JavadocTextElement" value="is authenticating against a domain object instance."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHasLoginPage" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login page."/>
      </javadocs>
    </methods>
    <methods name="testHasHomePage" line="59">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a home page."/>
      </javadocs>
    </methods>
    <methods name="testHasCurrentUserPage" line="75">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a current user page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLoginSuccesfulPage" line="91">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a login successful page [generated], that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
      </javadocs>
    </methods>
    <methods name="testHasLogoutPage" line="107">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The site should have a logout page, that presents a problem (since"/>
        <fragments xsi:type="md:JavadocTextElement" value="we're not yet authenticated)."/>
        <fragments xsi:type="md:JavadocTextElement" value="Normally the user wouldn't see the &quot;logout&quot; link, but we should"/>
        <fragments xsi:type="md:JavadocTextElement" value="check that if they access it manually without being authenticated,"/>
        <fragments xsi:type="md:JavadocTextElement" value="that an error is thrown."/>
      </javadocs>
    </methods>
    <methods name="testCantAccessSecurePageWithoutSession" line="134">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can't access the view key page without first"/>
        <fragments xsi:type="md:JavadocTextElement" value="logging in. It should redirect us to the login page."/>
      </javadocs>
    </methods>
    <methods name="testCanLoginLogoutFromSitemap" line="154">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can login; and then we can logout by going through the"/>
        <fragments xsi:type="md:JavadocTextElement" value="sitemap (since our model doesn't have a link to logout yet.)"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheck2" line="190">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the page to make sure we are the right user;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testLoginLogoutCheck3" line="238">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We login;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We check the page to make sure we are the right user;"/>
        <fragments xsi:type="md:JavadocTextElement" value="We navigate to it again to check it's still there;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Then we logout."/>
      </javadocs>
    </methods>
    <methods name="testChangeName" line="286">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Once we can login, we can change our name."/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidLogin" line="355">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that we are actually comparing against the database"/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidLoginNoEmail" line="382">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that we are actually comparing against the database"/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidLoginNoPassword" line="405">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that we are actually comparing against the database"/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidCombination" line="429">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can't get into the site with an invalid combination."/>
      </javadocs>
    </methods>
    <methods name="testTryInvalidReverse" line="458">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we switch the values around, we shouldn't be able to"/>
        <fragments xsi:type="md:JavadocTextElement" value="get in either."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="LoginHandlerUser">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test Login Handler [type=user]."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInitialAccess" line="36">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can't access the login handler protected page"/>
        <fragments xsi:type="md:JavadocTextElement" value="without logging in."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLogin" line="53">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Try logging in, and then accessing the "/>
        <fragments xsi:type="md:JavadocTextElement" value="protected page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="NewInstanceWithoutId">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="If a domain object instance is created through a New Instance wire"/>
      <fragments xsi:type="md:JavadocTextElement" value="without the DomainObject having an 'id' element created, then"/>
      <fragments xsi:type="md:JavadocTextElement" value="an 'id' element should automatically be created and the"/>
      <fragments xsi:type="md:JavadocTextElement" value="instance can be edited."/>
      <fragments xsi:type="md:JavadocTextElement" value="Since this DomainObjectInstance is stored in a page, there"/>
      <fragments xsi:type="md:JavadocTextElement" value="is only ever one instance of the object created in the application."/>
      <fragments xsi:type="md:JavadocTextElement" value="Tests issue 65."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testCanAccessContainerPage" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We should be able to access the page normally."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="QueryParameterAsParameter">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="We can use a QueryParameter as a Parameter to a SelectWire, in order"/>
      <fragments xsi:type="md:JavadocTextElement" value="to select an instance from a domain store."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testDefault" line="41">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="By default, it will select ID = 1."/>
      </javadocs>
    </methods>
    <methods name="testSelect" line="58">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Select a particular user."/>
      </javadocs>
    </methods>
    <methods name="testChangable" line="75">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can select a user, edit the fields, and reload"/>
        <fragments xsi:type="md:JavadocTextElement" value="with the same parameter, and the database object will not"/>
        <fragments xsi:type="md:JavadocTextElement" value="have changed (because autosave is false)"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="QueryParameterSet">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A QueryParameter connected to a text field via a SetWire."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Initially, the query is empty."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testQuery" line="33">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the page with the query set."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testMultiple" line="45">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Try visiting the page multiple times with different queries."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testChangeable" line="82">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can edit the target field and it will not change, because"/>
        <fragments xsi:type="md:JavadocTextElement" value="the value is taken from the query parameter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="SessionNewDomainInstance">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstances have a &quot;new&quot; operation, which when executed"/>
      <fragments xsi:type="md:JavadocTextElement" value="will discard the current instance and make a new instance as"/>
      <fragments xsi:type="md:JavadocTextElement" value="specified by the NewInstanceWire. "/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testFormExists" line="31">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that the form for editing exists and is"/>
        <fragments xsi:type="md:JavadocTextElement" value="accessible."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testEditWithinSession" line="50">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we make a change to the e-mail, it stays within the session."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNewButtonClearsField" line="93">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can press the new button which will clear the"/>
        <fragments xsi:type="md:JavadocTextElement" value="email field."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInitialNewButton" line="130">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can press the new button even when we haven't "/>
        <fragments xsi:type="md:JavadocTextElement" value="entered in any text."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testManyNewInstances" line="160">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can create many instances."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertNoEmailsExistInDatabase" line="200">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the database does not contain the given emails."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="assertEmailsExistInDatabase" line="216">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the database only contains one instance of each of these emails."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="SetWireChained">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Chaining of SetWires across both client and server."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testChainedSuccessive" line="54">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the SetWires in successive order."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testChainedSkip" line="93">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the SetWires in a different order."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="SetWireClient">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A SetWire operating on a client."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testSetSourceTarget" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that setting 'source' will set 'target'."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="SetWireRemote">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="SetWires operating on a remote object."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSetSourceTarget" line="39">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that setting 'source' will set 'target'."/>
      </javadocs>
    </methods>
    <methods name="testSetTargetNotSource" line="55">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that setting 'target' will not set 'source'."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="SetWireSync">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="SetWires connecting to SyncWires."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSetSync" line="41">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Set 'source' to a value should set the other fields."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSyncNoSet" line="61">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Set 'sync1' to a value should not set the 'source'"/>
        <fragments xsi:type="md:JavadocTextElement" value="field, but set 'sync2' (since they're connected with"/>
        <fragments xsi:type="md:JavadocTextElement" value="SyncWires)"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="SetWireSyncChained">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="SetWires connecting to SyncWires operating over multiple pages,"/>
      <fragments xsi:type="md:JavadocTextElement" value="both client and server."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="25">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSuccessive" line="48">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Set a value and check each page in succession."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testRandomly" line="72">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Set a value and check the pages randomly."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSyncNotSet" line="96">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Setting only the SyncWire does not change the SetWire."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserCreateRoles">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="We can create new users and assign them roles."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLoginExists" line="31">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Because the Session does not have a LoginHandler,"/>
        <fragments xsi:type="md:JavadocTextElement" value="one is created automatically, so a login page exists."/>
      </javadocs>
    </methods>
    <methods name="testUser" line="40">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNewUserDoesNotExist" line="55">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The user that we will create does not exist in"/>
        <fragments xsi:type="md:JavadocTextElement" value="the database already."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateRole" line="66">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We create a new user, then use it to login."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserModifyRoles">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="We can create new users and assign them roles, and"/>
      <fragments xsi:type="md:JavadocTextElement" value="assign and remove roles and permissions dynamically "/>
      <fragments xsi:type="md:JavadocTextElement" value="at runtime."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="34">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNewUserDoesNotExist" line="58">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The user that we will create does not exist in"/>
        <fragments xsi:type="md:JavadocTextElement" value="the database already."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="createRole" line="73">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We can create a new user, and use it to login."/>
        <fragments xsi:type="md:JavadocTextElement" value="Because the new UserInstance is an instance of 'Default Role',"/>
        <fragments xsi:type="md:JavadocTextElement" value="it should automatically have the 'Default Role' permissions."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testWithoutRole1" line="111">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Without adding 'Role 1' to the user, we cannot access"/>
        <fragments xsi:type="md:JavadocTextElement" value="the secure page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="createAddRole1" line="135">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Once created, we can add 'role 1' which can then"/>
        <fragments xsi:type="md:JavadocTextElement" value="be used to access the page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateAddRole1Logout" line="156">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Once we have 'role 1', we can log out, log"/>
        <fragments xsi:type="md:JavadocTextElement" value="back in, and the role persists."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateAddRole1CannotAccess2" line="181">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we add 'role 2', we still can't access a page"/>
        <fragments xsi:type="md:JavadocTextElement" value="that requires 'role 1'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="createAddPermission" line="222">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Once created, we can add 'permission 1' which can then"/>
        <fragments xsi:type="md:JavadocTextElement" value="be used to access the page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateInheritedPermission" line="251">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we add 'role 2', we automatically gain inherited"/>
        <fragments xsi:type="md:JavadocTextElement" value="permissions."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="createManyPermissions" line="274">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we create a user with all these permissions, we can"/>
        <fragments xsi:type="md:JavadocTextElement" value="access all of the pages."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateManyPermissionsLogout" line="303">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we create a user with all these permissions, we can"/>
        <fragments xsi:type="md:JavadocTextElement" value="access all of the pages, even after logging out."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCreateManyPermissionsRemove" line="332">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we create a user with all these permissions, and"/>
        <fragments xsi:type="md:JavadocTextElement" value="then remove them all, we can no longer access all pages."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserMultiplePermissions">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A User which has a role containing both permissions"/>
      <fragments xsi:type="md:JavadocTextElement" value="can access a page that requires"/>
      <fragments xsi:type="md:JavadocTextElement" value="both permissions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="39">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="48">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAccessTarget" line="63">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we do log in properly, we can access the target page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserMultiplePermissionsAndRoles">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Try the 'AND' constraint, which requires both 'a"/>
      <fragments xsi:type="md:JavadocTextElement" value="permission' and 'default role'."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="47">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'; works ('default role' provides 'a permission')"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAnotherRole" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'another role'; doesn't work"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testBothRoles" line="73">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'both role'; doesn't work ('both role' does"/>
        <fragments xsi:type="md:JavadocTextElement" value="not extend 'default role')"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserMultiplePermissionsOr">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Try the 'OR' constraint, which lets us have any"/>
      <fragments xsi:type="md:JavadocTextElement" value="of the required permissions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="47">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAnotherRole" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'another role'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testBothRoles" line="73">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'both role'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserPermissions">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="The access control requires 'a permission'."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="31">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Permission."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="46">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'; works, because it has the Permission"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAnotherRole" line="59">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'another role'; doesn't work"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserPermissionsPage">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="The access control requires 'a different permission', and"/>
      <fragments xsi:type="md:JavadocTextElement" value="the control is placed on a page, not a session."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="25">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="34">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="52">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'another role'; works"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAnotherRole" line="65">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'; doesn't work"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testBothRoles" line="82">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'both roles'; works"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserPermissionsRecursive">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="If we place one access control in a session, and another"/>
      <fragments xsi:type="md:JavadocTextElement" value="access control in the contained page, then &lt;em>both&lt;/em>"/>
      <fragments xsi:type="md:JavadocTextElement" value="of these access controls must be satisfied in order to"/>
      <fragments xsi:type="md:JavadocTextElement" value="provide access"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="27">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="36">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="51">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'; fails"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRoleUnrelated" line="68">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role' allows us to access 'unrelated'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAnotherRole" line="81">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'another role'; fails"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testBothRoles" line="94">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'both roles'; works"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserRoleExtends">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Roles can extend each other, in which case they gain all"/>
      <fragments xsi:type="md:JavadocTextElement" value="of their extended permissions. 'target' requires"/>
      <fragments xsi:type="md:JavadocTextElement" value="'inherited permission'."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="33">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="48">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'; passes, because it has the inherited permission"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAnotherRole" line="61">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'another role'; passes, because it directly contains the inherited permission"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserRoles">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Roles-based access control. 'default' is required."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="24">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="33">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="48">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'default role'; passes"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.model0_4" name="UserRolesLoginHandler">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="We explicitly define the login handler and the roles "/>
      <fragments xsi:type="md:JavadocTextElement" value="required."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="25">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the initial state of the application."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUser" line="34">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot access the protected page as a User"/>
        <fragments xsi:type="md:JavadocTextElement" value="because it does not have the appropriate Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRole" line="49">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log in as 'Registered User'; passes"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.oaw" name="AllOawTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for openArchitectureWare-style tests."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.oaw" name="ChecksTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test that the checks.chk files throw errors."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="loadAndCodegenWithFail" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Calls "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.173/@methods.1"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=", but it is expected"/>
        <fragments xsi:type="md:JavadocTextElement" value="that this will fail with an AssertionFailedError."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The model file to load."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.173/@methods.1"/>
      </javadocs>
    </methods>
    <methods name="loadAndCodegen"/>
    <methods name="hasStatusMatch" line="39">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Checks that the given status has the given error message."/>
        <fragments xsi:type="md:JavadocTextElement" value="Parses through MultiStatuses."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The status to check"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" A string that should be contained in a status message (not case-sensitive)"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" true if the status, or one of its children, contains the message"/>
      </javadocs>
    </methods>
    <methods name="assertStatusMatches" line="64">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given status has the given error message."/>
        <fragments xsi:type="md:JavadocTextElement" value="Parses through MultiStatuses."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The status to check"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" A string that should be contained in a status message (not case-sensitive)"/>
      </javadocs>
    </methods>
    <methods name="testNoPages" line="75">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test a web application with no pages."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.client" name="AllClientRuntimeTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for the runtime library (client-side)"/>
    </javadocs>
    <javadocs name="@see"/>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="16">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.client" name="ComparisonFunctions">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Checks comparison functions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testEmailAddressMatch" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests emailAddressMatch()"/>
      </javadocs>
    </methods>
    <methods name="testXpathMatch" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests xpathMatch()"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.client" name="HelperFunctions">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Checks helper functions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testStoreCookie" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests createCookie(), readCookie()"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.client" name="JavascriptCodegenTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Allows for the execution of client-side Javascript from the"/>
      <fragments xsi:type="md:JavadocTextElement" value="server. (Mostly a big hack.)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="assertJavascriptResult" line="57">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Evaluate the given script and assert that it returns the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="result. The result must be a string."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" pre-init code"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="executeJavascript" line="66">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Execute the given Javascript. Each call to this method"/>
        <fragments xsi:type="md:JavadocTextElement" value="executes in a separate instance; so, if passing variables, "/>
        <fragments xsi:type="md:JavadocTextElement" value="an entire script must be provided in the parameter."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The Javascript code to execute"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.client" name="JavascriptMethodsTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test the wrapper methods in "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocClassReference" reference="//@references.177"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testJavascriptWrapper" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that our JS wrapper actually works."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testMissingFunction" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check to see that if we access a function that doesn't exist,"/>
        <fragments xsi:type="md:JavadocTextElement" value="it fails."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.client" name="RuntimeLibraryVersionTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Checks that the published information in the runtime plugin"/>
      <fragments xsi:type="md:JavadocTextElement" value="matches the meta-information across our other plugins."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testIndexHtmlVersion" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The &lt;code>web/index.html&lt;/code> file in the runtime plugin"/>
        <fragments xsi:type="md:JavadocTextElement" value="should include the plugin version."/>
      </javadocs>
    </methods>
    <methods name="getPluginVersion" line="36">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the plugin version of the local tests plugin, loaded from "/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;code>MANIFEST.MF&lt;/code>."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The plugin version of the local tests plugin."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="assertContains" line="49">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given stream contains the given String."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.server" name="AllServerRuntimeTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for the runtime library (server-side)"/>
    </javadocs>
    <javadocs name="@see">
      <fragments xsi:type="md:JavadocClassReference" reference="//@references.174"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="16">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.server" name="ComparisonFunctions">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Checks comparison functions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testEmailAddressMatch" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests emailAddressMatch()"/>
      </javadocs>
    </methods>
    <methods name="testXpathMatch" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="tests xpathMatch()"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.server" name="PhpCodegenTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Allows for the execution of client-side Javascript from the"/>
      <fragments xsi:type="md:JavadocTextElement" value="server. (Mostly a big hack.)"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="assertPhpResult" line="57">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Evaluate the given script and assert that it returns the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="result. The result must be a string."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" pre-init code"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="executePhp" line="67">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Execute the given Javascript. Each call to this method"/>
        <fragments xsi:type="md:JavadocTextElement" value="executes in a separate instance; so, if passing variables, "/>
        <fragments xsi:type="md:JavadocTextElement" value="an entire script must be provided in the parameter."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The Javascript code to execute"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen.runtime.server" name="PhpMethodsTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test the wrapper methods in "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocClassReference" reference="//@references.182"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testPhpWrapper" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that our JS wrapper actually works."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testMissingFunction" line="23">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check to see that if we access a function that doesn't exist,"/>
        <fragments xsi:type="md:JavadocTextElement" value="it fails."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen" name="TestClientsideRuntimeLibrary">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Make sure that the client-side library (accessible by"/>
      <fragments xsi:type="md:JavadocTextElement" value="the URL "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link"/>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
      <fragments xsi:type="md:JavadocTextElement" value="If this test fails you may need to set up an alias to the runtime"/>
      <fragments xsi:type="md:JavadocTextElement" value="web directory in your httpd.conf. See installation instructions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testClientsideLibraryExists" line="19">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Try accessing the index.html page "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen" name="TestExceptionHandling">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="If an exception is thrown in the code generation templates,"/>
      <fragments xsi:type="md:JavadocTextElement" value="we should catch it."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testExceptionThrowing" line="16">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that when an exception is thrown, operation halts. "/>
      </javadocs>
    </methods>
    <methods name="testExceptionInvestgation" line="30">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="When an exception is thrown, we should be able to read it."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.codegen" name="TestIncludeLibraries">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Issue 81: Test that if we ask to include the runtime libraries"/>
      <fragments xsi:type="md:JavadocTextElement" value="explicitly, that they are included as normal. "/>
      <fragments xsi:type="md:JavadocTextElement" value="Otherwise tests everything in "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocClassReference" reference="//@references.92"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testRuntimeWasCopied" line="35">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the runtime files were actually copied over."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="CodegenTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Code generation-specific test cases."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="loadAndCodegen" line="80">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model and perform code generation."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.1"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The loaded InternetApplication"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model and perform code generation."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.1"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" should the source of rules be logged?"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The loaded InternetApplication"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model and perform code generation."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.1"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The loaded InternetApplication"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model and perform code generation."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.1"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" should the source of rules be logged?"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The loaded InternetApplication"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="loadAndInfer"/>
    <methods name="doCodegen" line="95">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the inferred model from "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.3"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" and"/>
        <fragments xsi:type="md:JavadocTextElement" value="do code generation with "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.4"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="getInferredModel"/>
    <methods name="doTransform"/>
    <methods name="tearDown" line="113">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="When we close the test case, we should also close the project."/>
      </javadocs>
    </methods>
    <methods name="waitForAjax" line="132">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Wait for all of the Ajax monitors to return."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="beginAtSitemapThenPage" line="315">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="Begin at the sitemap page, and then click on a particular page title."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method also checks that the destination page is the same as the"/>
        <fragments xsi:type="md:JavadocTextElement" value="target page; if not, use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;b>NOTE&lt;/b> that this resets the current WebClient context, which can cause"/>
        <fragments xsi:type="md:JavadocTextElement" value="the client to lose sessions/cookies. If this is undesirable,"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.8"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the page title to select from the sitemap"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the location of the sitemap file"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="Like "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=", except we expect"/>
        <fragments xsi:type="md:JavadocTextElement" value="to not end up at &lt;code>pageTitle&lt;/code>."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;b>NOTE&lt;/b> that this resets the current WebClient context, which can cause"/>
        <fragments xsi:type="md:JavadocTextElement" value="the client to lose sessions/cookies. If this is undesirable,"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.8"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the page title to select from the sitemap"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the expected destination page title, usually the same as pageTitle"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the location of the sitemap file"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Begin at the sitemap page, and then click on a particular page title."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method checks to see the destination page title is the same as"/>
        <fragments xsi:type="md:JavadocTextElement" value="expectedPageTitle."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;b>NOTE&lt;/b> that this resets the current WebClient context, which can cause"/>
        <fragments xsi:type="md:JavadocTextElement" value="the client to lose sessions/cookies. If this is undesirable,"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.8"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the location of the sitemap file"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the page title to select from the sitemap"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the expected destination page title, usually the same as pageTitle"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Begin at the sitemap page, and then click on a particular page title."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method checks to see the destination page title is the same as"/>
        <fragments xsi:type="md:JavadocTextElement" value="expectedPageTitle."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;b>NOTE&lt;/b> that this resets the current WebClient context, which can cause"/>
        <fragments xsi:type="md:JavadocTextElement" value="the client to lose sessions/cookies. If this is undesirable,"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.8"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the location of the sitemap file"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the page title to select from the sitemap"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the expected destination page title, usually the same as pageTitle"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" query string to append to the end of the destination, or null if none"/>
      </javadocs>
    </methods>
    <methods name="gotoSitemapThenPage" line="461">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Go to the sitemap page, and then click on a particular page title."/>
        <fragments xsi:type="md:JavadocTextElement" value="If you want the client to be reset (e.g. delete cookies, sessions),"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap url to start from"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the page text link to click"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the expected page title on the new page, if different from the page text link"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>Go to the sitemap page, and then click on a particular page title."/>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the target page has the same given title.&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>If you want the client to be reset (e.g. delete cookies, sessions),"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=".&lt;/p>"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap url to start from"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the page text link to click"/>
      </javadocs>
    </methods>
    <methods name="beginAtSitemapThenPageQuery" line="203">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Identical to "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=", except adds"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given query to the URL through "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.10"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.10"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="visitLinkWithQueryParameter" line="229">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Emulate clicking the given link, but add the given query string"/>
        <fragments xsi:type="md:JavadocTextElement" value="to the end of the request. This won't actually call any"/>
        <fragments xsi:type="md:JavadocTextElement" value="Javascript etc that is present on the given link."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Query to append, e.g. &lt;code>key=value&amp;amp;key2=value2&lt;/code>"/>
      </javadocs>
    </methods>
    <methods name="getSitemap" line="290">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the sitemap file, i.e. &lt;code>output/sitemap.html&lt;/code>"/>
      </javadocs>
    </methods>
    <methods name="beginAt" line="358">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We extend "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" to also set"/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" to true (to help Ajax navigation)."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;b>NOTE&lt;/b> that this resets the current WebClient context, which can cause"/>
        <fragments xsi:type="md:JavadocTextElement" value="the client to lose sessions/cookies. If this is undesirable,"/>
        <fragments xsi:type="md:JavadocTextElement" value="use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.8"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
    </methods>
    <methods name="gotoSitemapWithProblem" line="420">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Go to the given page, but assert that we do not arrive"/>
        <fragments xsi:type="md:JavadocTextElement" value="on the given page. Does not actually check "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.14"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertProblem" line="696">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: Assert that there has been a problem."/>
      </javadocs>
    </methods>
    <methods name="getLabelIDForText" line="505">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="We need some way of working out the label ID that contains "/>
        <fragments xsi:type="md:JavadocTextElement" value="a particular string."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="Previously, this would occasionally fail even though the"/>
        <fragments xsi:type="md:JavadocTextElement" value="label was directly in the page. It turns out this is because"/>
        <fragments xsi:type="md:JavadocTextElement" value="these two labels have different text() values:"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;ol>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;li>&lt;code>&amp;lt;a&amp;gt;b c&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;li>&lt;code>&amp;lt;a&amp;gt;b&lt;br>c&amp;lt;/a&amp;gt;&lt;/code>&lt;/li>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/ol>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="As a result, we wrap both &lt;code>text()&lt;/code> and the testing"/>
        <fragments xsi:type="md:JavadocTextElement" value="string with the &lt;code>normalize-string()&lt;/code> XPath function."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Extension of "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.15"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="; add an extra"/>
        <fragments xsi:type="md:JavadocTextElement" value="XPath condition for text that it should not contain, "/>
        <fragments xsi:type="md:JavadocTextElement" value="allowing us to select elements that might otherwise"/>
        <fragments xsi:type="md:JavadocTextElement" value="be erroneously matched."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="assertHasNotLabelIDForText" line="520">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there is no label on the page containing the given text."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="getPageTitle" line="536">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: Get the current page title."/>
      </javadocs>
    </methods>
    <methods name="assertEmpty" line="543">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the value in a given element is null/empty/zero."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the element"/>
      </javadocs>
    </methods>
    <methods name="assertNoRemoteCalls" line="555">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that no remote calls have occured when loading the currente"/>
        <fragments xsi:type="md:JavadocTextElement" value="page."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="assertLabeledFieldNotEquals" line="569">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that a given labelled field does NOT equal the current value."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertLabelNotPresent" line="586">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that a label with the given text is NOT present."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.15"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" label text to search for"/>
      </javadocs>
    </methods>
    <methods name="assertNotEquals" line="603">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given elements are NOT equal, i.e. !a.equals(b)."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="loadDatabaseQuery" line="617">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a database in the given database file, and execute"/>
        <fragments xsi:type="md:JavadocTextElement" value="a SQL query against it."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" database file to load, not resolved against the project"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" SQL query to execute"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the SQL result set"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="loadProperties" line="645">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a properties file in the testing workspace."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" properties file to load"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the loaded properties"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="reloadPage" line="669">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Reload a page (but do not lose the session information)."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.26"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap to reload at"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the destination page to load"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="restartSession" line="682">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Restart an entire session. Existing session information will"/>
        <fragments xsi:type="md:JavadocTextElement" value="be lost."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.187/@methods.25"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the sitemap to reload at"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the destination page to load"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertNoProblem" line="703">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: Assert that there has not been a problem."/>
      </javadocs>
    </methods>
    <methods name="clickLinkWithText" line="710">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We wrap the method to try and catch runtime exceptions"/>
        <fragments xsi:type="md:JavadocTextElement" value="from the PHP server-side code."/>
      </javadocs>
    </methods>
    <methods name="throwDebugInformation" line="734">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Throw a RuntimeException with the various information from the"/>
        <fragments xsi:type="md:JavadocTextElement" value="debug box (&lt;code>&amp;lt;div id=&quot;debug&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code>)"/>
        <fragments xsi:type="md:JavadocTextElement" value="for debugging purposes."/>
        <fragments xsi:type="md:JavadocTextElement" value="Also prints out the current source code."/>
      </javadocs>
    </methods>
    <methods name="submit" line="750">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Extend submit() to also wait for Ajax."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="DijkstraAlgorithm">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="An abstract representation of Djikstra's algorithm. It is up to"/>
      <fragments xsi:type="md:JavadocTextElement" value="subclasses to implement both the types involved, and the"/>
      <fragments xsi:type="md:JavadocTextElement" value="neighbours/weighting functions."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getEdges" line="27">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the edges (nodes) involved in this graph."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getInternalEdges" line="34">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Allows abstract supertypes to extend getInternalEdges() while"/>
        <fragments xsi:type="md:JavadocTextElement" value="leaving getEdges() abstract."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="dijkstra" line="44">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the shortest path distance between source and target."/>
        <fragments xsi:type="md:JavadocTextElement" value="Returns -1 if no path can be found."/>
        <fragments xsi:type="md:JavadocTextElement" value="The last path found is stored in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.188/@methods.3"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="getLastPath" line="187">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the last path used (as a string)."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="compilePath" line="104">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Compile the path from source to target."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="translateToString" line="127">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="You should override this method if you wish to change"/>
        <fragments xsi:type="md:JavadocTextElement" value="the output of the compiled path."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="distanceBetween" line="138">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The distance between two elements. By default, this is"/>
        <fragments xsi:type="md:JavadocTextElement" value="constant (1), but can be overridden where necessary."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getNeighbours" line="150">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the neighbours to a given edge. Subclasses"/>
        <fragments xsi:type="md:JavadocTextElement" value="must implement this method."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getInternalNeighbours" line="159">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Allows abstract supertypes to extend getInternalNeighbours() while"/>
        <fragments xsi:type="md:JavadocTextElement" value="leaving getNeighbours() abstract."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="smallestDistance" line="169">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Find the element in queue with the smallest distance."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.drools" name="AllDroolsTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for Drools rules."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.drools" name="DroolsPackageTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Issue 122: Check that each drools rule has a separate package declaration."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.drools" name="DroolsQueueTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="We want to check the sanity of Drools rules."/>
      <fragments xsi:type="md:JavadocTextElement" value="If we are going through the iterative process described in our"/>
      <fragments xsi:type="md:JavadocTextElement" value="paper (TODO) and have to add all the elements obtained in a queue,"/>
      <fragments xsi:type="md:JavadocTextElement" value="we want to make sure that the order of insertion of the queue"/>
      <fragments xsi:type="md:JavadocTextElement" value="does not modify the resulting output."/>
      <fragments xsi:type="md:JavadocTextElement" value="We achieve this by creating two separate rules which, if the"/>
      <fragments xsi:type="md:JavadocTextElement" value="queue order does matter will both fire, but if the order is not"/>
      <fragments xsi:type="md:JavadocTextElement" value="important neither of the rules will fire."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getRuleFiles" line="50">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the list of rule files used."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.191/@methods.1"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="addRuleFile"/>
    <methods name="loadResourceAsStream" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We need to extend this to use the testing classloader,"/>
        <fragments xsi:type="md:JavadocTextElement" value="not the drools plugin classloader."/>
      </javadocs>
    </methods>
    <methods name="testDroolsQueue" line="71">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that the order doesn't matter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDroolsQueueCount" line="105">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test to make sure elements are being created at the appropriate"/>
        <fragments xsi:type="md:JavadocTextElement" value="iterations."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.drools" name="DumpDroolsXmlTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Dump the XML involved in the rule bases."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testBasicParsing" line="45">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the parser to make sure that it works as expected."/>
        <fragments xsi:type="md:JavadocTextElement" value="Only on one line: insert(rw)"/>
      </javadocs>
    </methods>
    <methods name="testComplexParsing" line="76">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the parser to make sure that it works as expected."/>
        <fragments xsi:type="md:JavadocTextElement" value="Only on one line: insert(rw)"/>
      </javadocs>
    </methods>
    <methods name="getTextInNode" line="223">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the text within the given element."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="loadDocument" line="247">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document."/>
      </javadocs>
    </methods>
    <methods name="saveDocument" line="262">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Try saving an XML document."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="DroolsPerformanceTest">
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="test" line="31">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Gradually create bigger and bigger models for inference"/>
        <fragments xsi:type="md:JavadocTextElement" value="to work against."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="AllInferenceTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for code generation."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="16">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO split all of the inference tests into separate packages"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="ConditionWireFalse">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of ConditionWires when attached to SyncWires."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="ConditionWireFalseServer">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of ConditionWires when attached to SyncWires, and"/>
      <fragments xsi:type="md:JavadocTextElement" value="the conditions are server-side."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="ConditionWireXpath">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of the ConditionWires involved with dynamic xpath sets."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="ConditionWireXpathThreePages">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of the ConditionWires involved with dynamic xpath sets."/>
      <fragments xsi:type="md:JavadocTextElement" value="In particular, this test case looks into when we have an additional page, page3."/>
      <fragments xsi:type="md:JavadocTextElement" value="TODO reformat source code"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="DatabaseWithInputForm">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of database sources."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="DumpDroolsXml">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Dump the XML involved in the rule bases."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="myTestSampleRule" line="204">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the parsing for factory graph/k-graph of the given rule"/>
        <fragments xsi:type="md:JavadocTextElement" value="&quot;Create empty domain store&quot;."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="convertToStrings" line="234">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Convert a list of rule elements to an array of strings."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="assertStringMatches" line="248">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The given string should match the given 'expected' regexp"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" expected regular expression to match"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the string to consider"/>
      </javadocs>
    </methods>
    <methods name="parseSampleRule" line="258">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Parse the rule to get a set of logic-style outputs."/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO actually implement"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="parseInferredTerms" line="292">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="From an element, create InferredTerms."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="parseNodeSide" line="343">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Parse the given element &lt;rhs> or &lt;lhs> into the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="function list."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" keeps track of indexes for f(x, N)"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getTextInNode" line="660">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the text within the given element."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTerm" line="677">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTermFrom" line="692">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTermQuantifiedIdentifierRestriction" line="707">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
        <fragments xsi:type="md:JavadocTextElement" value="This rule might look like this:"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;pre>rule &quot;foo&quot;"/>
        <fragments xsi:type="md:JavadocTextElement" value="when"/>
        <fragments xsi:type="md:JavadocTextElement" value="b : DomainStore ( )"/>
        <fragments xsi:type="md:JavadocTextElement" value="a : InternetApplication ( name == &quot;test&quot;, eContainer = o.eContainer )&lt;/pre>"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTermNotExists" line="729">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTermRhs" line="744">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTermRhs2" line="759">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseInferredTermRhsIgnoresInsert" line="774">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseDumpDrools1Xml" line="840">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseDumpDrools2Xml" line="855">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
        <fragments xsi:type="md:JavadocTextElement" value="This one has 'or()' in it."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testParseDumpDrools3Xml" line="871">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inferred terms parsing directly."/>
        <fragments xsi:type="md:JavadocTextElement" value="This one has multiple element creations from the same elements."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="parseOutOtherVariables" line="891">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Add any variables used in function 'f' that are not 'compare'"/>
        <fragments xsi:type="md:JavadocTextElement" value="into the set 'otherVariables'"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" variable to compare with"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" function to iterate through"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" any variables in 'f' that are not 'compare' are added to here"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="removeNotExists" line="928">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Resolve any terms of 'notExists(x : foo(x))' in the body of rules"/>
        <fragments xsi:type="md:JavadocTextElement" value="by adding another term 'L1(...) &lt;- foo(x)', and replacing the"/>
        <fragments xsi:type="md:JavadocTextElement" value="original term with 'not(L1)'"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="toLatex" line="1043">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Compile the term to a Latex format"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Compile the term to a Latex format"/>
      </javadocs>
    </methods>
    <methods name="toString" line="1052">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create the format string."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="toLatexAnd" line="1069">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create the format string, in Latex."/>
        <fragments xsi:type="md:JavadocTextElement" value="Separate terms with \wedge."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="toLatexOr" line="1088">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create the format string, in Latex."/>
        <fragments xsi:type="md:JavadocTextElement" value="Separate terms with \vee."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="toLatexComma" line="1107">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create the format string, in Latex."/>
        <fragments xsi:type="md:JavadocTextElement" value="Separate terms with ','."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="Not" line="1171">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a new 'not' with the given function already in it."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="getVariables" line="1270">
      <javadocs name="@return"/>
    </methods>
    <methods name="newIdentifier" line="1303">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a new identifier. Returns elements in"/>
        <fragments xsi:type="md:JavadocTextElement" value="[x, x0, x1, x2, ...]"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="escapeLatex" line="1320">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Escape any special latex contents."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="newExistsIdentifier" line="1331">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a new identifier. Returns elements in"/>
        <fragments xsi:type="md:JavadocTextElement" value="[L0, L1, L2, ...]"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getFunctionTerm" line="1403">
      <javadocs name="@return"/>
    </methods>
    <methods name="testTermToStringFactoryFunction" line="1471">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that .toString() on inferred terms generates the correct"/>
        <fragments xsi:type="md:JavadocTextElement" value="output."/>
      </javadocs>
    </methods>
    <methods name="testTermToStringNotExists" line="1491">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that .toString() on inferred terms generates the correct"/>
        <fragments xsi:type="md:JavadocTextElement" value="output."/>
      </javadocs>
    </methods>
    <methods name="testCreatingFactoryGraph" line="1512">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the creation of a factory graph."/>
        <fragments xsi:type="md:JavadocTextElement" value="From the example in version4:"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; a(x) -> b(f(x))"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; b(x) -> c(f(x))"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; a(x), b(x) -> d(f(x))"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; b(x), &#xac;e(x) -> f(x)"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; f(x) -> g(f(x))"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; d(x) -> e(f(x))"/>
        <fragments xsi:type="md:JavadocTextElement" value="&#x2013; g(x) -> a(f(x)) "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="calculateFactoryLoops" line="1702">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Calculate the loops within a given graph."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="compilePath" line="1770">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We override compilePath to also create a copy of the"/>
        <fragments xsi:type="md:JavadocTextElement" value="path."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.200/@methods.35"/>
      </javadocs>
    </methods>
    <methods name="getLastPathElements" line="1799">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the last path called by "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.200/@methods.36"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
        <fragments xsi:type="md:JavadocTextElement" value="This path is compiled in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.200/@methods.34"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the last path found. this path may be empty."/>
      </javadocs>
    </methods>
    <methods name="dijkstra" line="1860">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We change something like:"/>
        <fragments xsi:type="md:JavadocTextElement" value="a -> b, c, d"/>
        <fragments xsi:type="md:JavadocTextElement" value="e, c -> a"/>
        <fragments xsi:type="md:JavadocTextElement" value="To:"/>
        <fragments xsi:type="md:JavadocTextElement" value="a -> b, c, d"/>
        <fragments xsi:type="md:JavadocTextElement" value="a' -> b, c, d"/>
        <fragments xsi:type="md:JavadocTextElement" value="e, c -> a"/>
        <fragments xsi:type="md:JavadocTextElement" value="And call dijkstra(a', a), rather than (a, a)."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getInternalEdges" line="1826">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Add the duplicate copy. We have to make a new list"/>
        <fragments xsi:type="md:JavadocTextElement" value="and place it in there, otherwise we will get a"/>
        <fragments xsi:type="md:JavadocTextElement" value="ConcurrentModificationException."/>
      </javadocs>
    </methods>
    <methods name="getInternalNeighbours" line="1840">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If we are the duplicate copy, add all of the edges"/>
        <fragments xsi:type="md:JavadocTextElement" value="of the original element"/>
      </javadocs>
    </methods>
    <methods name="makeCopy" line="1899">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We need to make a new element 'e' that"/>
        <fragments xsi:type="md:JavadocTextElement" value="definitely does not equal 'e'. It also cannot currently"/>
        <fragments xsi:type="md:JavadocTextElement" value="be stored within the edges."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="distanceBetween" line="3194">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We need to override it so we can link up to the"/>
        <fragments xsi:type="md:JavadocTextElement" value="copied source."/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO you may need to change this method to internalXXX"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We modify this to return a huge value for >=, and a small"/>
        <fragments xsi:type="md:JavadocTextElement" value="value for >, so hopefully we will prefer to find paths of"/>
        <fragments xsi:type="md:JavadocTextElement" value="> (which we are searching for)"/>
      </javadocs>
    </methods>
    <methods name="getName" line="1969">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Return the original node name."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="GraphLoop" line="1999">
      <javadocs name="@param"/>
    </methods>
    <methods name="formatNodeAsString" line="2006">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the value of this node as a string. Default"/>
        <fragments xsi:type="md:JavadocTextElement" value="uses toString()."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getLoopAsString" line="2051">
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@see"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the loop as a string, or null if no loop with this element was found"/>
      </javadocs>
    </methods>
    <methods name="GraphLoops" line="2044">
      <javadocs name="@param"/>
    </methods>
    <methods name="findNodeFor" line="2064">
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="calculate" line="2093">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Calculate all the nodes from the given term."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Calculate all the nodes from the given list of terms."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="investigateFunctionForPotentialFactoryFunctions" line="2322">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="In the given program in the given term, take the given function and find out all"/>
        <fragments xsi:type="md:JavadocTextElement" value="the factory functions f(x) that it may create."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Go through the entire program and look for terms that have the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="function in the body. Add all of the factory functions that this"/>
        <fragments xsi:type="md:JavadocTextElement" value="term creates, and return these."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the named function to consider against"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" a list of function names we have already considered. we need to populate this"/>
        <fragments xsi:type="md:JavadocTextElement" value="with the current function name, otherwise we could easily get in an infinite loop"/>
        <fragments xsi:type="md:JavadocTextElement" value="e.g. a(x) -> b(x), b(x) -> a(x). without a b(f(x)) this will loop forever."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="We're looking at an individual function."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="addEdges" line="2406">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Add all of the given nodes as edges."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="hasEdgeTo" line="2423">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Does this node have an edge to the given node name?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getEdges" line="2437">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all neighbours to this node."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getNode" line="2476">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the FactoryLoopNode with the given name, or"/>
        <fragments xsi:type="md:JavadocTextElement" value="null if it doesn't exist."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="convertFunctionsToNodes" line="2491">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Take all functions in the given list and add them"/>
        <fragments xsi:type="md:JavadocTextElement" value="as nodes to the currnet list, returning the nodes"/>
        <fragments xsi:type="md:JavadocTextElement" value="created."/>
        <fragments xsi:type="md:JavadocTextElement" value="Modifies the current list."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getNodeForFunction" line="2523">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the node for the given function, or null"/>
        <fragments xsi:type="md:JavadocTextElement" value="if none exists."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="containsNode" line="2534">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Does this list contain the given node name?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="findStratCycleRules" line="2546">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a graph of the stratification rules, and check for"/>
        <fragments xsi:type="md:JavadocTextElement" value="any cycles."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="addIntoMap" line="2607">
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="removeInsertedElements" line="2626">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Remove not(e) elements from the head that are asserted in the body."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="outputPrologStratification" line="2658">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create all the prolog rules that are necessary to work out"/>
        <fragments xsi:type="md:JavadocTextElement" value="stratification."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="uniqueElementsInRule" line="2780">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get a list of all the unique elements mentioned in both the"/>
        <fragments xsi:type="md:JavadocTextElement" value="head and body of this rule."/>
      </javadocs>
    </methods>
    <methods name="undercase" line="2807">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Change MyFoo to my_foo"/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="removeGeneratedElements" line="2905">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Cycle through generated elements in the body"/>
        <fragments xsi:type="md:JavadocTextElement" value="and remove those that are not(..) in the head."/>
        <fragments xsi:type="md:JavadocTextElement" value="i.e. &quot;A, not(B) -> B&quot; should be simplified to"/>
        <fragments xsi:type="md:JavadocTextElement" value="&quot;A -> B&quot;"/>
        <fragments xsi:type="md:JavadocTextElement" value="Currently only concerns itself with element names"/>
      </javadocs>
    </methods>
    <methods name="investigateLogic" line="2947">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Investigate XML rules to calculate their logic formulas."/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO move all of this into separate classes (if necessary)"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="loadProperties" line="3019">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a properties file."/>
      </javadocs>
    </methods>
    <methods name="loadDocument" line="3035">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document."/>
      </javadocs>
    </methods>
    <methods name="loadInlineDocument" line="3050">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document from an XML snippet."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="saveDocument" line="3063">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Try saving an XML document."/>
      </javadocs>
    </methods>
    <methods name="assertFileExists" line="3089">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given file exists."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given file exists."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="readFile" line="3098">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Read in a file into a string."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if an IO exception occurs"/>
      </javadocs>
    </methods>
    <methods name="cloneList" line="3184">
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="compilePathList" line="3214">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Compile the last path, but as a list of elements, rather than"/>
        <fragments xsi:type="md:JavadocTextElement" value="a string."/>
      </javadocs>
    </methods>
    <methods name="StratReason" line="3283">
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="StratificationCycleCheckerWithExplanation" line="3301">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Default constructor. Add the explanations for each graph map."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="getReason" line="3353">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Search the given list for an element from 'from' to 'to',"/>
        <fragments xsi:type="md:JavadocTextElement" value="and provide the reason provided."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" null if no reason found."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="EclipseInheritanceInterface">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A test case that implements this can not only be"/>
      <fragments xsi:type="md:JavadocTextElement" value="run as a normal inference test case, but in the"/>
      <fragments xsi:type="md:JavadocTextElement" value="Eclipse tests can be used to check models at"/>
      <fragments xsi:type="md:JavadocTextElement" value="two stages: "/>
      <fragments xsi:type="md:JavadocTextElement" value="1. The initial model is correct"/>
      <fragments xsi:type="md:JavadocTextElement" value="2. The final inferred model is correct"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getTestClass" line="21">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the current class."/>
      </javadocs>
    </methods>
    <methods name="testInitial" line="26">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure the model is loaded properly."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultInference" line="36">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Complete model inference."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="checkNotInferredKnowledge" line="46">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inference of the initial model."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="checkInferredKnowledge" line="55">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the inference of the final inferred model."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="InferenceTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test case methods for asserting the results of model inference."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="assertHasApplicationElementProperty" line="88">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="ApplicationElementProperty."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="ApplicationElementProperty."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoApplicationElementProperty" line="110">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="ApplicationElementProperty."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="ApplicationElementProperty."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasOperation" line="121">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Operation."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasCompositeOperation" line="131">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="CompositeOperation."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasCondition" line="141">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Condition."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasCompositeCondition" line="151">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="CompositeCondition."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasEventTrigger" line="161">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="EventTrigger."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDomainAttribute" line="183">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttribute."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttribute."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDomainAttributeInstance" line="216">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttributeInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttributeInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttributeInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoDomainAttributeInstance" line="249">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttributeInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttributeInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainAttributeInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDomainObject" line="280">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObject."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObject."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObject."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasUserInstance" line="300">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="UserInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="UserInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDomainObjectInstance" line="330">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoDomainObjectInstance" line="350">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstance."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDomainStore" line="360">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DomainStore."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasInputTextField" line="371">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="InputTextField."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoInputTextField" line="381">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="InputTextField."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasInputForm" line="391">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="InputForm."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasButton" line="401">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Button."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasUserStore" line="411">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="UserStore."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasRole" line="421">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Role."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasAccessControlHandler" line="431">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="AccessControlHandler."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasPage" line="451">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Page."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Page."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoPage" line="469">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Page."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Page."/>
      </javadocs>
    </methods>
    <methods name="assertHasLoginHandler" line="477">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="LoginHandler."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoLoginHandler" line="487">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element does not contain the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="LoginHandler."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasSession" line="497">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Session."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasStaticValue" line="517">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="StaticValue."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="StaticValue."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDynamicApplicationElementSet" line="527">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DynamicApplicationElementSet."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDecisionOperation" line="537">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="DecisionOperation."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasSplitNode" line="547">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="SplitNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasJoinNode" line="557">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="JoinNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasStartNode" line="577">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="StartNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="StartNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasFinishNode" line="597">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="FinishNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="FinishNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoFinishNode" line="607">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element &lt;em>does not&lt;/em> contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="FinishNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasCancelNode" line="627">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="CancelNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="CancelNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoCancelNode" line="637">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element &lt;em>does not&lt;/em> contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="CancelNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasOperationCallNode" line="657">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="OperationCallNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="OperationCallNode."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasParameter" line="667">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element contains the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="Parameter."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasSyncWire" line="677">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one bidirectional SyncWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasParameterWire" line="687">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional ParameterWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasExtendsWire" line="698">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional ExtendsWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasRequiresWire" line="709">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional RequiresWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasRunInstanceWire" line="720">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional RunInstanceWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasSetWire" line="731">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional SetWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNoSetWire" line="742">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert &lt;em>no&lt;/em> unidirectional SetWire exists between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasSelectWire" line="752">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional SelectWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNewInstanceWire" line="763">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional NewInstanceWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasConditionWire" line="774">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional ConditionWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasNavigateWire" line="785">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional NavigateWire between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasExecutionEdge" line="796">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional ExecutionEdge between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="assertHasDataFlowEdge" line="820">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert there exists only one unidirectional DataFlowEdge between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" The element found"/>
      </javadocs>
    </methods>
    <methods name="hasDataFlowEdge" line="844">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Does &lt;em>exactly one&lt;/em> DataFlowEdge exist between the given elements?"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" true if exactly one edge exists, or false otherwise"/>
      </javadocs>
    </methods>
    <methods name="assertHasOne" line="864">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For unnamed objects that are only differentiated by xsi:type, we need"/>
        <fragments xsi:type="md:JavadocTextElement" value="a special method to find that only one of these types exist."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="assertHasWireFromTo" line="916">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there exists &lt;em>only one&lt;/em> wire of the given type from the 'from' element"/>
        <fragments xsi:type="md:JavadocTextElement" value="to the 'to' element."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.202/@methods.54"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire edge found"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there exists &lt;em>only one&lt;/em> wire of the given type from the 'from' element"/>
        <fragments xsi:type="md:JavadocTextElement" value="to the 'to' element, with the given name; the wire must implement NamedElement."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the name of the NamedElement wire"/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="InferenceTestCaseWithConditionWires">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference-specific test cases that deal with ConditionWires and"/>
      <fragments xsi:type="md:JavadocTextElement" value="ParameterWires."/>
      <fragments xsi:type="md:JavadocTextElement" value="TODO merge into "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocClassReference" reference="//@references.202"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="assertHasParameterWireCount" line="33">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Ensure there are only a given number of parameters for a "/>
        <fragments xsi:type="md:JavadocTextElement" value="ConditionWire."/>
        <fragments xsi:type="md:JavadocTextElement" value="If it fails, it prints out to stderr the ParameterWires found."/>
      </javadocs>
    </methods>
    <methods name="assertNotParameterWire" line="59">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that there are no ConditionWires from cond to root, with"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given page as a Parameter"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="getConditionWireFromToWithParameters" line="171">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Checks to see that a given wire has exactly two ConditionWires;"/>
        <fragments xsi:type="md:JavadocTextElement" value="one is from page1, the other is from page2."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Checks to see that a given wire has exactly two ConditionWires;"/>
        <fragments xsi:type="md:JavadocTextElement" value="one is from page1, the other is from page2."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Checks to see that a given wire has exactly one ConditionWire;"/>
        <fragments xsi:type="md:JavadocTextElement" value="one is from page1."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="hasWireFromTo" line="216">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="TODO move into higher-level test case"/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="LoadModelTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests loading the model."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_3" name="AllModel0_3InferenceTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All inference tests for model 0.3."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_3" name="InputFormInstanceMapping">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests automatic mapping of SyncWires between InputForms and"/>
      <fragments xsi:type="md:JavadocTextElement" value="DomainObjectInstances"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="checkNotInferredKnowledge" line="28">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that the correct new knowledge has not yet been added."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="checkInferredKnowledge" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test that the correct new knowledge has been added."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_3" name="NewInstanceWireMapping">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests automatic mapping of NewInstanceWires from DomainObjects"/>
      <fragments xsi:type="md:JavadocTextElement" value="to DomainObjectInstances through NewInstanceWires"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_3" name="PropertiesFileMapping">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests automatic mapping of DomainStores when connected to"/>
      <fragments xsi:type="md:JavadocTextElement" value="Properties files"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="AllModel0_4InferenceTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All inference tests for model 0.3."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="DomainInheritance">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference of access control handlers."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="27">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPerson" line="86">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;get person&quot; page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testStudent" line="110">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;get student&quot; page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testTeacher" line="139">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;get teacher&quot; page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDoctoral" line="171">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;get doctoral&quot; page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPersonInstance" line="212">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;selected person&quot; instance"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testStudentInstance" line="235">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;selected student&quot; instance."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testTeacherInstance" line="264">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;selected teacher&quot; instance."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDoctoralInstance" line="299">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of the &quot;selected doctoral&quot; instance."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertExtends" line="349">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given attribute extends another attribute contained in a DomainObject "/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInferredModelIsValid" line="369">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The inferred model should be valid."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="DomainInheritanceEditing">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference of access control handlers."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="38">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectWireNoExistsCheck" line="53">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If a text field is being initialised with an attribute"/>
        <fragments xsi:type="md:JavadocTextElement" value="stored in an object from a SelectWire, it should &lt;em>not&lt;/em> include"/>
        <fragments xsi:type="md:JavadocTextElement" value="an 'exists?' condition check."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNewInstanceWireExistsCheck" line="106">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If a text field is being initialised with an attribute"/>
        <fragments xsi:type="md:JavadocTextElement" value="stored in an object from a NewInstanceWire, it should include"/>
        <fragments xsi:type="md:JavadocTextElement" value="an 'exists?' condition check."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testExistsConditionCompositiion" line="160">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the composition of the 'exists?' composite condition."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInferredModelIsValid" line="198">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The inferred model should be valid."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="DomainInstanceSaveOperation">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Issue 62: Inference on non-autosave DomainObjectInstance does not create 'save' operation"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="GeneratedPrimaryKey">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="DomainObjects that do not define a DomainAttribute with a primary"/>
      <fragments xsi:type="md:JavadocTextElement" value="key should get one generated automatically."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="LoginHandlerInstance">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test case for inference of login handler[type=domain object]"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="41">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInferredWires" line="79">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the generated navigate wires."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInferredAttributes" line="109">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the attributes inference."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInferredSelect" line="133">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the generation of the select wire."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedLogoutPage" line="181">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="A default logout page should be created; this will"/>
        <fragments xsi:type="md:JavadocTextElement" value="redirect to the actual logout page in our case."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testChecks" line="208">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the generation of event triggers and check operations."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLogoutOperation" line="232">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The logout page should execute the 'do logout' operation"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLoginPage" line="255">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="A default login page should be created."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCheckInstanceOperation" line="301">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the 'check instance' operation actually contains"/>
        <fragments xsi:type="md:JavadocTextElement" value="some nodes."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="checkOperationCallsExists" line="323">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method - the given operation should use an operation"/>
        <fragments xsi:type="md:JavadocTextElement" value="call node to call the 'exists?' operation"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCheckInstanceOperationCall" line="355">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The 'check key' operation should use an operation call node"/>
        <fragments xsi:type="md:JavadocTextElement" value="to call the 'exists?' operation"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDoLoginOperationCall" line="374">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The 'do login' operation should use an operation call node"/>
        <fragments xsi:type="md:JavadocTextElement" value="to call the 'exists?' operation"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCheckInstanceFailWire" line="393">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The 'check instance' operation should have a fail wire that"/>
        <fragments xsi:type="md:JavadocTextElement" value="navigates to the login page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNoCheckKeyOperation" line="418">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should not be a 'check key' operation generated in"/>
        <fragments xsi:type="md:JavadocTextElement" value="the session, since we are a LoginHandler[type=instance]."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="LoginHandlerInstanceMultiple">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test case for inference of login handler[type=domain object] when"/>
      <fragments xsi:type="md:JavadocTextElement" value="we have multiple parameters. Most of the logic is handled sufficiently"/>
      <fragments xsi:type="md:JavadocTextElement" value="in "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocClassReference" reference="//@references.148"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value=", so this test case is checking"/>
      <fragments xsi:type="md:JavadocTextElement" value="special cases for multiple parameters."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testOnlyOneSelectWire" line="70">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Even though we have multiple parameters, there should only be one SelectWire."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="LoginHandlerKey">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test case for inference of login handler[type=secret key]"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="40">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testChecks" line="96">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the generation of event triggers and check operations."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLogoutOperation" line="120">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The logout page should execute the 'do logout' operation"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedLogoutPage" line="143">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="A default logout page should be created; this will"/>
        <fragments xsi:type="md:JavadocTextElement" value="only redirect to the actual logout page in our case."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSessionProperties" line="169">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The session should only have one ApplicationElementProperty."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLoginPage" line="195">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="A default login page should be created."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCheckInstanceFailWire" line="241">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The 'check key' operation should have a fail wire that"/>
        <fragments xsi:type="md:JavadocTextElement" value="navigates to the login page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNoCheckInstanceOperation" line="266">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should not be a 'check instance' operation generated in"/>
        <fragments xsi:type="md:JavadocTextElement" value="the session, since we are a LoginHandler[type=key]."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="SelectWireAttributeInference">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Issue 68: SelectWire does not synchronise Attributes between Object and Instance"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="SessionNewDomainInstance">
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="31">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAttributeEditEvent" line="69">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The DomainAttributeInstance should have an 'edit' event which"/>
        <fragments xsi:type="md:JavadocTextElement" value="executes the 'update' operation of the relevant field in the form."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="SetWireClient">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference of SetWires."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="26">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSourceToTarget" line="53">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should be elements generated from source to target."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testTargetToSource" line="88">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Target should not have elements generated to source."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="UserModifyRoles">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference of the &quot;user modify roles&quot; codegen test case."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="42">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testContentsOfDoLoginOperation" line="55">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the 'do login' operation is actually created"/>
        <fragments xsi:type="md:JavadocTextElement" value="properly."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDoLoginRunIncomingParameters" line="122">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The RunInstanceWire that runs the 'do login' operation should get the"/>
        <fragments xsi:type="md:JavadocTextElement" value="parameters from the input form."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNoSetWireBetweenProperties" line="158">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Before r1110, the 'email' text field and 'current email' session"/>
        <fragments xsi:type="md:JavadocTextElement" value="properties were set with SetWires (a lazy approach). This should"/>
        <fragments xsi:type="md:JavadocTextElement" value="not be the case; they should be set with the 'do login' operation. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testContentsOfDoLogoutOperation" line="195">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check that the 'do logout' operation is actually created"/>
        <fragments xsi:type="md:JavadocTextElement" value="properly."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="UserRoles">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference of access control handlers."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="41">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultUserRole" line="84">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should be a default role 'User' generated"/>
        <fragments xsi:type="md:JavadocTextElement" value="in the user store."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedLoginHandler" line="100">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since there is an Access Control in the session, and no login handler,"/>
        <fragments xsi:type="md:JavadocTextElement" value="a login handler for the session should be created."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testHandlerGeneratedUserInstance" line="128">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The Login Handler[type=user] should generate a "/>
        <fragments xsi:type="md:JavadocTextElement" value="UserInstance in the session. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testHandlerGeneratedUserParameter" line="154">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The Login Handler[type=user] should have an incoming"/>
        <fragments xsi:type="md:JavadocTextElement" value="parameter of 'User' - the default role/user instance"/>
        <fragments xsi:type="md:JavadocTextElement" value="to generate."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testHandlerGeneratedCheckInstance" line="177">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The Login Handler[type=user] should generate a "/>
        <fragments xsi:type="md:JavadocTextElement" value="&quot;check instance&quot; operation "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedAccessEventSession" line="194">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>Since there is an Access Control in the session, the 'access'"/>
        <fragments xsi:type="md:JavadocTextElement" value="event on the target session should connect to a 'check permissions'"/>
        <fragments xsi:type="md:JavadocTextElement" value="operation owned by the access control.&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>TODO Write up semantics: The events/operations are stored as part of the page, instead"/>
        <fragments xsi:type="md:JavadocTextElement" value="of the session, to allow for easy extensibility. For example,"/>
        <fragments xsi:type="md:JavadocTextElement" value="particular pages could redirect to different targets when the"/>
        <fragments xsi:type="md:JavadocTextElement" value="authentication check fails, or we could extend only certain"/>
        <fragments xsi:type="md:JavadocTextElement" value="pages with additional check constraints.&lt;/p>"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedAccessEventNotPage" line="232">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should not be a 'permissions check' in the target session;"/>
        <fragments xsi:type="md:JavadocTextElement" value="this is part of the page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAccessEventHasCheckUserOperation" line="259">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Even though the ACH adds a run wire from 'access' to 'check permissions',"/>
        <fragments xsi:type="md:JavadocTextElement" value="there should still be a 'check user' operation as well."/>
        <fragments xsi:type="md:JavadocTextElement" value="(i.e. an event trigger can have two outgoing run wires.)"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGeneratedPermissionCheckOperationContents" line="291">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the generated contents of the 'permission check' operation"/>
        <fragments xsi:type="md:JavadocTextElement" value="in the target page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testHasIncomingUserInstance" line="334">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The AccessControlHandler should have an incoming UserInstance"/>
        <fragments xsi:type="md:JavadocTextElement" value="as a parameter."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDefaultRoleExtendsGuest" line="352">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The 'default role' should extend 'User'"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGuestAttributes" line="371">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="'User' should have 'email' and 'password' attributes; these"/>
        <fragments xsi:type="md:JavadocTextElement" value="are the default requirements for Users"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInheritanceOfAttributes" line="390">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since Default Role extends User, the attributes of User"/>
        <fragments xsi:type="md:JavadocTextElement" value="will be reproduced in Default Role."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testInheritancePrimaryKeys" line="427">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Since Default Role extends User, there will be an"/>
        <fragments xsi:type="md:JavadocTextElement" value="ID in Default Role which will be the index/foreign key"/>
        <fragments xsi:type="md:JavadocTextElement" value="of Guest."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLoginFormAttributes" line="459">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The generated login form on the generated 'login' page "/>
        <fragments xsi:type="md:JavadocTextElement" value="should have 'email' and 'password' fields."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSessionProperties" line="484">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The session should have 'email' and 'password' properties."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUserInstanceSelectWires" line="505">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The UserInstance should have a SelectWire from the given Role"/>
        <fragments xsi:type="md:JavadocTextElement" value="with the current property values as parameters."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference.model0_4" name="UserRolesLoginHandler">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Inference of access control handlers."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testInitial" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the initial model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testSelectWires" line="50">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should only be one select wire created."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPrimaryKeyNotInputField" line="70">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The &quot;generated primary key&quot; of the Registered User/User should"/>
        <fragments xsi:type="md:JavadocTextElement" value="not be a parameter in the input form."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testStoredSessionProperties" line="91">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should only be 'current password' and 'current email'"/>
        <fragments xsi:type="md:JavadocTextElement" value="stored in the session."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUserInstanceSelectWire" line="112">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The UserInstance select query should not contain anything"/>
        <fragments xsi:type="md:JavadocTextElement" value="about generated primary keys."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="PropertiesFileWithInputForm">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of database sources."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="Requirement4DynamicSources">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A simple test, testing OawCodeGenerator#resolveDynamicSet, and the"/>
      <fragments xsi:type="md:JavadocTextElement" value="query given in the requirements model. This test makes sure the"/>
      <fragments xsi:type="md:JavadocTextElement" value="XPath resolver is working correctly with the given model."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testUnrelatedSyncWires" line="51">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure the right parameters are being given to the SyncWires"/>
        <fragments xsi:type="md:JavadocTextElement" value="connected between page1 and the 'unrelated' page."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SavedRuleSources">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests that inference can keep track of the rule source of generated"/>
      <fragments xsi:type="md:JavadocTextElement" value="elements."/>
      <fragments xsi:type="md:JavadocTextElement" value="Based on ConditionWireXpath."/>
    </javadocs>
    <javadocs name="@see">
      <fragments xsi:type="md:JavadocClassReference" reference="//@references.197"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SelectField">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="SyncWires connected to DomainAttributeInstances should call"/>
      <fragments xsi:type="md:JavadocTextElement" value="the appropriate operations in the DomainAttributeInstance"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SelectFieldFromObject">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="SyncWires connected to DomainAttributeInstances should call"/>
      <fragments xsi:type="md:JavadocTextElement" value="the appropriate operations in the DomainAttributeInstance"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SessionSyncWires">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests sessions: sync wires across session boundaries."/>
      <fragments xsi:type="md:JavadocTextElement" value="In particular, the session should create an &quot;init&quot; event, connected to"/>
      <fragments xsi:type="md:JavadocTextElement" value="the &quot;update&quot; operation, from the SyncWire that was connected."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SyncFieldDomainAttribute">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of sync wires between a domain attribute"/>
      <fragments xsi:type="md:JavadocTextElement" value="and a single text field."/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" SyncFieldDomainAttribute.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SyncFormDomainObject">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of an InputForm with a DomainObject."/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" SyncFormDomainObject.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SyncWireProperties">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of sync wires between a .properties"/>
      <fragments xsi:type="md:JavadocTextElement" value="FileDomainStore and an InputForm."/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" SyncWireProperties.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testAllInitialises" line="145">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the contents of each init operation, used to"/>
        <fragments xsi:type="md:JavadocTextElement" value="initialise the field at access."/>
        <fragments xsi:type="md:JavadocTextElement" value="Same as "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getNodeWithName" line="202">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get a NamedElement with a given name, or fail."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="SyncWireTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests inference of sync wires."/>
      <fragments xsi:type="md:JavadocTextElement" value="The model test case is of name1&lt;-->name2&lt;-->name3&lt;-->name4."/>
    </javadocs>
    <javadocs name="@model">
      <fragments xsi:type="md:JavadocTextElement" value=" models/test-sync.iaml"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.inference" name="ValidInferenceTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A valid inference test case also checks that the inferred result"/>
      <fragments xsi:type="md:JavadocTextElement" value="is valid according to OAW checks."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getInferenceClass" line="14">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the class on which to load and infer against."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.233/@methods.1"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="loadAndInfer"/>
    <methods name="testInferredModelIsValid" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The inferred model should be valid."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.233/@methods.0"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.model" name="AllModelTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for model quality."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.model" name="ContainmentTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Issue 96."/>
      <fragments xsi:type="md:JavadocTextElement" value="Some model elements can contain the same type in different structures; for"/>
      <fragments xsi:type="md:JavadocTextElement" value="example, some model elements may be able to store a DomainAttribute as"/>
      <fragments xsi:type="md:JavadocTextElement" value="either part of the 'attributes' or 'children' containment feature."/>
      <fragments xsi:type="md:JavadocTextElement" value="This test case checks to see that this is not possible."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getAllClasses" line="32">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the classes in this project, linked to their"/>
        <fragments xsi:type="md:JavadocTextElement" value="factories."/>
        <fragments xsi:type="md:JavadocTextElement" value="Does not return abstract classes;"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testContainment" line="65">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Iterate over all elements twice, checking to see they"/>
        <fragments xsi:type="md:JavadocTextElement" value="can only belong to one containment feature."/>
      </javadocs>
    </methods>
    <methods name="testClassesArentEmpty" line="106">
      <javadocs>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.235/@methods.0"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" should not be empty."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.model" name="ModelTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Test model elements"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getFactoryMap" line="45">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>Set up a map of all available packages to their"/>
        <fragments xsi:type="md:JavadocTextElement" value="respective factories.&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>By going over all elements and finding the factories later,"/>
        <fragments xsi:type="md:JavadocTextElement" value="as opposed to iterating over existing factories, we will make"/>
        <fragments xsi:type="md:JavadocTextElement" value="sure that any new packages will throw an assertion rather"/>
        <fragments xsi:type="md:JavadocTextElement" value="than being silently ignored.&lt;/p>"/>
      </javadocs>
    </methods>
    <methods name="testGeneratedIDs" line="69">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Ensure that all elements in this model, that"/>
        <fragments xsi:type="md:JavadocTextElement" value="can have generated IDs, are generated."/>
      </javadocs>
    </methods>
    <methods name="iterateGeneratedIDs" line="82">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Iterate over a package, checking its elements"/>
        <fragments xsi:type="md:JavadocTextElement" value="for generated IDs."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertNotEqual" line="130">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given values are not the same."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertNotEmpty" line="143">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that a given string is not null or empty."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Message to display if assertion fails"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The string to test"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="ModelInferenceTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Assorted methods to assist with loading and inferring models."/>
    </javadocs>
    <javadocs name="@see">
      <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.0"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="loadAndInfer" line="276">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model file and perform inference on it."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Automagically load the model file (.iaml) for this given"/>
        <fragments xsi:type="md:JavadocTextElement" value="test class, and do inference."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.1"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The test class to load a model for."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the loaded and inferred InternetApplication"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load the model file (.iaml) for this given"/>
        <fragments xsi:type="md:JavadocTextElement" value="test class, and do inference."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.1"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The test class to load a model for."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Log the rule source of inserted elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the loaded and inferred InternetApplication"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model file and perform inference on it."/>
      </javadocs>
      <javadocs name="@see"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Log the rule source of inserted elements."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model file and perform inference on it."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method also sees if we have got a cached model; if"/>
        <fragments xsi:type="md:JavadocTextElement" value="not, it loads and infers it, then saves the inferred model"/>
        <fragments xsi:type="md:JavadocTextElement" value="location to the cache."/>
      </javadocs>
      <javadocs name="@see"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Log the rule source of inserted elements."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="loadAndCodegen"/>
    <methods name="loadDirectly" line="165">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Automagically load the model file (.iaml) for this given"/>
        <fragments xsi:type="md:JavadocTextElement" value="test class, but don't do inference."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.0"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The test class to load a model for."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the loaded and inferred InternetApplication"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Automagically load the model file (.iaml) for this given"/>
        <fragments xsi:type="md:JavadocTextElement" value="test class, but don't do inference."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.4"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.5"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The test class to load a model for."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Log the rule source of inserted elements."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the loaded and inferred InternetApplication"/>
      </javadocs>
    </methods>
    <methods name="getAbsolutePathRoot" line="111">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the absolute path root of the testing plugin in the"/>
        <fragments xsi:type="md:JavadocTextElement" value="current filesystem."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getModelFileForClass" line="125">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Automatically find the model file (.iaml) for the given class."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="loadModelDirectly" line="344">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a model file directly."/>
        <fragments xsi:type="md:JavadocTextElement" value="Assumes that it will only contain one element (and tests this with JUnit)."/>
      </javadocs>
    </methods>
    <methods name="createHandler" line="182">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create an "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" handler that can be used"/>
        <fragments xsi:type="md:JavadocTextElement" value="to modify the model."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getInferenceEngine" line="193">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>Create a new instance of the inference engine.&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>In this particular implementation, we extend the"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;code>create&lt;/code> method so we can keep a log of "/>
        <fragments xsi:type="md:JavadocTextElement" value="model elements generated in every step.&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;b>TODO&lt;/b> remove from final implementation."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="retrieve" line="331">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If the model cache reference does not exist, we load it through"/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@see"/>
    </methods>
    <methods name="query" line="357">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Perform an XPath-like query on an EMF object"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="dump" line="384">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: print out a list of objects"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: print out an objects"/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="queryOne" line="392">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: perform a query, but assert that there is only"/>
        <fragments xsi:type="md:JavadocTextElement" value="one result returned, and it is of type EObject"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertHasNone" line="419">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there are no results for the given XPath query."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the node on which to execute the XPath query"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the query to execute"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there are no results for the given XPath query with"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given type."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the node on which to execute the XPath query"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the query to execute"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the type to check for in the results"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertContainsNamedElement" line="438">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given list of elements contains a"/>
        <fragments xsi:type="md:JavadocTextElement" value="NamedElement with the given name and given generated status. "/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertGenerated" line="456">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element is generated."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertNotGenerated" line="465">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given element is not generated."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="saveInferredModel" line="474">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Save the changed, inferred model to a file for later reference."/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
      <javadocs name="@returns">
        <fragments xsi:type="md:JavadocTextElement" value=" the generated model file"/>
      </javadocs>
    </methods>
    <methods name="getWireFrom" line="880">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="It's not possible to do something like //iaml:wire[iaml:from='id']"/>
        <fragments xsi:type="md:JavadocTextElement" value="so we need to parse them manually?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or null"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="It's not possible to do something like //iaml:wire[iaml:from='id']"/>
        <fragments xsi:type="md:JavadocTextElement" value="so we need to parse them manually?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or null"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getWireFromTo" line="522">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="It's not possible to do something like //iaml:wire[iaml:from='id']"/>
        <fragments xsi:type="md:JavadocTextElement" value="so we need to parse them manually."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or null"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getWiresFromTo" line="561">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the wires connecting the two elements together of any"/>
        <fragments xsi:type="md:JavadocTextElement" value="class. Does not throw an error if there are no wires."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or throws an exception"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.19"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the wires connecting the two elements together of the"/>
        <fragments xsi:type="md:JavadocTextElement" value="given class. Does not throw an error if there are no wires."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or throws an exception"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertHasNoWiresFromTo" line="616">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there are no wires (contained in &lt;code>container//iaml:wires&lt;/code>)"/>
        <fragments xsi:type="md:JavadocTextElement" value="that connect the two given elements together."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that there are no wires (contained in &lt;code>container//iaml:wires&lt;/code>)"/>
        <fragments xsi:type="md:JavadocTextElement" value="that connect the two given elements together with the given wire class."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertHasWiresFromTo" line="636">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that only the given number of wires exist between"/>
        <fragments xsi:type="md:JavadocTextElement" value="the source and the target."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the found wires"/>
      </javadocs>
    </methods>
    <methods name="getWiresTo" line="718">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="It's not possible to do something like //iaml:wire[iaml:from='id']"/>
        <fragments xsi:type="md:JavadocTextElement" value="so we need to parse them manually."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or null"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all wires to the given element of the given EObject type."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getWiresFrom" line="731">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="It's not possible to do something like //iaml:wire[iaml:from='id']"/>
        <fragments xsi:type="md:JavadocTextElement" value="so we need to parse them manually."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or null"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all wires from the given element of the given EObject type."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="typeSelect" line="744">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all elements of the set which are instances of the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="type."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getWireBidirectional" line="761">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For bidirectional wires."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wire found or null"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getWiresBidirectional" line="800">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For bidirectional wires, get all wires connecting the"/>
        <fragments xsi:type="md:JavadocTextElement" value="two elements."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.26"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For bidirectional wires, get all wires connecting the"/>
        <fragments xsi:type="md:JavadocTextElement" value="two elements, with the given type."/>
      </javadocs>
    </methods>
    <methods name="assertHasWiresBidirectional" line="837">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that a given number of bidirectional wires"/>
        <fragments xsi:type="md:JavadocTextElement" value="occur between the two elements."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.21"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.26"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.27"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wires found"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that a given number of bidirectional wires"/>
        <fragments xsi:type="md:JavadocTextElement" value="occur between the two elements, with the given type."/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the wires found"/>
      </javadocs>
    </methods>
    <methods name="assertNoWireBidirectional" line="856">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that no given bidirectional wire exists."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.237/@methods.25"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="checkModelIsValid" line="903">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="When we infer a model, we could assert that it is valid"/>
        <fragments xsi:type="md:JavadocTextElement" value="according to the checks. Generally, this is already called when"/>
        <fragments xsi:type="md:JavadocTextElement" value="generating code from the inferred model."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertStatusIsOK" line="924">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the IStatus is ok."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if there was a Throwable in the IStatus"/>
      </javadocs>
    </methods>
    <methods name="safeName" line="953">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the &quot;safe name&quot; of the given element."/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO add a test case that makes sure this method is synchronised"/>
        <fragments xsi:type="md:JavadocTextElement" value="with the one in the codegen extensions. OR add the safeName()"/>
        <fragments xsi:type="md:JavadocTextElement" value="method to all elements in the model."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getInferredModel" line="967">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the file representing the saved post-inference model."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="ModelTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="The JET/Junit test framework now manages everything for you. It will"/>
      <fragments xsi:type="md:JavadocTextElement" value="automatically create empty projects to be compiled to."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="setUp" line="74">
      <javadocs name="@throws"/>
    </methods>
    <methods name="tearDown" line="90">
      <javadocs name="@throws"/>
    </methods>
    <methods name="createProject" line="109">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a new project in our testing environment,"/>
        <fragments xsi:type="md:JavadocTextElement" value="allowing our code generator to output there."/>
        <fragments xsi:type="md:JavadocTextElement" value="We can also copy files directly from our testing environment"/>
        <fragments xsi:type="md:JavadocTextElement" value="to this new project by using"/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.238/@methods.3"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.238/@methods.4"/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.238/@methods.3"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the created project"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="copyFileIntoWorkspace" line="453">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Copy a local file into the Eclipse workspace. Makes sure it doesn't"/>
        <fragments xsi:type="md:JavadocTextElement" value="already exist, and that it does exist once this method is completed."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the target file"/>
      </javadocs>
      <javadocs name="@throws"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Copy a local file into the Eclipse workspace. Makes sure it doesn't"/>
        <fragments xsi:type="md:JavadocTextElement" value="already exist, and that it does exist once this method is completed."/>
        <fragments xsi:type="md:JavadocTextElement" value="This method also creates any necessary sub-folders recursively. "/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the target file"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getProjectName" line="149">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the project name which will be created, "/>
        <fragments xsi:type="md:JavadocTextElement" value="by default &quot;testing-&quot; + the className"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getTransformStatus" line="161">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Store the last IStatus of doTransform()."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.238/@methods.6"/>
      </javadocs>
    </methods>
    <methods name="doTransform" line="276">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Do the transformation and make sure it succeeded."/>
        <fragments xsi:type="md:JavadocTextElement" value="The result of the transformation is stored in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.238/@methods.5"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if it did not succeed"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Transform a model file into some code generated output. This currently contains the logic on"/>
        <fragments xsi:type="md:JavadocTextElement" value="which code generation solution to use."/>
      </javadocs>
    </methods>
    <methods name="loadFromCache" line="202">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The code generation has been cached previously; copy the "/>
        <fragments xsi:type="md:JavadocTextElement" value="cached code-generated files from this old project into our new project."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="updateCache" line="225">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Take the code generation results and load them into a cache"/>
        <fragments xsi:type="md:JavadocTextElement" value="for future reference."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="doTransformActual" line="247">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Do the transformation and make sure it succeeded."/>
        <fragments xsi:type="md:JavadocTextElement" value="The result of the transformation is stored in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.238/@methods.5"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO refactor this out into plugins"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if it did not succeed"/>
      </javadocs>
    </methods>
    <methods name="doTransformOAW" line="286">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Set up transformation for openArchitectureWare. In particular, copies the model file from the"/>
        <fragments xsi:type="md:JavadocTextElement" value="development platform to the runtime platform, because we cannot refer to models"/>
        <fragments xsi:type="md:JavadocTextElement" value="external to the runtime platform (all model inputs are prefixed with 'platform:/resource/')."/>
      </javadocs>
    </methods>
    <methods name="refreshProject" line="326">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Force a complete refresh of the entire project, and"/>
        <fragments xsi:type="md:JavadocTextElement" value="halt execution until it's completed."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="doTransformOAWWorkflow" line="364">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="Transform a filename using OpenArchitectureWare. It also forces"/>
        <fragments xsi:type="md:JavadocTextElement" value="a filesystem refresh of the particular project directory,"/>
        <fragments xsi:type="md:JavadocTextElement" value="and does not stop until the refresh is complete."/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="Sadly, we cannot refactor out the initialisation of the WorkflowRunner"/>
        <fragments xsi:type="md:JavadocTextElement" value="in OAW, because the WorkflowRunners are not designed to be run more than "/>
        <fragments xsi:type="md:JavadocTextElement" value="once per invoke() method:"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;pre>"/>
        <fragments xsi:type="md:JavadocTextElement" value="org.openarchitectureware.workflow.ConfigurationException: A default outlet is allready registered!"/>
        <fragments xsi:type="md:JavadocTextElement" value="at org.openarchitectureware.xpand2.output.OutputImpl.addOutlet(OutputImpl.java:49)"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/pre>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO refactor into CodegenTestCase"/>
      </javadocs>
    </methods>
    <methods name="getRuntimeProperties" line="418">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Generate the properties required for ICodeGenerator."/>
      </javadocs>
      <javadocs name="@see"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getProject" line="433">
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the project"/>
      </javadocs>
    </methods>
    <methods name="createFolderRecursively" line="480">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If the given argument is an IFolder, create it if it does not yet"/>
        <fragments xsi:type="md:JavadocTextElement" value="exist. This method will"/>
        <fragments xsi:type="md:JavadocTextElement" value="also create any parent IFolders if they need to be created first."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="assertGreaterEq" line="505">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: assert A >= B."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" expected value (B)"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" actual value (A)"/>
      </javadocs>
    </methods>
    <methods name="assertNotEqual" line="553">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: assert A != B"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" expected value (B)"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" actual value (A)"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: assert A != B"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" expected value (B)"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" actual value (A)"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: assert A != B"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" expected value"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" actual value"/>
      </javadocs>
    </methods>
    <methods name="assertEqualsOneOf" line="538">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given string is equal to one of the"/>
        <fragments xsi:type="md:JavadocTextElement" value="expected strings."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertClassIn" line="563">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert an instance of a class is in a given list."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" class to check"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" list of class instances"/>
      </javadocs>
    </methods>
    <methods name="assertClassNotIn" line="578">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert an instance of a class is not in a given list. "/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" class to check"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" list of class instances"/>
      </javadocs>
    </methods>
    <methods name="assertInstanceOf" line="592">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given object is of the given class or higher."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="hasElementById" line="628">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Does the given element ID exist?"/>
        <fragments xsi:type="md:JavadocTextElement" value="TODO move into JWebUnit."/>
      </javadocs>
    </methods>
    <methods name="hasXpathFirst" line="660">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first node result from an XPath query. Returns the "/>
        <fragments xsi:type="md:JavadocTextElement" value="node found, or null if none or more than one is found."/>
      </javadocs>
      <javadocs name="@returns">
        <fragments xsi:type="md:JavadocTextElement" value=" the found node, or null if none is found (or more than one is found)"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first node result from an XPath query. Returns the "/>
        <fragments xsi:type="md:JavadocTextElement" value="node found, or null if none or more than one is found."/>
      </javadocs>
      <javadocs name="@returns">
        <fragments xsi:type="md:JavadocTextElement" value=" the found node, or null if none is found (or more than one is found)"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="PhpExecutionTimeException">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="This exception is thrown if the testing framework"/>
      <fragments xsi:type="md:JavadocTextElement" value="identifies that the script execution failed due to"/>
      <fragments xsi:type="md:JavadocTextElement" value="PHP running out of max_execution_time."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="PhpRuntimeExceptionException">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="When a PHP exception occurs (&lt;code>exception.php?fail=[trace]&lt;/code>),"/>
      <fragments xsi:type="md:JavadocTextElement" value="we may be able to directly extract the failure trace."/>
      <fragments xsi:type="md:JavadocTextElement" value="This exception also prints out the location in the PHP source "/>
      <fragments xsi:type="md:JavadocTextElement" value="of the exception, as per "/>
      <fragments xsi:type="md:JavadocTagElement" name="@link">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.240/@methods.0"/>
      </fragments>
      <fragments xsi:type="md:JavadocTextElement" value="."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="convertToStackTrace" line="119">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="Extract the PHP trace (decoded from URL) into a series of "/>
        <fragments xsi:type="md:JavadocTextElement" value="stack trace elements."/>
        <fragments xsi:type="md:JavadocTextElement" value="In our case, the cause is stored in the following format:"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;code>#1 C:\...\test.NewInstanceWithoutId.0908061503090\output\visual_122ed49bb14_7.php(223): get_new_domain_object_model_122ed49ba78_70()&lt;/code>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;/p>"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;p>A sensible implementation would use or implement a real parser, this"/>
        <fragments xsi:type="md:JavadocTextElement" value="is just a quick implementation.&lt;/p>"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="PhpRuntimeExceptionException" line="38">
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the original exception"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the PHP message of the exception"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the original exception"/>
      </javadocs>
    </methods>
    <methods name="canHandle" line="50">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Can we extract a PHP stack trace from the given exception?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="extractTrace" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Extract out the PHP stack trace from the given exception, or "/>
        <fragments xsi:type="md:JavadocTextElement" value="return &lt;code>null&lt;/code> if none can be extracted."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="extractCause" line="89">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Extract out the cause (the trace) from the PHP exception,"/>
        <fragments xsi:type="md:JavadocTextElement" value="as part of the URL: &lt;code>...&amp;trace=[trace]&lt;/code>"/>
        <fragments xsi:type="md:JavadocTextElement" value="The trace is stored URLencoded."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the extracted trace, or null"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="AllReleaseTests">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="All tests for release quality."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="suite" line="13">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all the tests in this package and return as a test suite."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="EcoreTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Simple tests to ensure that all copies of .ecores across the"/>
      <fragments xsi:type="md:JavadocTextElement" value="plugin are identical."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testOawEcore" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check the ecore stored in oaw."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testModelNamespaceURIs" line="53">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Issue 121: check that model NS URIs are synchronised"/>
        <fragments xsi:type="md:JavadocTextElement" value="across instances. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="GmfGenTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests all .gmfgens"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getGenList" line="59">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a list of gmfmaps from "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testOnlyOneOpenDiagramPolicy" line="72">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Every node should have no more than one OpenDiagram policy."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testReadOnlyOpenDiagramPolicies" line="112">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All read-only labels inside nodes with OpenDiagramPolicies should"/>
        <fragments xsi:type="md:JavadocTextElement" value="also have an OpenDiagramPolicy. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testNonReadOnlyCannotHaveOpenPolicies" line="146">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Non read-only labels inside nodes cannot contain OpenDiagramPolicies."/>
        <fragments xsi:type="md:JavadocTextElement" value="(Otherwise they could not be edited by double clicking.) "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testLabelOpenDiagramsMatch" line="174">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All labels with OpenDigramPolicies must match those of"/>
        <fragments xsi:type="md:JavadocTextElement" value="their parents."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testOpenDiagramTargetElement" line="206">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For an OpenDiagramPolicy, the destination editor must be a"/>
        <fragments xsi:type="md:JavadocTextElement" value="class that can contain the element referred to in the OpenDiagramPolicy. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertOpenDiagramElementMatches" line="237">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given model ID can store the element"/>
        <fragments xsi:type="md:JavadocTextElement" value="referred to in metaHref."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;Iaml_Operation&quot;"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;iaml.genmodel#//model/CompositeOperation&quot;"/>
      </javadocs>
    </methods>
    <methods name="getEditorEClass" line="269">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the root EClass of the given modelID. Iterates over"/>
        <fragments xsi:type="md:JavadocTextElement" value="existing .gmfgens."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="resolveSimpleEClass" line="302">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Resolve a simple meta element. This assumes that the same"/>
        <fragments xsi:type="md:JavadocTextElement" value="element name does not occur more than once in the given"/>
        <fragments xsi:type="md:JavadocTextElement" value="metamodel."/>
        <fragments xsi:type="md:JavadocTextElement" value="Uses the factory map found in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocClassReference" reference="//@references.236"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;SingleOperation&quot;"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="execute" line="332">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Execute something over the given XML document, which"/>
        <fragments xsi:type="md:JavadocTextElement" value="has the given filename."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="log" line="345">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Log a message; this will include a helpful link to"/>
        <fragments xsi:type="md:JavadocTextElement" value="the current file. "/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="execute2" line="372">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Does the actual work."/>
      </javadocs>
    </methods>
    <methods name="iterate" line="379">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Iterate over all the .gmfgen's with the given iterator."/>
        <fragments xsi:type="md:JavadocTextElement" value="If an error occurs while iterating, catches the error and"/>
        <fragments xsi:type="md:JavadocTextElement" value="appends the filename."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getAttributeName" line="401">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="The attribute to check on /GenEditorGenerator, e.g. &quot;modelID&quot;"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getExpected" line="407">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the expected value for the given filename."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" the current value"/>
      </javadocs>
    </methods>
    <methods name="forceSet" line="444">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Should we forceably set the attribute if it is incorrect?"/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testModelID" line="454">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Every .gmfgen should have a ModelID."/>
        <fragments xsi:type="md:JavadocTextElement" value="Sets the ModelID to the filename if not."/>
      </javadocs>
    </methods>
    <methods name="getAllShortcuts" line="628">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Converts &quot;root&quot;, &quot;foo&quot; into &quot;iaml&quot;, &quot;iaml_foo&quot;."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testPreferencePages" line="816">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="all preferencePages should have an ID"/>
        <fragments xsi:type="md:JavadocTextElement" value="of 'org.openiaml.model.diagram.xxx'."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testPreferencePagesChildren" line="850">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="all preferencePages children should have an ID"/>
        <fragments xsi:type="md:JavadocTextElement" value="of 'org.openiaml.model.diagram.xxx'."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGetName" line="891">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Tests "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.243/@methods.21"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
    </methods>
    <methods name="getName"/>
    <methods name="testGetPluginName" line="910">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Tests "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.243/@methods.23"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
    </methods>
    <methods name="getPluginName"/>
    <methods name="isEmpty" line="921">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Is the given string null or empty?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="camelCase" line="931">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Converts &quot;foo_bar&quot; to &quot;FooBar&quot;."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="testCamelCase" line="946">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Tests "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.243/@methods.25"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
    </methods>
    <methods name="spaceCase" line="954">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Converts &quot;foo_bar&quot; to &quot;Foo Bar&quot;."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="testSpaceCase" line="971">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Tests "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.243/@methods.27"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
    </methods>
    <methods name="saveDocument" line="979">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Saves the given XML document to the given filename."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="RootElementPair" line="1002">
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="testFixOpenBehaviours" line="1025">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Fix any missing OpenBehaviours, and check existing"/>
        <fragments xsi:type="md:JavadocTextElement" value="behaviours."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="checkOrAddOpenBehaviour" line="1113">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Checks the given node (can either be a /node, /link or /label)"/>
        <fragments xsi:type="md:JavadocTextElement" value="that it contains the given OpenDiagramBehaviour. Adds it if it"/>
        <fragments xsi:type="md:JavadocTextElement" value="doesn't exist, otherwise check that it matches what it should be. "/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The root document"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The node to check for behaviour containment"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The RootElementPair pointing to the editor it should open"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" true if the document has been modified, false otherwise"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getBestPair" line="1162">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="What should be the element that will open the given element?"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" the pair or null if it shouldn't be opened"/>
      </javadocs>
    </methods>
    <methods name="testGetBestPair" line="1184">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Tests "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.243/@methods.33"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
    </methods>
    <methods name="testAllOpenableElementsAreOpenable" line="1228">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For every editor instance, every subclass of the "/>
        <fragments xsi:type="md:JavadocTextElement" value="root diagram element should be openable in every editor."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="assertAllOpenableElements" line="1251">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check through all .gmfgens and make sure all nodes and"/>
        <fragments xsi:type="md:JavadocTextElement" value="links of subclass [rootElement] have an open behaviour"/>
        <fragments xsi:type="md:JavadocTextElement" value="to [modelID]."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testUniqueOpenDiagrams" line="1321">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="In each .gmfgen, each different diagram type should be unique."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testContextMenus" line="1365">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure there is only one 'contextMenu' in the root of each"/>
        <fragments xsi:type="md:JavadocTextElement" value=".gmfgen. Otherwise, there may be a situation where multiple identical"/>
        <fragments xsi:type="md:JavadocTextElement" value="commands with the same ID would be generated, throwing a warning"/>
        <fragments xsi:type="md:JavadocTextElement" value="&quot;Conflict for xxx.LoadResourceAction&quot;."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="GmfGraphTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests the .gmfgraph."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getGmfgraph" line="26">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load the .gmfgraph."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAllLabelsAreInRoot" line="36">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All labels that have a name of XXXFigure "/>
        <fragments xsi:type="md:JavadocTextElement" value="within 'figures' should have an"/>
        <fragments xsi:type="md:JavadocTextElement" value="accessor in the root. "/>
        <fragments xsi:type="md:JavadocTextElement" value="We cannot test that all Labels have a child accessor, because"/>
        <fragments xsi:type="md:JavadocTextElement" value="we might have some design-time labels that will never change. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAllNodesAndLinks" line="68">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All elements in 'figures' should either have a node"/>
        <fragments xsi:type="md:JavadocTextElement" value="or link in the root."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testRootLabelAccessors" line="97">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All labels in the root should have an accessor that"/>
        <fragments xsi:type="md:JavadocTextElement" value="points to the right label in the 'figures'."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUniqueDescriptors" line="128">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure all 'figures/descriptors' are unique."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUniqueNodes" line="147">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure all 'nodes' are unique."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUniqueConnections" line="166">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure all 'connections' are unique."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testUniqueLabels" line="184">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure all 'labels' are unique."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testDuplicateIcons" line="202">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Issue 56: A node element should only have one label with"/>
        <fragments xsi:type="md:JavadocTextElement" value="an element icon."/>
      </javadocs>
    </methods>
    <methods name="getAccessorKey" line="238">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Translate"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;e accessor=&quot;//@figures.0/@descriptors.25/@accessors.0&quot;/>"/>
        <fragments xsi:type="md:JavadocTextElement" value="into"/>
        <fragments xsi:type="md:JavadocTextElement" value="&quot;//@figures.0/@descriptors.25&quot;"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="GmfMapTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests all .gmfmaps"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getMapList" line="45">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a list of gmfmaps from "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testGmfMapMatch" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should be the same number of maps specified here"/>
        <fragments xsi:type="md:JavadocTextElement" value="as in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="iterateOverNodes" line="71">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Iterate over the nodes in the given node list to make sure"/>
        <fragments xsi:type="md:JavadocTextElement" value="the containment features are unique with respect to loadedContainers."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" currently loaded gmfmap file"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" list of nodes to iterate over"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" containment features found"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testMultipleContainersHaveOcl" line="133">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="If a .gmfmap has multiple containers, each of the different"/>
        <fragments xsi:type="md:JavadocTextElement" value="node elements should have a separate OCL expression. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testMappingsMatch" line="159">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All label mappings should match their contained node."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.245/@methods.5"/>
      </javadocs>
    </methods>
    <methods name="assertLabelMappingMatches" line="330">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given label matches the given element."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;iaml.ecore#//EventTrigger&quot;"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;iaml.gmfgraph#EventTriggerName&quot;"/>
      </javadocs>
    </methods>
    <methods name="assertToolMappingMatches" line="246">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given tool mapping matches the given element."/>
        <fragments xsi:type="md:JavadocTextElement" value="Maps the tool mapping to a loaded .gmftool document through "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.245/@methods.7"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=". "/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.245/@methods.7"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;iaml.ecore#//EventTrigger&quot;"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;visual.gmftool#//@palette/@tools.0/@tools.22&quot;"/>
      </javadocs>
      <javadocs name="@returns">
        <fragments xsi:type="md:JavadocTextElement" value=" the resolved tool mapping node from the gmftool"/>
      </javadocs>
    </methods>
    <methods name="findGmftoolFor" line="285">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Look into the map of loaded gmftools, and find which one matches"/>
        <fragments xsi:type="md:JavadocTextElement" value="the given filename."/>
        <fragments xsi:type="md:JavadocTextElement" value="e.g. gmftools = ['foo/bar/baz/visual.gmftool', ...]"/>
        <fragments xsi:type="md:JavadocTextElement" value="toolFilename = 'visual.gmftool'"/>
        <fragments xsi:type="md:JavadocTextElement" value="Returns 'foo/bar/baz/visual.gmftool', the key in the gmftool map."/>
      </javadocs>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.245/@methods.8"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="getGmfTools"/>
    <methods name="assertNodeMappingMatches" line="308">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given node mapping matches the given element."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;iaml.ecore#//EventTrigger&quot;"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" &quot;iaml.gmfgraph#EventTrigger&quot;"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="GmfToolTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests .mf and plugin.xml files of the specified plugins"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getToolList" line="46">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Create a list of gmftools from "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="testGmfToolMatch" line="61">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="There should be the same number of tools specified here"/>
        <fragments xsi:type="md:JavadocTextElement" value="as in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getAllGmfTools" line="71">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="From a given root element (//palette/tools) [there may be"/>
        <fragments xsi:type="md:JavadocTextElement" value="many 'tools' in //palette), get ALL "/>
        <fragments xsi:type="md:JavadocTextElement" value="gmfTool elements within. Excluding tool groups, but recursing "/>
        <fragments xsi:type="md:JavadocTextElement" value="through the gool groups."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="getAllGmfToolsRecursive" line="93">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="From a given root element (//palette/tools) [there may be"/>
        <fragments xsi:type="md:JavadocTextElement" value="many 'tools' in //palette), get ALL "/>
        <fragments xsi:type="md:JavadocTextElement" value="gmfTool elements within. Excluding tool groups, but recursing "/>
        <fragments xsi:type="md:JavadocTextElement" value="through the gool groups."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="testGmfTools" line="122">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check .gmftools for icons. If the .gmftool does not"/>
        <fragments xsi:type="md:JavadocTextElement" value="specify an icon, one is specified automatically, and the"/>
        <fragments xsi:type="md:JavadocTextElement" value=".gmftool is rewritten."/>
        <fragments xsi:type="md:JavadocTextElement" value="(TODO The other alternative is to build this into a build.xml.)"/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testCheckAllToolsMapped" line="189">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="In each .gmftool, there should be exactly one mapping to"/>
        <fragments xsi:type="md:JavadocTextElement" value="a node in the .gmfmap. "/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="loadGmfmap" line="235">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a corresponding .gmfmap for a .gmftool."/>
        <fragments xsi:type="md:JavadocTextElement" value="Assumed to be the same filename as the .gmftool, except"/>
        <fragments xsi:type="md:JavadocTextElement" value="replacing the file extension."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="testIconsMatch" line="249">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="For each .gmftool creation node, the icons set to the"/>
        <fragments xsi:type="md:JavadocTextElement" value="creation tool should match the name of the element"/>
        <fragments xsi:type="md:JavadocTextElement" value="created."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="LicenceTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Check all plugins have the correct licencing information."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="testHasEPLFile" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Every org.openiaml.* plugin should include"/>
        <fragments xsi:type="md:JavadocTextElement" value="&lt;code>epl-v10.html&lt;/code>."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="NewWizardsTest">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Checks all plugins to make sure that only the root diagram"/>
      <fragments xsi:type="md:JavadocTextElement" value="editor has a &quot;new wizard&quot; editor: issue 53"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="ParentNamesTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests model files for the ParentNames"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getGmfgraph" line="39">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load the .gmfgraph."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAllParents" line="49">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test to make sure that "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" is"/>
        <fragments xsi:type="md:JavadocTextElement" value="complete, based on the .gmfgraph."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testAllParentsInGraph" line="82">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test to make sure that every element in "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value="has a ParentName label in the .gmfgraph."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testParentVerticalLayout" line="110">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Nodes that have ParentName should have a vertical "/>
        <fragments xsi:type="md:JavadocTextElement" value="FlowLayout."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testParentDiagramLabelIcon" line="129">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Root DiagramLabel nodes for ParentNames should have"/>
        <fragments xsi:type="md:JavadocTextElement" value="Element Icon set to false."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testMappingReadOnly" line="146">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="All ParentName mappings in .gmfmaps are read-only."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.release" name="PluginsTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Tests .mf and plugin.xml files of the specified plugins"/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="getPlugins" line="43">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the plugins in the system; that is,"/>
        <fragments xsi:type="md:JavadocTextElement" value="those that start with 'org.openiaml'."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getAllGmfGens" line="96">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the GMF gens loaded from disk."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="getAllManifests" line="124">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get all of the manifests loaded from disk."/>
      </javadocs>
      <javadocs name="@return"/>
    </methods>
    <methods name="setUp" line="151">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load up all the .gmfgen's and MANIFEST.MFs from all of our plugins."/>
      </javadocs>
    </methods>
    <methods name="firstDocument" line="171">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first document in the given cache."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="testVersions" line="188">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the version tags of each of these files."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getVersion" line="214">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the version that all plugins should be."/>
        <fragments xsi:type="md:JavadocTextElement" value="In particular, this is the version provided in the root"/>
        <fragments xsi:type="md:JavadocTextElement" value="model manifest."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="getVendor" line="229">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the vendor that all plugins should be."/>
        <fragments xsi:type="md:JavadocTextElement" value="In particular, this is the version provided in the root"/>
        <fragments xsi:type="md:JavadocTextElement" value="model manifest."/>
      </javadocs>
      <javadocs name="@return"/>
      <javadocs name="@throws"/>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testVendors" line="244">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test the vendor tags of each of these files."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testContainsShortcutsTo" line="291">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that each .gmfgen contains shortcuts to"/>
        <fragments xsi:type="md:JavadocTextElement" value="all other .gmfgens"/>
      </javadocs>
    </methods>
    <methods name="testCorrectNumberOfShortcuts" line="309">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Each different .gmfgen should have a different diagram"/>
        <fragments xsi:type="md:JavadocTextElement" value="file name, so there should be identical numbers of "/>
        <fragments xsi:type="md:JavadocTextElement" value="shortcut names."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testContainsProvidedFor" line="320">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that each .gmfgen contains shortcuts to"/>
        <fragments xsi:type="md:JavadocTextElement" value="all other .gmfgens"/>
      </javadocs>
    </methods>
    <methods name="check" line="346">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Check a given set of attributes for the appropriate uniqueness."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" a prefix to put at the beginning of any assertions"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" Behaviour node"/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
    <methods name="testOpenDiagramUniqueness" line="392">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Test each OpenDiagramPolicy to make sure it is sufficiently"/>
        <fragments xsi:type="md:JavadocTextElement" value="unique within the .gmfgen."/>
        <fragments xsi:type="md:JavadocTextElement" value="That is, all different editors in a .gmfgen have the exact same"/>
        <fragments xsi:type="md:JavadocTextElement" value="editorClass, editorID and diagramKind."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGmfgenPluginIds" line="436">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that plugin IDs are unique across all diagram editors."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
    <methods name="testGmfgenPluginNames" line="453">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Make sure that plugin names are unique across all diagram editors."/>
      </javadocs>
      <javadocs name="@throws"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="SoftCache">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="A SoftCache uses SoftReferences to implement a very basic memory cache."/>
      <fragments xsi:type="md:JavadocTextElement" value="Abstract classes have to implement the method which will repopulate "/>
      <fragments xsi:type="md:JavadocTextElement" value="a given key if the reference is lost. "/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="get" line="22">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get a value from the SoftCache. If the value does"/>
        <fragments xsi:type="md:JavadocTextElement" value="not exist, or has been lost, then"/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.251/@methods.1"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" will be used to re-instantiate"/>
        <fragments xsi:type="md:JavadocTextElement" value="it."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
    </methods>
    <methods name="retrieve" line="60">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="From a given source input, return a new copy of the "/>
        <fragments xsi:type="md:JavadocTextElement" value="result. This does not store the value inside the SoftCache."/>
        <fragments xsi:type="md:JavadocTextElement" value="Abstract classes need to implement this method."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" The key to load as a cache value"/>
      </javadocs>
      <javadocs name="@return">
        <fragments xsi:type="md:JavadocTextElement" value=" A new copy of the cache value for input"/>
      </javadocs>
    </methods>
    <methods name="put" line="48">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Put a "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" of the given value into the"/>
        <fragments xsi:type="md:JavadocTextElement" value="SoftCache."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests" name="XmlTestCase">
    <javadocs>
      <fragments xsi:type="md:JavadocTextElement" value="Helper methods for test cases that use XML-based and properties-based"/>
      <fragments xsi:type="md:JavadocTextElement" value="tests."/>
    </javadocs>
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="resolveEmfElement" line="48">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Resolve an EMF query like '//@figures.0/@descriptors.29/@accessors.0'"/>
        <fragments xsi:type="md:JavadocTextElement" value="to an Element. Fail if the element cannot be found."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs name="@param"/>
      <javadocs name="@return"/>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" "/>
      </javadocs>
    </methods>
    <methods name="loadProperties" line="93">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load a properties file."/>
      </javadocs>
    </methods>
    <methods name="loadDocument" line="116">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document from a file."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Load an XML document from an input source."/>
      </javadocs>
    </methods>
    <methods name="saveDocument" line="131">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Try saving an XML document."/>
      </javadocs>
    </methods>
    <methods name="assertFileExists" line="157">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given file exists."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given file exists."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="readFile" line="166">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Read in a file into a string."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if an IO exception occurs"/>
      </javadocs>
    </methods>
    <methods name="loadFile" line="190">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Use "/>
        <fragments xsi:type="md:JavadocTagElement" name="@link"/>
        <fragments xsi:type="md:JavadocTextElement" value=" instead."/>
      </javadocs>
      <javadocs name="@deprecated"/>
      <javadocs name="@see">
        <fragments xsi:type="md:JavadocMethodReference" reference="//@references.252/@methods.5"/>
      </javadocs>
    </methods>
    <methods name="writeFile" line="200">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Write a string to a file. If the file exists, it will be"/>
        <fragments xsi:type="md:JavadocTextElement" value="overwritten. "/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if an IO exception occurs"/>
      </javadocs>
    </methods>
    <methods name="assertGreaterEq" line="212">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Helper method: assert A >= B."/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" expected value (B)"/>
      </javadocs>
      <javadocs name="@param">
        <fragments xsi:type="md:JavadocTextElement" value=" actual value (A)"/>
      </javadocs>
    </methods>
    <methods name="assertNotEqual" line="235">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the two elements are not the same."/>
      </javadocs>
      <javadocs name="@param"/>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the two elements are not the same."/>
      </javadocs>
      <javadocs name="@param"/>
    </methods>
    <methods name="assertEndsWith" line="302">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Assert that the given string ends with the given suffix."/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:JavaClass" plugin="org.openiaml.model.tests" package="org.openiaml.model.tests.xpath" name="DefaultXpathTestCase">
    <javadocs name="@author">
      <fragments xsi:type="md:JavadocTextElement" value=" jmwright"/>
    </javadocs>
    <methods name="xpath" line="26">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Apply an XPath query to an XML document."/>
      </javadocs>
    </methods>
    <methods name="xpathFirst" line="51">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first node result from an XPath query."/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first node result from an XPath query."/>
        <fragments xsi:type="md:JavadocTextElement" value="Does not throw an error if more than one result is found; see"/>
        <fragments xsi:type="md:JavadocTagElement" name="@link">
          <fragments xsi:type="md:JavadocMethodReference" reference="//@references.253/@methods.2"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value="."/>
      </javadocs>
      <javadocs name="@throws">
        <fragments xsi:type="md:JavadocTextElement" value=" if no results are found"/>
      </javadocs>
    </methods>
    <methods name="hasXpathFirst" line="82">
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first node result from an XPath query."/>
      </javadocs>
      <javadocs name="@returns">
        <fragments xsi:type="md:JavadocTextElement" value=" the found node, or null if none is found (or more than one is found)"/>
      </javadocs>
      <javadocs>
        <fragments xsi:type="md:JavadocTextElement" value="Get the first node result from an XPath query."/>
      </javadocs>
      <javadocs name="@returns">
        <fragments xsi:type="md:JavadocTextElement" value=" the found node, or null if none is found (or more than one is found)"/>
      </javadocs>
    </methods>
  </references>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="base"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="sync-wires"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="set-wires"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="events">
    <rules name="Create 'edit' event trigger for input text field" line="20">
      <javadocs name="@semantics"/>
    </rules>
  </references>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="events">
    <rules name="Create 'edit' event trigger for input text field" line="20">
      <javadocs name="@semantics">
        <fragments xsi:type="md:JavadocTextElement" value="Button,EventTrigger A "/>
        <fragments xsi:type="md:JavadocTagElement" name="@model">
          <fragments xsi:type="md:JavadocTextElement" value="Button"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" has an "/>
        <fragments xsi:type="md:JavadocTagElement" name="@model">
          <fragments xsi:type="md:JavadocTextElement" value="EventTrigger event trigger"/>
        </fragments>
        <fragments xsi:type="md:JavadocTextElement" value=" named 'click'."/>
      </javadocs>
    </rules>
  </references>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="sessions"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="login-handler"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="operations"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="dynamic-sources"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="conditions"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules" name="users"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules.runtime" name="file-domain-object"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules.runtime" name="domain"/>
  <references xsi:type="md:DroolsPackage" plugin="org.openiaml.model.drools" package="rules.runtime" name="new-instance"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="AccessControlHandler.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ActivityNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ApplicationElement.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ApplicationElementContainer.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ApplicationElementProperty.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Button.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="CancelNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="CommitWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="CompositeCondition.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="CompositeOperation.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="CompositeWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ConditionalEdge.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ConditionWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ConstraintWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DataFlowEdge.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DecisionCondition.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DecisionNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DecisionOperation.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DerivedView.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DomainAttribute.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DomainAttributeInstance.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DomainObject.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DomainObjectInstance.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DomainStore.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="DynamicApplicationElementSet.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="EmptyDomainClass.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="EventTrigger.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ExecutionEdge.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ExtendsWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="FinishNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Frame.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="InputForm.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="InputTextField.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="InternetApplication.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="JoinNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="LoginHandler.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="NavigateWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="NewInstanceWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="OperationCallNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Page.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="PageRequest.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Parameter.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ParameterWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Permission.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="PrimitiveOperation.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ProvidesWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="QueryParameter.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="RequiresWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Role.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="RunInstanceWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="SelectWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="Session.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="SetWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="ShowWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="SplitNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="StartNode.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="StaticValue.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="SyncWire.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="TemporaryVariable.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="UserInstance.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="UserStore.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="VisibleThing.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="VisitorAgent.gif"/>
  <references xsi:type="md:FileReference" plugin="org.openiaml.model.edit" package="icons.full.obj16" name="WireEdge.gif"/>
</md:ModelDocumentation>
