# Update the attributes in "new instance" objects when they
# are connected to DomainObjects.
package org.openiaml.model.drools.rules.runtime.new_instance

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.*;
import org.openiaml.model.model.*;	// for ModelPackage
import org.openiaml.model.model.domain.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.operations.*;

import org.openiaml.model.inference.*;		// for handler

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Refresh Iterator Object mappings"
	when
		schema : DomainSchema ( )
		source : DomainSource ( )
		iterator : DomainIterator ( overridden == false )
		
		schemaEdge : SchemaEdge ( ) and
		eval ( functions.connectsSchema(schemaEdge, source, schema ))
		
		selectEdge : SelectEdge ( ) and
		eval ( functions.connectsSelect(selectEdge, iterator, source ))
		
		attribute : DomainAttribute ( eContainer == schema )
		
		not ( DomainAttributeInstance( eContainer == iterator, name == attribute.name ))

	then
		# create a new one
		DomainAttributeInstance attr = handler.generatedDomainAttributeInstance(iterator, iterator);
		handler.setName(attr, attribute.getName());
		# set type
		handler.setType(attr, attribute.getType());
		queue.add(attr, drools);
		
		# mark it as an extension
		ExtendsEdge ex = handler.generatedExtendsEdge(iterator, attr, attr, attribute);
		queue.add(ex, drools); 

end

rule "Mark AttributeInstances as extensions of the identically-named Attributes (NewInstanceWire)"
	when
		schema : DomainSchema ( )
		source : DomainSource ( )
		iterator : DomainIterator ( )
		
		schemaEdge : SchemaEdge ( )
		eval ( functions.connectsSchema(schemaEdge, source, schema ))
		
		selectEdge : SelectEdge ( )
		eval ( functions.connectsSelect(selectEdge, iterator, source ))

		attribute : DomainAttribute ( eContainer == schema )
		attrinst : DomainAttributeInstance( overridden == false, eContainer == iterator, name == attribute.name ) 
		
		not ( ExtendsEdge ( from == attrinst, to == attribute ) )

	then
		# mark it as an extension
		ExtendsEdge w = handler.generatedExtendsEdge(attrinst, attrinst, attrinst, attribute);
		queue.add(w, drools);
	
end

rule "Create 'save' operation for DomainIterators"
	when
		instance : DomainIterator ( overridden == false )
		
		not ( Operation( eContainer == instance, name == "save" ))

	then
		# create a new one
		PrimitiveOperation op = handler.generatedPrimitiveOperation(instance, instance);
		handler.setName(op, "save");
		queue.add(op, drools);

end
