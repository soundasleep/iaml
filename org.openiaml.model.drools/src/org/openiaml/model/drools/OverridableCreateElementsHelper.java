/**
 * 
 */
package org.openiaml.model.drools;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.openiaml.model.inference.EcoreCreateElementsHelper;
import org.openiaml.model.inference.ICreateElements;
import org.openiaml.model.inference.InferenceException;
import org.openiaml.model.model.GeneratesElements;

/**
 * This helper allows for rules to be selectively overridden.
 * That is:
 * 
 * <p><ol>
 * 	<li>A generates B, by default. That means B.generatedBy contains A.
 *  <li>If A is overridden, then B should not be generated.
 * </ol>
 * 
 * <p>The {@link #veto(GeneratesElements)} method allows {@link GeneratesElements#isOverridden() overridden elements} 
 * to prevent a rule from firing. 
 * 
 * <!-- <p>This implementation is also checked by forcing all rules to register A.
 * If something is created that is not generated by A, {@link UnexpectedGeneratorElementException an exception} is thrown. -->
 *
 * <p>Thus, the rule above should look like this:
 * 
 * <p><pre>rule "..."
 *   when
 *     a : A ( )
 *     eval ( handler.veto ( a ))
 *  
 *   then
 *     <!-- handler.expect( a ); -->
 *     B b = handler.generatedB(a, a);
 *     ...
 * end</pre>
 * 
 * @author jmwright
 *
 */
public class OverridableCreateElementsHelper extends EcoreCreateElementsHelper {

	private ICreateElements delegate;
	
	/**
	 * We delegate the actual methods for {@link EcoreCreateElementsHelper} to
	 * a delegated parent. 
	 */
	public OverridableCreateElementsHelper(ICreateElements delegate) {
		this.delegate = delegate;
	}
	
	/**
	 * Allow a rule to be overridden. <!-- Also registers the expected 
	 * GeneratesElements for successive handler calls. -->
	 * 
	 * @param object the object to verify
	 * @return true if the parameter is {@link GeneratesElements#isOverridden() not overridden}
	 */
	public boolean veto(GeneratesElements object) {
		// prevent this rule from firing if the object is overridden
		return !object.isOverridden();
	}
	
	/**
	 * We delegate the actual methods for {@link EcoreCreateElementsHelper} to
	 * a delegated parent. 
	 * 
	 * <p>{@inheritDoc}
	 */
	@Override
	public void addReference(EObject element, EStructuralFeature reference,
			Object value) throws InferenceException {
		delegate.addReference(element, reference, value);
	}

	/**
	 * We delegate the actual methods for {@link EcoreCreateElementsHelper} to
	 * a delegated parent.
	 * 
	 * <p>{@inheritDoc}
	 */
	@Override
	public EObject createElement(EObject container, EClass elementType,
			EStructuralFeature containerFeature) throws InferenceException {
		return delegate.createElement(container, elementType, containerFeature);
	}

	/**
	 * We delegate the actual methods for {@link EcoreCreateElementsHelper} to
	 * a delegated parent.
	 * 
	 * <p>{@inheritDoc}
	 */
	@Override
	public EObject createRelationship(EObject container, EClass elementType,
			EObject source, EObject target,
			EStructuralFeature containerFeature,
			EStructuralFeature sourceFeature, EStructuralFeature targetFeature)
			throws InferenceException {
		return delegate.createRelationship(container, elementType, source, target, containerFeature, sourceFeature, targetFeature);
	}

	/**
	 * We delegate the actual methods for {@link EcoreCreateElementsHelper} to
	 * a delegated parent. 
	 * 
	 * <p>{@inheritDoc}
	 */
	@Override
	public void deleteElement(EObject object, EObject container,
			EStructuralFeature containerFeature) throws InferenceException {
		delegate.deleteElement(object, container, containerFeature);
	}

	/**
	 * We delegate the actual methods for {@link EcoreCreateElementsHelper} to
	 * a delegated parent. 
	 * 
	 * <p>{@inheritDoc}
	 */
	@Override
	public void setValue(EObject element, EStructuralFeature reference,
			Object value) throws InferenceException {
		delegate.setValue(element, reference, value);
	}

}
