«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/* default = nothing */
«DEFINE expandFrame FOR model::ApplicationElement-»
«ENDDEFINE»

/**
 * @implementation {@link Gate Gates} are of a lower priority in execution than {@link EventTrigger EventTriggers}.
 */
«DEFINE expandFrame FOR model::visual::Frame-»
	«FILE "output/"+safeNameString(id)+".php"-»
<?php
/* generated frame "«name-»" */
«EXPAND template::Template::commonHeader("") FOR getRoot()»

define("CURRENT_PAGE", "«id»");
function get_frame_id() {
	return CURRENT_PAGE;
}

// a default fail handler for this frame?
«IF getFailHandler(this) != null»
	function frame_fail_handler($e) {
		«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(this)»
		die;
	}
	set_exception_handler('frame_fail_handler');
«ENDIF»

// a default fail handler for this session?
«IF containingSession() != null && getFailHandler(containingSession()) != null»
	function session_fail_handler($e) {
		«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(containingSession())»
		die;
	}
	set_exception_handler('session_fail_handler');
«ENDIF»

// expand any domain instances
«EXPAND template::domain::Definitions::domainObjectDefinitions(true) FOR this-»
«EXPAND template::domain::Definitions::domainAttributeDefinitions(true) FOR this-»

// expand any users
«EXPAND template::users::Includes::getInclude FOREACH getRoot().eAllContents.typeSelect(model::users::Role)-»

// initialise default values for any fields
«EXPAND initialiseDefaultValues FOREACH children»

// run any event triggers for this session
«IF containingSession() != null»
	if (!has_session("session_init", false)) {
		$_SESSION["session_init"] = true; /* this MUST execute before we start any events, or else we can easily call ourselves and get stuck in an infinite loop */

	«REM»any fail/exception handlers?«ENDREM»
	«IF getFailHandler(containingSession()) != null»
		try {
	«ENDIF»
	«EXPAND template::events::Session::runSessionEvents('init') FOREACH {containingSession().onInit}-»
	«EXPAND template::events::Session::runSessionEvents('access') FOREACH {containingSession().onAccess}-»
	«IF getFailHandler(containingSession()) != null»
		} catch (IamlRuntimeException $e) {
			// only expand the first fail handler
			«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(containingSession())»
		}
	«ENDIF»
	}
«ENDIF»

// run any event triggers for this frame
// exceptions are now covered by the exception handlers above
«EXPAND template::events::Frame::runFrameEvents('init') FOREACH {onInit}-»
«EXPAND template::events::Frame::runFrameEvents('access') FOREACH {onAccess}-»

// run any entry gates connected to the containing scope(s)
«EXPAND template::scopes::EntryGate::runEntryGate FOREACH getFrameEntryGates(this)-»

// is access to this frame prevented by any other exit gate?
«EXPAND template::scopes::ExitGate::runExitGate FOREACH getAllExitGates(this)-»

// expand any operations (both in this frame and in any surrounding scopes)
«EXPAND template::operations::Definitions::operationIncludes(true) FOR getRoot()-»		

// expand all conditions
«EXPAND template::conditions::Definitions::conditionIncludes(true) FOR getRoot()-»

// expand any dynamic element sources
«EXPAND template::dynamic::DynamicElements::dynamicElements(true) FOR this-»

// expand any AccessControlHandlers in the frame
«EXPAND template::users::Definitions::accessControlHandlerDefinitions(true) FOR this-»

«IF containingSession() != null»
	// expand any AccessControlHandlers in the session
	«EXPAND template::users::Definitions::accessControlHandlerDefinitions(true) FOR containingSession()-»
«ENDIF»

// allow remote execution of operations
if (require_get("operation", "")) {
	// TODO may be a security problem
	$operation_name = "do_" . require_get("operation");
	$arg0 = require_get("arg0");
	$arg1 = require_get("arg1");
			
	// any running functions? (prevent infinite loops)
	register_running_functions();

	log_message("«name».php: Remote operation $operation_name('$arg0', '$arg1')");
	$operation_name($arg0, $arg1);
	log_message("«name».php: Remote operation $operation_name('$arg0', '$arg1') complete");

	echo "ok";
	die;
}

log_message("«id».php: User browsing started");

log_message("«id».php: Session data: " . print_r($_SESSION, true));
		
?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<title>«frameTitle()»</title>
	<link rel="stylesheet" type="text/css" href="<?php echo IAML_RUNTIME_WEB; ?>css/default.css">
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
		var frame_id = "«safeNameString(id)-»";
		
		/**
		 * Get the current frame ID.
		 */
		function get_frame_id() {
			return frame_id;
		}
	/* ]]> */
	</script>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/prototype.js"></script>
	<script language="Javascript" type="application/javascript" src="<?php echo IAML_RUNTIME_WEB; ?>js/default.js"></script>
	<script language="Javascript" type="application/javascript" src="onCurrentFrame.js"></script>
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
		«EXPAND template::js::DefaultJs::defaultJs FOR this-»
		
		«REM»
		/* load site XML (if requested) */
		var site_xml = null;
		function get_site_xml() {
			if (site_xml == null) {
				site_xml = load_xml("<?php echo escape_javascript_string(file_get_contents("site_layout.xml")); ?>");
			}
			return site_xml;
		}
		«ENDREM»
		
	/* ]]> */
	</script>
	<!-- operation definitions -->
	«EXPAND template::operations::Definitions::operationIncludes(false) FOR getRoot()-»

	<!-- condition definitions -->
	«EXPAND template::conditions::Definitions::conditionIncludes(false) FOR getRoot()-»
	
	<!-- other content -->
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
		var try_catch_depth = 0;

		// register a operation handler
		function operation_handler_«safeName()»() {
			this.execute = function(name, args) {
				debug("[operation handler] " + name + " (" + args + ")");
				if (args.length != 10) {
					throw new IamlJavascriptException("Expected 10 arguments to operation handler resolver"); 
				}

				var resolved = null;
				switch (name) { 
					«FOREACH allContainerOperations() AS operation»
					case "«safeName(operation)»": 
						resolved = "do_«safeName(operation)»";
						break;
					«ENDFOREACH»
					«FOREACH getClientSideCacheOperations(getRoot()) AS operation»
					/* client-side cache operations */
					case "update_cached_result_«safeName(operation)»": 
						resolved = "update_cached_result_«safeName(operation)»";
						break;
					«ENDFOREACH»
					default:
						throw new IamlJavascriptException("Could not resolve function '" + name + "'");
				}
				
				debug("[operation handler] resolved function: " + resolved);
				
				// call the function virtually
				var virtual = new Function("args", "return " + resolved + "(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);");
				debug("[operation handler] virtual function: " + virtual);

				return virtual(args);
			};
		}
		set_operation_handler(new operation_handler_«safeName()»());

		// dynamic elements
		«EXPAND template::dynamic::DynamicElements::dynamicElements(false) FOR this-»

		// domain instances
		«EXPAND template::domain::Definitions::domainObjectDefinitions(false) FOR this-»
		«EXPAND template::domain::Definitions::domainAttributeDefinitions(false) FOR this-»

		// cached primitive operation values
		«EXPAND template::operations::ClientSideCache::cachedPrimitiveOperations FOR getRoot()»

		/* actual frame onload functions (called ONCE the frame is fully loaded) */
		var stored_onload_functions = new Array();
		function addOnloadFunction(f) {
			stored_onload_functions.push(f);
		}
				
		// this needs to be loaded *after* the frame has loaded
		function loadStoredEvents() {
			// expand all onLoad functions
			for (var i = 0; i < stored_onload_functions.length; i++) {
				var f = stored_onload_functions[i];
				f();
			}

			$('response').innerHTML = "before loadStoredEvents...";
			<?php 
			«EXPAND php::includes::EventsPhp::eventsPhp FOR this-» 
			?>

			<?php queue_log_messages(false); /* re-enable log messages */ ?>
		}
	/* ]]> */
	</script>
	<style type="text/css">
	<?php if (!DEBUG) { ?>
		#debug { display: none; }
		#response { display: none; }
		#debug_monitors { display: none; }
	<?php } ?>
	</style>
</head>
<body onLoad="loadStoredEvents()">
	<div style="font-size:small; text-align: right;"><a href="clear_session.php">clear session</a> - <a href="sitemap.html">sitemap</a></div>
		
	<h1>«frameTitle()»</h1>
		
	<div id="runtime_errors"><!-- any runtime errors go into here --></div>
		
	<?php
	/* expand any fail error messages */
	if (has_get("fail")) { 
	?>
		<div class="error">
			<p>An exception occured: <i><?php echo htmlspecialchars(require_get("fail")); ?></i></p>
		</div>
	<?php } ?>
		
	<?php queue_log_messages(true); ?>

	«EXPAND template::visual::Render::renderVisual(this) FOREACH children.typeSelect(model::VisibleThing)-»

	<div id="debug"></div>
	<div id="response">empty</div>
	
	<script language="Javascript" type="application/javascript">
	/* <![CDATA[ */
	<?php queue_log_messages(false); /* re-enable log messages, but only after we have "response". */ ?>
	/* ]]> */
	</script>
	
	<!-- for test cases to improve speed: an outstanding ajax calls counter -->
	<!-- TODO we should remove this once issue 43 is resolved -->
	<div id="debug_monitors">
		<div id="ajax_monitor"></div>
		<div id="counter_store_db"></div>
		<div id="counter_store_event"></div>
		<div id="counter_set_session"></div>
		<div id="counter_set_application_value"></div>
		<div id="counter_set_domain_attribute"></div>
		<div id="counter_remote_event"></div>
		<div id="counter_queued_store_attribute"></div>
		<div id="counter_queued_store_object"></div>
		<div id="counter_new_domain_instance"></div>
	</div>
	<script language="Javascript" type="application/javascript">initAjaxMonitor();</script>
	
</body>
</html>

<?php
log_message("«name».php: User browsing finished");
?>
	«ENDFILE»
«ENDDEFINE»

/* default values that we should set before we access this frame */
«DEFINE initialiseDefaultValues FOR model::VisibleThing»
	«EXPAND initialiseDefaultValues FOREACH children»
«ENDDEFINE»

«DEFINE initialiseDefaultValues FOR model::visual::InputTextField»
	/* text field "«this.name-»" */
	«EXPAND initialiseDefaultValueProperty FOREACH properties.select(e|e.name=="fieldValue")»
	«EXPAND initialiseDefaultValues FOREACH children»
«ENDDEFINE»

«DEFINE initialiseDefaultValueProperty FOR model::Property»
	«IF defaultValue != null && defaultValue.length > 0»
		initialize_application_value_default("«safeName()-»",
			"«escapePhpString(defaultValue)-»");		«REM»TODO encode«ENDREM»	
	«ENDIF»
«ENDDEFINE»
