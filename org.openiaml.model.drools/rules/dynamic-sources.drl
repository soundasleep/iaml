#created on: 4/11/2008
package org.openiaml.model.drools

#list any import classes here.
import org.eclipse.emf.ecore.*;
import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.domain.*;
import ca.ecliptical.emf.xpath.*;
import java.util.*;

#declare any global variables here
global EcoreCreateElementsHelper handler;

function boolean connects(WireEdge wire, Object a, Object b) {
	return (wire.getFrom().equals(a) && wire.getTo().equals(b)) ||
		(wire.getFrom().equals(b) && wire.getTo().equals(a));
}

function boolean isXPath(String query) {
	return query.startsWith("xpath:");
}

/**
 * Could this potentially be an XPath match?
 * 
 * In particular, we take a query /a/b[c]/d[e] and
 * consider /a/b/d as potential matches. /a/b[c]/d[e] will become
 * the ConditionWire.
 *
 * Note we have to use the same XPath expressions as test
 * cases, i.e. //iaml:children[@name], not //Page
 */
function boolean potentialXPathMatch(EObject container, DynamicApplicationElementSet ds, Page target) {
	String query = ds.getQuery();
	if (!query.startsWith("xpath:"))
		throw new RuntimeException("potentialXPathMatch was called without an xpath: query: '" + query + "'");

	// remove prefix		
	query = query.substring("xpath:".length());
	
	// remove all conditionals
	// TODO note this will fail if we have a[a[b]], though I don't think this is possible in XPath anyway 	
	query = query.replaceAll("\\[([^\\]]+)\\]", "");
	
	// evaluate xpath using EMFXPath
	// TODO move this into Java code (to reduce redunancy of the following code)
	EMFXPath xpath = new EMFXPath(query);
	xpath.addNamespace("iaml", ModelPackage.eNS_URI);
	xpath.addNamespace("iaml.domain", DomainPackage.eNS_URI);
	xpath.addNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	List results = xpath.selectNodes(container);

	if (results.contains(target)) {
		return true;
	}
	
	return false;
}

rule "Connect SyncWires for a dynamic source, referenced by XPath"
		
	when
		container : InternetApplication ( )
		ds : DynamicApplicationElementSet( eval(isXPath(query)), overridden == false, eContainer == container )
		source : Page ( ) 
		sw : SyncWire ( eval(connects(sw, ds, source)) )
		target : Page ( eval(source != target), eval(potentialXPathMatch(container, ds, target)) )
		not ( tw : SyncWire( eval(connects(tw, source, target)) ) )
		
	then 
		SyncWire sw2 = handler.generatedSyncWire( container, container, source, target );
		sw2.setName("dynamic sync");
		insert(sw2);
		
end

rule "Create the Condition for an XPath set"

	when
		ds : DynamicApplicationElementSet( eval(isXPath(query)), overridden == false )
		not ( CompositeCondition(eContainer == ds, name == 'xpath' ) )
	
	then
		CompositeCondition c = handler.generatedCompositeCondition(ds, ds);
		c.setName("xpath");
		insert(c);
	
end

rule "Create the contents of the XPath condition"
	
	when
		container : InternetApplication( )
		ds : DynamicApplicationElementSet( eval(isXPath(query)), overridden == false, eContainer == container )
		source : Page ( ) 
		sw : SyncWire ( eval(connects(sw, ds, source)) )
		target : Page ( eval(source != target), eval(potentialXPathMatch(container, ds, target)) )
		tw : SyncWire ( eval(connects(tw, source, target)) )
		o : CompositeCondition ( eContainer == ds, name == "xpath" )
		cw : ConditionWire ( from == o, to == tw )
		
		not ( StartNode( eContainer == o ))
	
	then
		# create contents
		Parameter parameter = handler.generatedParameter(o, o);
		parameter.setName("element");
		insert(parameter);

		Parameter xpath = handler.generatedParameter(o, o);
		xpath.setName("xpath");
		insert(xpath);
		
		DecisionCondition dc = handler.generatedDecisionCondition(o, o);
		dc.setName("xpathMatch");
		insert(dc);
		
		StartNode start = handler.generatedStartNode(o, o);
		insert(start);
		
		FinishNode finish = handler.generatedFinishNode(o, o);
		insert(finish);
		
		CancelNode cancel = handler.generatedCancelNode(o, o);
		insert(cancel);
		
		DataFlowEdge data1 = handler.generatedDataFlowEdge(o, o);
		data1.setFrom(parameter);
		data1.setTo(dc);
		insert(data1);

		DataFlowEdge data2 = handler.generatedDataFlowEdge(o, o);
		data2.setFrom(xpath);
		data2.setTo(dc);
		insert(data2);
		
		ExecutionEdge edge1 = handler.generatedExecutionEdge(o, o);
		edge1.setFrom(start);
		edge1.setTo(dc);
		insert(edge1);

		ExecutionEdge edge2 = handler.generatedExecutionEdge(o, o);
		edge2.setFrom(dc);
		edge2.setTo(finish);
		insert(edge2);

		ExecutionEdge edge3 = handler.generatedExecutionEdge(o, o);
		edge3.setFrom(dc);
		edge3.setTo(cancel);
		insert(edge3);

end

rule "Create the XPath ConditionWire for generated SyncWires"
	when
		container : InternetApplication( )
		ds : DynamicApplicationElementSet( eval(isXPath(query)), overridden == false, eContainer == container )
		source : Page ( ) 
		sw : SyncWire ( eval(connects(sw, ds, source)) )
		target : Page ( eval(source != target), eval(potentialXPathMatch(container, ds, target)) )
		tw : SyncWire ( eval(connects(tw, source, target)) )
		condition : CompositeCondition ( eContainer == ds )
		not (ConditionWire ( from == condition, to == tw ))
	
	then
		# could put this into a separate rule
		if (sw.isIsGenerated()) {
			ConditionWire cw = handler.generatedConditionWire( ds, ds, condition, tw );
			cw.setName("xpath condition (source)");
			insert(cw);
	
			ParameterWire pw = handler.generatedParameterWire( cw, cw, ds, cw);
			pw.setName("[xpath] from ds 1");
			insert(pw);		 
	
			ParameterWire pw2 = handler.generatedParameterWire( cw, cw, source, cw);
			pw2.setName("[xpath] from source");
			insert(pw2);
		}

		ConditionWire cwt = handler.generatedConditionWire( ds, ds, condition, tw );
		cwt.setName("xpath condition (target)");
		insert(cwt);

		ParameterWire pwt = handler.generatedParameterWire( cwt, cwt, ds, cwt);
		pwt.setName("[xpath] from ds 2");
		insert(pwt);		 

		ParameterWire pwt2 = handler.generatedParameterWire( cwt, cwt, target, cwt);
		pwt2.setName("[xpath] from target");
		insert(pwt2);

end

