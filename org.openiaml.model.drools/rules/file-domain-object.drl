/**
 * Completes functionality necessary to use <code>.properties</code> files as {@model DomainSource}s.
 */
package org.openiaml.model.drools.rules.file_domain_object

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.*;
import org.openiaml.model.model.*;	// for ModelPackage
import org.openiaml.model.model.domain.*;

import org.openiaml.model.inference.*;		// for handler
import org.openiaml.model.datatypes.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

/**
 * @inference DomainSource
 *		A {@model DomainSource} of {@model DomainSource#type} <code>PROPERTIES_FILE</code>
 *		will generate a {@model DomainType} named 'properties'. 
 */
rule "Create the Properties file DomainType"
		
	when
		root : InternetApplication ( )
		$fds : DomainSource ( type == DomainStoreTypes.PROPERTIES_FILE )
		
		p : ExtendedProperties ( ) from $fds.propertiesFile
		not ( schema : DomainType ( name == "properties" )
			and exists ( 
				edge : SchemaEdge ( from == $fds, to == schema )
			)
		)

		eval ( handler.veto( $fds ))

	then
		DomainType fdo = handler.generatedDomainType($fds, root);
		//handler.setValue(fdo, ModelPackage.eINSTANCE.getNamedElement_Name(), "properties");
		handler.setName(fdo, "properties");
		queue.add(fdo, drools);
		
		// and connect with SchemaEdge
		SchemaEdge edge = handler.generatedSchemaEdge($fds, fdo, $fds, fdo);
		queue.add(edge, drools);

end

// unfortunately $p.stringPropertyNames() cannot be iterated over.
// this is either because Drools expects getFieldName(), or it cannot
// iterate over Set or Collection
/**
 * @inference DomainSource,DomainType
 *		A {@model DomainSource} of {@model DomainSource#type} <code>PROPERTIES_FILE</code>
 *		will populate the 'properties' {@model DomainType} with string-{@model DomainAttribute#eType typed} 
 *		{@model DomainAttribute}s for each value in the source properties file.
 */
rule "Create DomainAttributes for Properties File DomainType"
		
	when
		$fds : DomainSource ( type == DomainStoreTypes.PROPERTIES_FILE )
		$p : ExtendedProperties ( ) from $fds.propertiesFile
		$key : String ( ) from $p.propertyNames
		
		schema : DomainType ( name == "properties" )
		schemaEdge : SchemaEdge ( from == $fds, to == schema )
		
		type : EXSDDataType( definition != null, 
			definition.URI == "http://openiaml.org/model/datatypes#iamlString" )
		
		not ( DomainAttribute ( eContainer == schema, name == $key ))

		eval ( handler.veto( schema ))

	then
		DomainAttribute fda = handler.generatedDomainAttribute(schema, schema);
		//handler.setValue(fda, ModelPackage.eINSTANCE.getNamedElement_Name(), $key);
		handler.setName(fda, $key);
		handler.setEType(fda, type);	// all Properties attributes are strings
		queue.add(fda, drools);
		
end
