«IMPORT iaml»

/**
 * Operation definitions.
 */
«EXTENSION template::GeneratorExtensions»

/* expand out the operations for the frame */
/* this includes Frame and Session */
«DEFINE operationDefinitions(model::visual::Frame container, Boolean php) FOR model::ContainsOperations-»
	«EXPAND operationDefinition(container, php) FOREACH operations-»
«ENDDEFINE»

«DEFINE operationDefinitions(model::visual::Frame container, Boolean php) FOR model::InternetApplication-»
	«EXPAND operationDefinition(container, php) FOREACH allContainerOperations()-»
«ENDDEFINE»

/* operation definitions */
«DEFINE operationDefinition(model::visual::Frame container, Boolean php) FOR model::Operation-»
	/* simple operation */
	«IF php»
	function do_«safeName()»(«EXPAND Parameters::signatures(php) FOREACH parameters.sortBy(p|p.name) SEPARATOR ", "-») {
		log_message("simple operation: «name»");
	}
	«ELSE»
	function do_«safeName()»(«EXPAND Parameters::signatures(php) FOREACH parameters.sortBy(p|p.name) SEPARATOR ", "-») {
		alert("simple operation: «name»");
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE operationDefinition(model::visual::Frame container, Boolean php) FOR model::operations::DecisionOperation-»
	/* simple operation */
	function do_«safeName()»(«EXPAND Parameters::signatures(php) FOREACH parameters.sortBy(p|p.name) SEPARATOR ", "-») {
		«IF isDomainAttributeInstance(eContainer)-»
			return «EXPAND template::domain::AttributeInstance::attributeInstanceCall(php, /* not sure about these parameters */ null, false, (model::DomainAttributeInstance) eContainer, container) FOR this»;
		«ELSEIF isDomainObjectInstance(eContainer)-»
			return «EXPAND template::domain::DomainInstance::domainInstanceCall(php, null, (model::DomainObjectInstance) eContainer, container) FOR this»;
		«ELSE»
			«IF php»
				throw new IamlRuntimeException("Unknown simple operation '«this»'");
			«ELSE»
				throw new IamlJavascriptException("Unknown simple operation '«this»'");
			«ENDIF»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE operationDefinition(model::visual::Frame container, Boolean php) FOR model::CompositeOperation»
	/** composite operation "«name»" */
	«IF php»
	$running_«safeName()» = false;
	«ELSE»
	var running_«safeName()» = false;
	«ENDIF»
	function do_«safeName()»(«EXPAND Parameters::signatures(php) FOREACH parameters.sortBy(p|p.name) SEPARATOR ", "-») {
		«REM»here we would expand out the data flow of the operation, etc«ENDREM»
		// operation: «name»
		«IF php»
		global $running_«safeName()-»;
		if ($running_«safeName()-» == false && !has_running_function("«safeName()-»")) {
			$running_«safeName()-» = true;		// prevent loops
			add_running_function("«safeName()-»");
			
			// has this operation got a fail handler?
			«IF getFailEdge() != null»
				// fail edge «getFailEdge()»
				try {
			«ENDIF»
			
			// temporary variables (if any)
			«EXPAND Variables::temporaryVariable(php) FOREACH variables.typeSelect(model::TemporaryVariable)»			
			
			// execute the operation
			«IF startNode() == null»
				«throwException("Operation " + this + " had no start node")»
			«ELSE»
				«EXPAND ExecutionFlow::executionFlow(true, container, php) FOR startNode()-»
			«ENDIF»

			// continue chained operations
			«EXPAND ExecutionFlow::continueChainedOperations(php) FOR this»
			
			«IF getFailEdge() != null»
				} catch (IamlRuntimeException $e) {
					log_message("Caught exception $e");
					«EXPAND Failure::failWire(php) FOR getFailEdge()»
				}
			«ENDIF»
			
			$running_«safeName()-» = false;
			remove_running_function("«safeName()-»");
		}
		«ELSE»
		if (running_«safeName()-» == false) {
			running_«safeName()-» = true;		// prevent loops

			// temporary variables (if any)
			«EXPAND Variables::temporaryVariable(php) FOREACH variables.typeSelect(model::TemporaryVariable)»			
			
			// has this operation got a fail handler?
			«IF getFailEdge() != null»
				// fail edge «getFailEdge()»
				try {
					try_catch_depth++;
			«ENDIF»
			
			// execute the operation
			// if we are at the root try/catch, catch the exception explicitly
			if (try_catch_depth == 0 «IF getFailEdge() != null»&& false /* we have a fail edge -- run the "else" block */«ENDIF» ) {
				try {
					// get chained functions
					var function_queue = function() {
						// continue with any chained operations
						«EXPAND ExecutionFlow::continueChainedOperations(php) FOR this»
					}
					var function_queue_queued = false;
				
					«EXPAND ExecutionFlow::executionFlow(true, container, php) FOR startNode()-»
					
					// should we still run the chained functions?
					if (!function_queue_queued)
						function_queue();
				} catch (e if e instanceof IamlJavascriptException) {
					// unexpected exception
					alert("Unexpected exception: " + e);
				}
			} else {
				// get chained functions
				var function_queue = function() {
					// continue with any chained operations
					«EXPAND ExecutionFlow::continueChainedOperations(php) FOR this»
				}
				var function_queue_queued = false;
			
				«EXPAND ExecutionFlow::executionFlow(true, container, php) FOR startNode()-»
				
				// should we still run the chained functions?
				if (!function_queue_queued)
					function_queue();
			}					

			«IF getFailEdge() != null»
					try_catch_depth--;
				} catch (e if e instanceof IamlJavascriptException) {
					debug("Caught exception " + e);
					«EXPAND Failure::failWire(php) FOR getFailEdge()»
				}
			«ENDIF»

			running_«safeName()-» = false;
		}
		«ENDIF»
	}
«ENDDEFINE»
