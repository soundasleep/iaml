«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE setApplicationValuePhp FOR model::InternetApplication-»
<?php
/**
 * For setting an application value.
 * 
 * $page_id lets the server know which page the client is currently on;
 * the script will search through all properties on the InternetApplication
 * and let the client know if any of these properties (contained on
 * page $page_id) need to update. 
 */
 
require("config.php");		// runtime library configuration
require(IAML_RUNTIME_ROOT."global.php");	// runtime library import

«EXPAND template::domain::Definitions::domainDefinitions»

log_message("set_application_value.php? " . print_r($_GET, true));

// the property to set
$id = require_get("id");

// the current page ID we are on
// (used to select which elements to inform the client to update)
$page_id = require_get("page");

// the value to set the property to
$arg0 = require_get("arg0");

set_application_value($id, $arg0);
log_message("set_application_value.php: setting id=$id, arg0=$arg0");

echo "ok";

/* Is there additional actions we should do on the client-side once this
 * property has changed? */
try {
	«EXPAND potentialUpdatesRequired FOREACH allApplicationElementProperties(this)»
} catch (IamlRuntimeException $e) {
	// redirect to the exception page
	$url = "exception.php?fail=" . urlencode($e->getMessage() . " [from setApplicationValue]");
	log_message(print_r($e, true));
	log_message("[update exception handler] Redirecting to '$url' (fail)");

	log_message("redirect " 
		. escape_parameter_string($url));
	echo "\nredirect " 
		. escape_parameter_string($url);				
	die;
}

«ENDDEFINE»

«DEFINE potentialUpdatesRequired FOR model::ApplicationElementProperty»
	if ($id == "«safeName()-»") {
		/* Property "«name-»" («id-») */
		
		«REM»expand the direct wires from the property«ENDREM»
		«EXPAND directPropertyUpdatesFrom FOREACH outEdges»
		«EXPAND directPropertyUpdatesTo FOREACH inEdges»
		
		«REM»is this property used as the input for a SelectWire?«ENDREM»
		«REM»is this property's parent used as the input for a SelectWire?«ENDREM»
		«IF model::visual::InputTextField.isInstance(eContainer)»
			«EXPAND potentialContainerUpdates FOR (model::visual::InputTextField) eContainer»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE directPropertyUpdatesFrom FOR model::WireEdge»
«ENDDEFINE»
«DEFINE directPropertyUpdatesTo FOR model::WireEdge»
«ENDDEFINE»

«DEFINE directPropertyUpdatesFrom FOR model::wires::SyncWire»
	«IF model::ApplicationElementProperty.isInstance(to)»
		«EXPAND template::operations::OutgoingValues::outgoingValueTarget(true, "arg0") FOR (model::ApplicationElementProperty) to»
	«ENDIF»
«ENDDEFINE»

/* bidirectionality */
«DEFINE directPropertyUpdatesTo FOR model::wires::SyncWire»
	«IF model::ApplicationElementProperty.isInstance(from)»
		«EXPAND template::operations::OutgoingValues::outgoingValueTarget(true, "arg0") FOR (model::ApplicationElementProperty) from»
	«ENDIF»
«ENDDEFINE»

«DEFINE directPropertyUpdatesFrom FOR model::wires::SetWire»
	«IF model::ApplicationElementProperty.isInstance(to)»
		«EXPAND template::operations::OutgoingValues::outgoingValueTarget(true, "arg0") FOR (model::ApplicationElementProperty) to»
	«ENDIF»
«ENDDEFINE»

«DEFINE potentialContainerUpdates FOR model::visual::InputTextField»
	«EXPAND potentialUpdates FOREACH outEdges»
«ENDDEFINE»

«DEFINE potentialUpdates FOR model::WireEdge»
	«EXPAND exception FOR throwException("Unknown potential update wire edge: " + this)»
«ENDDEFINE»

«DEFINE potentialUpdates FOR model::wires::ParameterWire»
	/* ParameterWire "«this-»" */
	«EXPAND potentialUpdatesParameter FOR to»
«ENDDEFINE»
«DEFINE potentialUpdates FOR model::wires::SyncWire»
	/* SyncWire "«this-»" */
	«EXPAND potentialUpdatesParameter FOR from»
	«EXPAND potentialUpdatesParameter FOR to»
«ENDDEFINE»
«DEFINE potentialUpdates FOR model::wires::SetWire»
	/* SetWire "«this-»" */
	«EXPAND potentialUpdatesParameter FOR to»
«ENDDEFINE»

«DEFINE potentialUpdatesParameter FOR model::WireEdgesSource»
	/* ignore «this» */
«ENDDEFINE»
«DEFINE potentialUpdatesParameter FOR model::WireEdgeDestination»
	/* ignore «this» */
«ENDDEFINE»

«DEFINE potentialUpdatesParameter FOR model::wires::SelectWire»
	/* SelectWire "«this-»" */
	«EXPAND potentialUpdateDestination FOR to»
«ENDDEFINE»

«DEFINE potentialUpdateDestination FOR model::WireEdgeDestination»
	«EXPAND exception FOR throwException("Unknown update wire edge destination: " + this)»
«ENDDEFINE»

«DEFINE potentialUpdateDestination FOR model::DomainObjectInstance»
	/* DomainObjectInstance "«this-»" */
	$object = get_object_instance_«safeName()»(); // parameters are from server-side
	«EXPAND potentialUpdateDestinationAttributes FOREACH attributes»
	
	«EXPAND potentialUpdateDesinationWires FOREACH inEdges.typeSelect(model::wires::SyncWire)»
	«EXPAND potentialUpdateDesinationWires FOREACH outEdges.typeSelect(model::wires::SyncWire)»
	«EXPAND potentialUpdateDesinationWires FOREACH outEdges.typeSelect(model::wires::SetWire)»
«ENDDEFINE»

«DEFINE potentialUpdateDestination FOR model::DomainAttributeInstance»
	/* DomainAttributeInstance "«this-»" */
	$value = get_attribute_instance_«safeName()»(); // parameters are from server-side
	«EXPAND potentialUpdateDesinationWires FOREACH inEdges.typeSelect(model::wires::SyncWire)»
	«EXPAND potentialUpdateDesinationWires FOREACH outEdges.typeSelect(model::wires::SyncWire)»
	«EXPAND potentialUpdateDesinationWires FOREACH outEdges.typeSelect(model::wires::SetWire)»
«ENDDEFINE»

«DEFINE potentialUpdateDestinationAttributes FOR model::DomainAttributeInstance»
	/* attribute "«name»" («this») */
	$value = $object["«safeNameString(name)-»"];
	«EXPAND potentialUpdateDesinationWires FOREACH inEdges.typeSelect(model::wires::SyncWire)»
	«EXPAND potentialUpdateDesinationWires FOREACH outEdges.typeSelect(model::wires::SyncWire)»
	«EXPAND potentialUpdateDesinationWires FOREACH outEdges.typeSelect(model::wires::SetWire)»
«ENDDEFINE»

«DEFINE potentialUpdateDesinationWires FOR model::wires::SyncWire»
	/* SyncWire "«this-»" */
	«EXPAND outgoingValue FOR from»
	«EXPAND outgoingValue FOR to»
«ENDDEFINE»
«DEFINE potentialUpdateDesinationWires FOR model::wires::SetWire»
	/* SetWire "«this-»" */
	«EXPAND outgoingValue FOR to»
«ENDDEFINE»

«DEFINE outgoingValue FOR model::WireEdgesSource»
«ENDDEFINE»
«DEFINE outgoingValue FOR model::WireEdgeDestination»
«ENDDEFINE»
«DEFINE outgoingValue FOR model::visual::InputTextField»
	«EXPAND outgoingValue FOREACH properties.select(e|e.name=="fieldValue")»
«ENDDEFINE»

«DEFINE outgoingValue FOR model::ApplicationElementProperty»
	if ($page_id == "«safeNameString(containingPage(this).id)-»") {
		/* the property "«this»" needs to be updated on the client */
		«IF eContainer.metaType.isAssignableFrom(model::visual::InputTextField)»
			log_message("outgoing value to '«eContainer»' («safeNameString(((model::visual::InputTextField) eContainer).id)»): '$value'");
			log_message("set_value " 
				. escape_parameter_string("«safeNameString(((model::visual::InputTextField) eContainer).id)»")
				. " "
				. escape_parameter_string($value));
			echo "\nset_value " 
				. escape_parameter_string("«safeNameString(((model::visual::InputTextField) eContainer).id)»")
				. " "
				. escape_parameter_string($value);				
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»