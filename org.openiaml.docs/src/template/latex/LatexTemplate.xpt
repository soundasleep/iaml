«IMPORT modeldoc»

«EXTENSION metamodel::ModeldocExtensions»

/**
 * Macros for if/then/else
 */ 
«DEFINE ifThenOpen(String key) FOR emf::EObject»
\ifthenelse{\equal{\include«key»}{yes}}{
\begin{modeldoc«key»}
«ENDDEFINE»

«DEFINE ifThenClose(String key) FOR emf::EObject»
\end{modeldoc«key»}
}{}% if «key»
«ENDDEFINE»

/**
 * Invidivual class latex template
 */
«DEFINE latexClass(modeldoc::ModelDocumentation root) FOR modeldoc::EMFClass»
	«FILE "output/latex/" + name + ".tex"»

% generated ModelDoc latex for class «name»

\hypertarget{model reference:«humanise(name)»}{}
\hypertarget{model reference:«humanise(name)»s}{}
\section{«humanise(name)»}
\label{section:model-reference:«latexise(name)»}

% tagline

«EXPAND ifThenOpen("Tagline")»
	«IF tagline != null»
	«EXPAND LatexTemplate::javadocElementToLatex FOR tagline»
	«ELSE»
	\textbf{TODO} Tagline for «EXPAND modelLink».
	«ENDIF»
«EXPAND ifThenClose("Tagline")»

«IF !additionalLatex.isEmpty»
% additional latex documentation
«FOREACH additionalLatex.description AS latex»
«latex.value-»

«ENDFOREACH»
«ENDIF»

«EXPAND ifThenOpen("Rationale")»
	% Rationale
	«IF rationale != null»
	«EXPAND LatexTemplate::javadocElementToLatex FOR rationale»
	«ELSE»
	\textbf{TODO} Rationale for «EXPAND modelLink».
	«ENDIF»
«EXPAND ifThenClose("Rationale")»

«EXPAND ifThenOpen("Structure")»
	% Structure
	«IF abstract»
		«IF interface»
			\modeldocAbstractInterface
		«ELSE»
			\modeldocAbstract
		«ENDIF»
	«ELSEIF interface»
		\modeldocInterface
	«ENDIF»
	
	«IF !supertypes.isEmpty»
	«EXPAND ifThenOpen("StructureExtends")»
		«EXPAND modelLink FOREACH supertypes.sortBy(t|t.name) SEPARATOR ", "» 
	«EXPAND ifThenClose("StructureExtends")»
	«ENDIF»
	
	«IF !subtypes.isEmpty»
	«EXPAND ifThenOpen("StructureSubtypes")»
		«EXPAND modelLink FOREACH subtypes.sortBy(t|t.name) SEPARATOR ", "» 
	«EXPAND ifThenClose("StructureSubtypes")»
	«ENDIF»
	
	«IF !allSubtypes().without(subtypes).isEmpty»
	«EXPAND ifThenOpen("StructureAllSubtypes")»
		«EXPAND modelLink FOREACH allSubtypes().without(subtypes).sortBy(t|t.name) SEPARATOR ", "» 
	«EXPAND ifThenClose("StructureAllSubtypes")»
	«ENDIF»
«EXPAND ifThenClose("Structure")»

% visual representation
«IF abstract || interface»
% no visual representation: class is abstract, or an interface 
«ELSE»
«EXPAND ifThenOpen("Visual")»
	«IF gmfEditor==null»
		«EXPAND ifThenOpen("VisualMissing")»
	«ENDIF»
	\begin{figure}[htb]
	\centering
	% TODO this should be using SVG images, not PNG
	«IF gmfEditor == null»
	\textbf{TODO} No visual representation found for «EXPAND modelLink»
	«ELSE»
	\includegraphics{elements/«name».eps}
	«ENDIF»
	\modeldocVisualCaption{«humanise(name)»}
	\label{fig:reference-«name»}
	\end{figure}

	\modeldocVisualReference{fig:reference-«name»}
	«IF gmfEditor==null»
		«EXPAND ifThenClose("VisualMissing")»
	«ENDIF»
	
	«EXPAND ifThenOpen("VisualRationale")»
		% Rationale behind the visual representation; still has to be implemented.
		\textbf{TODO} Visual representation rationale.
		% It uses the orange background of all input elements\footnote{Not implemented yet}, and uses a textual icon of \verb|'A'| to signify it is editable.
	«EXPAND ifThenClose("VisualRationale")»
«EXPAND ifThenClose("Visual")»
«ENDIF»

«EXPAND latexAttributes»

«EXPAND latexChildren»

«EXPAND latexReferences»

«EXPAND latexEvents»

«EXPAND latexConditions»

«EXPAND latexOperations»

«EXPAND latexInferenceSemantics»

«EXPAND latexConstraints»

«EXPAND latexImplementationNotes»

	«ENDFILE»
«ENDDEFINE»

«DEFINE latexAttributes FOR modeldoc::EMFClass»	
«IF !attributes.union(getInheritedAttributes(this)).isEmpty»
	«EXPAND ifThenOpen("Attributes")»
	% Attributes

	«IF !attributes.isEmpty»
		«EXPAND ifThenOpen("AttributesDirect")»
				
		\begin{modeldocList}
		«FOREACH attributes.sortBy(a|a.name) AS attribute»
		  \item \modeldocName{«convertHTMLIntoLatex(attribute.name)»} : «EXPAND bounds(attribute.lowerBound, attribute.upperBound)» \modeldocAttributeType{«convertHTMLIntoLatex(attribute.type)»}
			«IF attribute.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR attribute.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
		\end{modeldocList}
		
		«EXPAND ifThenClose("AttributesDirect")»
	«ENDIF»
	
	«IF !getInheritedAttributes(this).isEmpty»

		«EXPAND ifThenOpen("AttributesInherited")»
		«FOREACH getInheritedAttributes(this).sortBy(a|a.name) AS attribute SEPARATOR "; "»\inheritedElement{\modeldocName{«convertHTMLIntoLatex(attribute.name)»}}{«EXPAND modelLink FOR attribute.containingType»}«ENDFOREACH»
		«EXPAND ifThenClose("AttributesInherited")»
	«ENDIF»

	«EXPAND ifThenClose("Attributes")»
«ENDIF»
«ENDDEFINE»

«DEFINE latexChildren FOR modeldoc::EMFClass»
«IF !references.union(getInheritedReferences(this)).select(r|r.containment)
		.reject(r|r.type.name == "Event")
		.reject(r|r.type.name.endsWith("Function"))
		.reject(r|r.type.name.endsWith("Operation"))
		.isEmpty»
	«EXPAND ifThenOpen("Children")»

	«IF !references.select(r|r.containment)
			.reject(r|r.type.name == "Event")
			.reject(r|r.type.name.endsWith("Function"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		«EXPAND ifThenOpen("ChildrenDirect")»
		\begin{modeldocList}
		«FOREACH references.select(r|r.containment)
				.reject(r|r.type.name == "Event")
				.reject(r|r.type.name.endsWith("Function"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
		\end{modeldocList}
		«EXPAND ifThenClose("ChildrenDirect")»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.containment)
			.reject(r|r.type.name == "Event")
			.reject(r|r.type.name.endsWith("Function"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		«EXPAND ifThenOpen("ChildrenInherited")»
		«FOREACH getInheritedReferences(this).select(r|r.containment)
				.reject(r|r.type.name == "Event")
				.reject(r|r.type.name.endsWith("Function"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref SEPARATOR "; "»\inheritedElement{\modeldocName{«ref.name»}}{«EXPAND modelLink FOR ref.containingType»}«ENDFOREACH»
		«EXPAND ifThenClose("ChildrenInherited")»
	«ENDIF»
	«EXPAND ifThenClose("Children")»
«ENDIF»
«ENDDEFINE»

«DEFINE latexReferences FOR modeldoc::EMFClass»
«IF !references.union(getInheritedReferences(this)).select(r|!r.containment)
		.reject(r|r.type.name == "Event")
		.reject(r|r.type.name.endsWith("Function"))
		.reject(r|r.type.name.endsWith("Operation"))
		.isEmpty»
	«EXPAND ifThenOpen("References")»

	«IF !references.select(r|!r.containment)
			.reject(r|r.type.name == "Event")
			.reject(r|r.type.name.endsWith("Function"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		«EXPAND ifThenOpen("ReferencesDirect")»
		\begin{modeldocList}
		«FOREACH references.select(r|!r.containment)
				.reject(r|r.type.name == "Event")
				.reject(r|r.type.name.endsWith("Function"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
		\end{modeldocList}
		«EXPAND ifThenClose("ReferencesDirect")»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|!r.containment)
			.reject(r|r.type.name == "Event")
			.reject(r|r.type.name.endsWith("Function"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		«EXPAND ifThenOpen("ReferencesInherited")»
		«FOREACH getInheritedReferences(this).select(r|!r.containment)
				.reject(r|r.type.name == "Event")
				.reject(r|r.type.name.endsWith("Function"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref SEPARATOR "; "»\inheritedElement{\modeldocName{«ref.name»}}{«EXPAND modelLink FOR ref.containingType»}«ENDFOREACH»
		«EXPAND ifThenClose("ReferencesInherited")»
	«ENDIF»
	«EXPAND ifThenClose("References")»
«ENDIF»
«ENDDEFINE»

«DEFINE latexEvents FOR modeldoc::EMFClass»
«IF !references.union(getInheritedReferences(this))
		.select(r|r.type.name == "Event")
		.isEmpty»
	«EXPAND ifThenOpen("Events")»

	«IF !references.select(r|r.type.name == "Event").isEmpty»
		«EXPAND ifThenOpen("EventsDirect")»
		\begin{modeldocList}
		«FOREACH references.select(r|r.type.name == "Event").sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
		\end{modeldocList}
		«EXPAND ifThenClose("EventsDirect")»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.type.name == "Event").isEmpty»
		«EXPAND ifThenOpen("EventsInherited")»
		«FOREACH getInheritedReferences(this).select(r|r.type.name == "Event").sortBy(a|a.name) AS ref SEPARATOR "; "»\inheritedElement{\modeldocName{«ref.name»}}{«EXPAND modelLink FOR ref.containingType»}«ENDFOREACH»
		«EXPAND ifThenClose("EventsInherited")»
	«ENDIF»
	«EXPAND ifThenClose("Events")»
«ENDIF»
«ENDDEFINE»

«DEFINE latexConditions FOR modeldoc::EMFClass»
«IF !references.union(getInheritedReferences(this))
		.select(r|r.type.name.endsWith("Condition"))
		.isEmpty»
	«EXPAND ifThenOpen("Conditions")»

	«IF !references.select(r|r.type.name.endsWith("Condition")).isEmpty»
		«EXPAND ifThenOpen("ConditionsDirect")»
		\begin{modeldocList}
		«FOREACH references.select(r|r.type.name.endsWith("Condition")).sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
		\end{modeldocList}
		«EXPAND ifThenClose("ConditionsDirect")»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.type.name.endsWith("Condition")).isEmpty»
		«EXPAND ifThenOpen("ConditionsInherited")»
		«FOREACH getInheritedReferences(this).select(r|r.type.name.endsWith("Condition")).sortBy(a|a.name) AS ref SEPARATOR "; "»\inheritedElement{\modeldocName{«ref.name»}}{«EXPAND modelLink FOR ref.containingType»}«ENDFOREACH»
		«EXPAND ifThenClose("ConditionsInherited")»
	«ENDIF»
	«EXPAND ifThenClose("Conditions")»
«ENDIF»
«ENDDEFINE»

«DEFINE latexOperations FOR modeldoc::EMFClass»
«IF !references.union(getInheritedReferences(this))
		.select(r|r.type.name.endsWith("Operation"))
		.isEmpty»
	«EXPAND ifThenOpen("Operations")»

	«IF !references.select(r|r.type.name.endsWith("Operation")).isEmpty»
		«EXPAND ifThenOpen("OperationsDirect")»
		\begin{modeldocList}
		«FOREACH references.select(r|r.type.name.endsWith("Operation")).sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
		\end{modeldocList}
		«EXPAND ifThenClose("OperationsDirect")»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.type.name.endsWith("Operation")).isEmpty»
		«EXPAND ifThenOpen("OperationsInherited")»
		«FOREACH getInheritedReferences(this).select(r|r.type.name.endsWith("Operation")).sortBy(a|a.name) AS ref SEPARATOR "; "»\inheritedElement{\modeldocName{«ref.name»}}{«EXPAND modelLink FOR ref.containingType»}«ENDFOREACH»
		«EXPAND ifThenClose("OperationsInherited")»
	«ENDIF»
	«EXPAND ifThenClose("Operations")»
«ENDIF»
«ENDDEFINE»

«DEFINE bounds(int lowerBound, int upperBound) FOR emf::EObject-»
«IF upperBound != 0 || lowerBound != 1-»
«IF lowerBound == 1 && upperBound == 1-»«REM»ignore 1..1«ENDREM»«ELSEIF upperBound == lowerBound-»
«lowerBound-»
«ELSEIF upperBound == -1-»
[«lowerBound»..*]«ELSE-»
[«lowerBound»..«upperBound»]«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE latexInferenceSemantics FOR modeldoc::EMFClass»
	«IF inferenceSemantics.isEmpty»
		\modeldocNoInferenceSemantics
	«ELSE»
		«EXPAND ifThenOpen("Inference")»
		\begin{modeldocList}
			«EXPAND latexInferenceSemantic FOREACH inferenceSemantics»
		\end{modeldocList}
		«EXPAND ifThenClose("Inference")»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexInferenceSemantic FOR modeldoc::InferenceSemantic»
	\item «EXPAND javadocElementToLatex FOR description»
«ENDDEFINE»

«DEFINE latexConstraints FOR modeldoc::EMFClass»
	«IF constraints.isEmpty»
		\modeldocNoDirectConstraints
	«ELSE»
		«EXPAND ifThenOpen("Constraints")»
		\begin{modeldocList}
			«EXPAND latexConstraint FOREACH constraints»
		\end{modeldocList}
		«EXPAND ifThenClose("Constraints")»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexConstraint FOR modeldoc::Constraint»	
	\item «IF type == modeldoc::ConstraintType::WARNING»\constraintWarning«ELSE»\constraintError«ENDIF» «convertHTMLIntoLatex(message)»
«ENDDEFINE»

«DEFINE latexImplementationNotes FOR modeldoc::EMFClass»
	«IF implementationNotes.isEmpty»
		\modeldocNoDirectImplementationNotes
	«ELSE»
		«EXPAND ifThenOpen("ImplementationNotes")»
		\begin{modeldocList}
			«EXPAND latexImplementationNote FOREACH implementationNotes»
		\end{modeldocList}
		«EXPAND ifThenClose("ImplementationNotes")»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexImplementationNote FOR modeldoc::ImplementationNote»
	\item «EXPAND javadocElementToLatex FOR description»
«ENDDEFINE»

«DEFINE modelLink FOR modeldoc::EMFClass-»
«IF this==null»\textbf{TODO} \code{null} class.«ELSE»\modelLink{«humanise(name)»}«ENDIF»«ENDDEFINE» 

«DEFINE javadocElementToLatex FOR modeldoc::Reference»
	\textbf{TODO} Unknown javadoc '«this»'
«ENDDEFINE»

«DEFINE javadocElementToLatex FOR modeldoc::JavadocTagElement»«IF name == "@inference" || name == "@operational" || name == "@implementation" || name == "@example"-»
«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«EXPAND javadocSemanticsElementToLatex FOR fragments.first()-»
«EXPAND javadocElementToLatex FOREACH fragments.withoutFirst()-»
«ELSEIF name == "@model" || name == "@link"-»
«EXPAND javadocModelElementToLatex FOREACH fragments-»
«ELSE-»
«EXPAND javadocElementToLatex FOREACH fragments-»
«ENDIF-»«ENDDEFINE»

«DEFINE javadocElementToLatex FOR modeldoc::JavadocTextElement-»
«IF !(value.startsWith(",") || value.startsWith(".") || value.startsWith("?") || value.startsWith(")"))»«" "»«ENDIF»«convertHTMLIntoLatex(value)-»
«ENDDEFINE»

«REM»the formatting is ugly, but we sadly can't have _any_ whitespace«ENDREM»
«DEFINE javadocModelElementToLatex FOR modeldoc::JavadocTextElement-»
«" "»«IF value.contains(".")-»
«convertHTMLIntoLatex(value)-»«REM»the value contains an illegal character; it can't link to a model element«ENDREM»
«ELSE-»
«IF value.trim().contains(" ")-»
«LET value.trim().split(" ") AS bits-»
«FOREACH bits.withoutFirst().withoutLast() AS s»«s» «ENDFOREACH»\modelLink{«humanise(bits.last())»}«ENDLET-»
«ELSE-»
«IF value.trim().contains("#")-»
«LET value.trim().split("#") AS hashBits-»
\modeldocName{«hashBits.withoutFirst().first()»}«ENDLET-» 
«ELSE-»
\modelLink{«humanise(value)»}«ENDIF-»
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«DEFINE javadocSemanticsElementToLatex FOR modeldoc::JavadocTextElement»
	«FOREACH value.trim().split(" ").withoutFirst() AS s»«convertHTMLIntoLatex(s)» «ENDFOREACH»
«ENDDEFINE»
«DEFINE javadocSemanticsElementToLatex FOR modeldoc::JavadocFragment»
	\textbf{TODO} Unknown semantic starting tag '«this»'.
«ENDDEFINE»

/* no special meaning; just render it like normal */
«DEFINE javadocModelElementToLatex FOR modeldoc::JavadocFragment»
	«EXPAND javadocElementToLatex» 
«ENDDEFINE»
