«IMPORT iaml»

/**
 * Visually rendering a label.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * @implementation Label
 *   The value of {@model Property} 'fieldValue' of a {@model Label}
 *   overrides the value of the Label.defaultValue attribute.
 * @implementation Label
 *		Any {@model VisibleThing children} of a {@model Label} are also rendered
 *		as part of that Label.
 */
«DEFINE renderLabel(model::visual::Frame currentFrame) FOR model::visual::Label-»
	<label
		id="«safeNameString(id)-»<?php echo «EXPAND getIteratorListIndex»; ?>"
		class="label_«safeNameString(name)»" 
		«EXPAND EventHandlers::getInlineClickJavascript(currentFrame)»
		«REM»has it been hidden by anything?«ENDREM»
		<?php
		/* has this label been hidden by anything? */
		if (
		«IF containingSession() != null»
			(require_session("«safeName(containingSession())»_«safeName()»_hidden", null) !== null)
			&& require_session("«safeName(containingSession())»_«safeName()»_hidden") 
		«ELSE»
			(get_application_value("«safeName()»_hidden", null) !== null)
			&& get_application_value("«safeName()»_hidden", false) 
		«ENDIF»
		) {
			echo 'style="display: none;"';
		}
		?>
		> 

	<?php
		/* get the label value */
		$label_set = false;
		$value = null;
		«EXPAND getLabelFieldValue(currentFrame, "value") FOR this»
		if ($label_set) {
			echo htmlspecialchars($value);
		}
	?>

		«REM»expand all children«ENDREM»
		«EXPAND Render::renderVisual(currentFrame) FOREACH children.sortBy(c|c.renderOrder)-»
	</label>
	
	«EXPAND EventHandlers::getScriptClickDefinition(currentFrame)»
	
	«IF onAccess != null»
	<?php if (!isset($skip_contained_onloads) || !$skip_contained_onloads) { ?>
	<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			«REM»any on-access events?«ENDREM»
			addOnloadFunction( function() {
				// expand all onAccess
				«EXPAND template::events::EventCall::callEvent(false) FOR onAccess-»
			} );
		/* ]]> */
	</script> 
	<?php } ?>
	«ENDIF»
«ENDDEFINE»

/**
 * Get the current 'value' of the given Label, into the given
 * argument name. Assumed to be in PHP mode.
 *
 * @implementation Label
 *		The rendered {@model Changeable#fieldValue value} of a {@model Label}
 *		is selected from the following order: the set {@model Changeable#fieldValue}; 
 *		the set {@model Changeable#defaultValue}; outgoing
 *		{@model SyncWire}s; incoming {@model SyncWire}s; or incoming {@model SetWire}s.
 */
«DEFINE getLabelFieldValue(model::visual::Frame currentFrame, String argName) FOR model::visual::Label»
	$label_set = false;
	
	«REM»
		an initial value?
		TODO we could have multiple default values; right now we are relying on
		browser behaviour to place this value as lower priority. we should work
		out some way to select it programatically.
	«ENDREM»

	«REM»selected in _reverse order_ to InputTextField, which abused HTML to allow
		another value to override a previously selected value«ENDREM»

	«REM»Label.property[fieldValue] overrides Label.defaultValue«ENDREM»
	«IF fieldValue != null»
		«EXPAND staticInitialValue(currentFrame, argName) FOR fieldValue»
	«ENDIF»			

	«IF defaultValue != null && defaultValue.length > 0»
		// default value
		if (!$label_set) {
			$«argName» = "«escapePhpString(defaultValue)»";
			$label_set = true; 
		} 
	«ENDIF»
	
	«EXPAND getInitialValuesSyncWire(currentFrame, argName) FOREACH outWires.typeSelect(model::wires::SyncWire)» 			 
	«EXPAND getInitialValuesSyncWire(currentFrame, argName) FOREACH inWires.typeSelect(model::wires::SyncWire)» 
	«EXPAND getInitialValuesSetWire(currentFrame, argName) FOREACH inWires.typeSelect(model::wires::SetWire)» 			 
	
«ENDDEFINE»

/* if it connects to a SyncWire that is an Property, use this
   property as the value */
«DEFINE getInitialValuesSyncWire(model::visual::Frame currentFrame, String argName) FOR model::wires::SyncWire»
	«EXPAND staticInitialValue(currentFrame, argName) FOR from»
	«EXPAND staticInitialValue(currentFrame, argName) FOR to»
«ENDDEFINE»

/* if it connects to a SetWire that is an Property, use this
   property as the value */
«DEFINE getInitialValuesSetWire(model::visual::Frame currentFrame, String argName) FOR model::wires::SetWire»
	«EXPAND staticInitialValue(currentFrame, argName) FOR from»
«ENDDEFINE»

/* ignore these sources */
«DEFINE staticInitialValue(model::visual::Frame currentFrame, String argName) FOR model::WireSource»
«ENDDEFINE»
«DEFINE staticInitialValue(model::visual::Frame currentFrame, String argName) FOR model::WireDestination»
«ENDDEFINE»

/* we have a property to provide [in PHP] */
«DEFINE staticInitialValue(model::visual::Frame currentFrame, String argName) FOR model::Property»
	«IF containingSession(this) == null»
		«REM»contained in a Frame or InternetApplication: a static value«ENDREM»
		if (get_application_value("«safeNameString(id)»", null) !== null) {
			$temp = get_application_value("«safeNameString(id)»", "«escapeString(defaultValue)»");
			if (!$label_set) {
				$«argName» = $temp;
				$label_set = true;
			}
		}		
	«ELSE»
		«REM»contained in a Session: a session value«ENDREM»
		if (has_session("«safeName(containingSession(this))»_«safeNameString(id)»", null) !== null) {
			$temp = require_session("«safeName(containingSession(this))»_«safeNameString(id)»", "«escapeString(defaultValue)»");
			if (!$label_set) {
				$«argName» = $temp;
				$label_set = true;
			}
		}		
	«ENDIF»
«ENDDEFINE»

«DEFINE staticInitialValue(model::visual::Frame currentFrame, String argName) FOR model::DomainAttributeInstance»
	«REM»from a domain attribute instance.«ENDREM»
	if (!isset($check_attribute_instances) || !$check_attribute_instances || ($check_attribute_instances && has_attribute_instance_«safeName()»())) {
		$temp = get_attribute_instance_«safeName()»();
		if (!$label_set) {
			$«argName» = $temp;
			$label_set = true;
		}
	}
«ENDDEFINE»

«DEFINE staticInitialValue(model::visual::Frame currentFrame, String argName) FOR model::QueryParameter»
	«REM»from the query«ENDREM»
	$temp = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
	if (!$label_set) {
		$«argName» = $temp;
		$label_set = true;
	}		
«ENDDEFINE»
	
/**
 * If this VisibleThing is contained within an IteratorList, we will need an
 * index in order to reference it correctly. This returns the current list iterator,
 * or the empty string '' if it is not contained directly within an IteratorList.
 * If the index is 0, also return the empty string.
 * Assumed to be in PHP mode.
 */
«DEFINE getIteratorListIndex FOR model::VisibleThing»
	«IF eContainer == null || !model::visual::IteratorList.isInstance(eContainer)»
		""
	«ELSE»
		(function_exists('get_list_iterator_index_«safeName(eContainer)»') && get_list_iterator_index_«safeName(eContainer)»() ? get_list_iterator_index_«safeName(eContainer)»() : "")
	«ENDIF»
«ENDDEFINE»
