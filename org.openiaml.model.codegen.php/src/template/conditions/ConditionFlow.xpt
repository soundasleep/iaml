«IMPORT iaml»

/**
 * The flow of execution within an condition.
 *
 * TODO the implementation of Conditions is still in a single-threaded way;
 * we need to use the stack-based implementation (i.e. from CompositeOperation).
 */
«EXTENSION template::GeneratorExtensions»

/**
 * TODO unresolved: Can a condition have multiple outExecutions?
 */
«DEFINE conditionFlow(Boolean php, model::visual::Page currentPage) FOR model::operations::StartNode-»
	// flow starts here
	«FOREACH outExecutions AS e-»
		«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE conditionFlow(Boolean php, model::visual::Page currentPage) FOR model::ActivityNode-»
	// nothing for an activity node
«ENDDEFINE»

/**
 * The individual steps within a flow.
 */
 
/* an edge that is the end (both StartNode and FinishNode also fall into this) */
«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::ExecutionEdgeDestination-»
	«EXPAND exception FOR throwException("Unexpected node in CompositeCondition: " + this)»
	// do nothing «this-»
«ENDDEFINE»

/* expand the definition of an operation, assumed to be called as part of an existing function call */
«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::DecisionOperation-»
	«REM»compare operations«ENDREM»
	if (
	«IF name == "equal?"-»
		«REM»check all inflow targets are identical«ENDREM»
		«IF php»
			«EXPAND template::operations::Contents::equalDecisionOperationSource(php, currentPage) FOREACH inFlows SEPARATOR " == "»
		«ELSE»
			is_array_equal(new Array(«EXPAND template::operations::Contents::equalDecisionOperationSource(php, currentPage) FOREACH inFlows SEPARATOR ", "»))
		«ENDIF»
	«ELSEIF name == "true?"-»
		«REM»check all inflow targets are identical«ENDREM»
		«IF php»
			«EXPAND template::operations::Contents::trueDecisionOperationSource(php, currentPage) FOREACH inFlows SEPARATOR " == "»
		«ELSE»
			is_array_true(new Array(«EXPAND template::operations::Contents::trueDecisionOperationSource(php, currentPage) FOREACH inFlows SEPARATOR ", "»))
		«ENDIF»
	«ELSE»
		«REM»??? who knows«ENDREM»
		«EXPAND exception FOR throwException("Unknown decision operation to expand '" + name + ": " + this)»
	«ENDIF»
	) {
		// passes
		«IF hasPassFlow(this)»
			«FOREACH getPassFlows() AS e-»
				«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
			«ENDFOREACH»
		«ELSE»
			// no pass flow
		«ENDIF»
	} else {
		// fails
		«IF hasFailFlow(this)»
			«FOREACH getFailFlows() AS e-»
				«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
			«ENDFOREACH»
		«ELSE»
			// no fail flow
		«ENDIF»
	}
«ENDDEFINE»

/**
 * TODO expand each of these different types of Conditions into
 * new templates.
 */
«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::DecisionCondition»
	// DecisionCondition «this»
	if (!
		«IF name=="xpathMatch"»
			xpathMatch(«EXPAND conditionInflows(php, currentPage) FOREACH inFlows SEPARATOR ","»)
		«ELSEIF name=="emailAddress"»
			emailAddressMatch(«EXPAND conditionInflows(php, currentPage) FOREACH inFlows SEPARATOR ","»)
		«ELSEIF name=="is set?"»
			«EXPAND conditionIsSet(php, currentPage) FOREACH inFlows SEPARATOR " && "»
		«ELSE»
			«REM»unknown condition«ENDREM»
			«EXPAND exception FOR throwException("Unknown DecisionCondition '" + name + "': " + this)»
		«ENDIF»
	) {
		«REM»continue expanding following conditions (if any)«ENDREM»
		«FOREACH getFailFlows() AS e-»
			«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
		«ENDFOREACH»
	} else {
		«REM»continue expanding following conditions (if any)«ENDREM»
		«FOREACH getPassFlows() AS e-»
			«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
		«ENDFOREACH»
	}
«ENDDEFINE»

«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::CancelNode-»
	return false; /* condition failed: «exceptionText» */
«ENDDEFINE»

«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::FinishNode-»
	return true; /* condition passed */
«ENDDEFINE»

/**
 * Translate DataFlowEdges into actual sources of data
 */
«DEFINE conditionInflows(Boolean php, model::visual::Page currentPage) FOR model::DataFlowEdge-»
	«EXPAND template::operations::DataFlow::dataSource(php, currentPage) FOR from-»
«ENDDEFINE»

/**
 * Translate DataFlowEdges into 'is set' values
 */
«DEFINE conditionIsSet(Boolean php, model::visual::Page currentPage) FOR model::DataFlowEdge-»
	«EXPAND template::operations::DataFlow::isSet(php, currentPage) FOR from-»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
