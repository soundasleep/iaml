/**
 * We extend the editor to automatically provide FileReference editors
 * through FileDialogs. Based on http://www.jevon.org/wiki/Using_EDataTypes_in_GMF_2
 */
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

/**
 * We have to redefine the whole method, and then add some additional
 * helper classes.
 */
«AROUND getPropertySourceMethod FOR gmfgen::GenCustomPropertyTab-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.ui.views.properties.IPropertySource getPropertySource(Object object) {
		if (object instanceof org.eclipse.ui.views.properties.IPropertySource) {
			return (org.eclipse.ui.views.properties.IPropertySource) object;
		}
		org.eclipse.emf.common.notify.AdapterFactory af = getAdapterFactory(object);
		if (af != null) {
			org.eclipse.emf.edit.provider.IItemPropertySource ips = (org.eclipse.emf.edit.provider.IItemPropertySource) af.adapt(object, org.eclipse.emf.edit.provider.IItemPropertySource.class);
			if (ips != null) {
			    // return a custom PropertySource
				return new IamlCustomPropertySource(object, ips);
			}
		}
		if (object instanceof org.eclipse.core.runtime.IAdaptable) {
			return (org.eclipse.ui.views.properties.IPropertySource) ((org.eclipse.core.runtime.IAdaptable) object).getAdapter(org.eclipse.ui.views.properties.IPropertySource.class);
		}
		return null;
	}

	«EXPAND xpt::Common::generatedMemberComment("Provides custom property editor functionality through {@link IamlCustomPropertySource}.")»
	protected class IamlCustomPropertyDescriptor extends org.eclipse.emf.edit.ui.provider.PropertyDescriptor {

		«EXPAND xpt::Common::generatedMemberComment»
		public IamlCustomPropertyDescriptor(Object object,
				org.eclipse.emf.edit.provider.IItemPropertyDescriptor itemPropertyDescriptor) {
			super(object, itemPropertyDescriptor);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.jface.viewers.CellEditor createPropertyEditor(org.eclipse.swt.widgets.Composite composite) {
			org.eclipse.emf.ecore.EClassifier eType = ((org.eclipse.emf.ecore.EStructuralFeature) itemPropertyDescriptor
					.getFeature(object)).getEType();

			final org.eclipse.emf.ecore.EDataType dataType = (org.eclipse.emf.ecore.EDataType) eType;
			if (dataType.equals(org.openiaml.model.model.domain.DomainPackage.eINSTANCE.getFileReference())) {

				org.eclipse.jface.viewers.CellEditor result = new 
						org.eclipse.emf.common.ui.celleditor.ExtendedDialogCellEditor(composite, getEditLabelProvider()) {

					// based on CellEditor
					// org.eclipse.emf.edit.ui.provider.PropertyDescriptor.createEDataTypeCellEditor(EDataType
					// eDataType, Composite composite)
					protected EDataTypeValueHandler valueHandler = new EDataTypeValueHandler(
							dataType);

					@Override
					protected Object openDialogBox(org.eclipse.swt.widgets.Control cellEditorWindow) {

						org.eclipse.swt.widgets.Shell shell = org.eclipse.ui.PlatformUI.getWorkbench().getDisplay()
								.getActiveShell();
						org.eclipse.swt.widgets.FileDialog dialog = new org.eclipse.swt.widgets.FileDialog(shell, org.eclipse.swt.SWT.OPEN);
						dialog.setFileName(valueHandler.toString(getValue()));
						String fileSelected = dialog.open();
						if (fileSelected == null) {
							return getValue();
						}

						return valueHandler.toValue(fileSelected);
					}

				};
				return result;
			}

			return super.createPropertyEditor(composite);
		}

	}

	«EXPAND xpt::Common::generatedMemberComment("A custom property source that provides a custom {@link IamlCustomPropertyDescriptor}, which provides custom property editor functionality.")»
	protected class IamlCustomPropertySource extends org.eclipse.emf.edit.ui.provider.PropertySource {

		«EXPAND xpt::Common::generatedMemberComment»
		public IamlCustomPropertySource(Object object,
				org.eclipse.emf.edit.provider.IItemPropertySource itemPropertySource) {
			super(object, itemPropertySource);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		@Override
	    protected org.eclipse.ui.views.properties.IPropertyDescriptor createPropertyDescriptor(
	    		org.eclipse.emf.edit.provider.IItemPropertyDescriptor itemPropertyDescriptor) {
	        return new IamlCustomPropertyDescriptor(object, itemPropertyDescriptor);
        }

	}	
«ENDAROUND»

