package iaml.generated2;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Wed Oct 15 12:07:43 NZDT 2008
 */
@SuppressWarnings("unchecked")
class KBFragement_rule_2_1 {
    /**
     * Method generated for query /rule_2[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of rule_2
    */
    public static ResultSet<rule_2> rule_2_1(
        final org.openiaml.model.model.InternetApplication slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<rule_2> _result = new ResultSet(KBFragement_rule_2_1.rule_2_1(
                    slot1, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /rule_2[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of rule_2
    */
    static ResourceIterator<rule_2> rule_2_1(
        final org.openiaml.model.model.InternetApplication slot1,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<rule_2> result = new IteratorChain<rule_2>(2) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // rule1  IF /app_name([app],test) THEN /rule_2([app])
                    case 0:
                        return rule_2_1_0(slot1,
                            _derivation.reset(_derivationlevel));

                    // rule1_generated  IF /generated_app_name([app],test) THEN /rule_2([app])
                    case 1:
                        return rule_2_1_1(slot1,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // rule1  IF /app_name([app],test) THEN /rule_2([app])
                    case 0:
                        return "rule1";

                    // rule1_generated  IF /generated_app_name([app],test) THEN /rule_2([app])
                    case 1:
                        return "rule1_generated";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /rule_2[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of rule_2
    */
    private static ResourceIterator<rule_2> rule_2_1_0(
        final org.openiaml.model.model.InternetApplication slot1,
        final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE, slot1);

        // comparing constants in rule head with parameters
        if (!Constants.app.equals(slot1)) {
            return EmptyIterator.DEFAULT;
        }

        // Variable bindings in rule:  IF /app_name([app],test) THEN /rule_2([app])
        class bindingsInRule2 {
            // Property generated for term  "[app]"
            org.openiaml.model.model.InternetApplication p1;

            // Property generated for term  "test"
            java.lang.String p2;
        }
        ;

        final bindingsInRule2 bindings = new bindingsInRule2();
        bindings.p1 = Constants.app;
        bindings.p2 = "test";

        // code for prereq /app_name([app],test)
        final ResourceIterator<app_name> iterator1 = KBFragement_app_name_11.app_name_11(Constants.app,
                "test", _derivation.increaseDepth());

        // code for prereq /rule_2([app])
        final ResourceIterator<rule_2> iterator2 = new NestedIterator<app_name, rule_2>(iterator1) {
                public ResourceIterator<rule_2> getNextIterator(app_name object) {
                    bindings.p1 = Constants.app;
                    bindings.p2 = "test";

                    return new SingletonIterator(new rule_2(bindings.p1));
                }
            };

        return iterator2;
    }

    /**
     * Method generated for query /rule_2[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of rule_2
    */
    private static ResourceIterator<rule_2> rule_2_1_1(
        final org.openiaml.model.model.InternetApplication slot1,
        final DerivationController _derivation) {
        _derivation.log("rule1_generated", DerivationController.RULE, slot1);

        // comparing constants in rule head with parameters
        if (!Constants.app.equals(slot1)) {
            return EmptyIterator.DEFAULT;
        }

        // Variable bindings in rule:  IF /generated_app_name([app],test) THEN /rule_2([app])
        class bindingsInRule3 {
            // Property generated for term  "[app]"
            org.openiaml.model.model.InternetApplication p1;

            // Property generated for term  "test"
            java.lang.String p2;
        }
        ;

        final bindingsInRule3 bindings = new bindingsInRule3();
        bindings.p1 = Constants.app;
        bindings.p2 = "test";

        // code for prereq /generated_app_name([app],test)
        final ResourceIterator<generated_app_name> iterator1 = KBFragement_generated_app_name_11.generated_app_name_11(Constants.app,
                "test", _derivation.increaseDepth());

        // code for prereq /rule_2([app])
        final ResourceIterator<rule_2> iterator2 = new NestedIterator<generated_app_name, rule_2>(iterator1) {
                public ResourceIterator<rule_2> getNextIterator(
                    generated_app_name object) {
                    bindings.p1 = Constants.app;
                    bindings.p2 = "test";

                    return new SingletonIterator(new rule_2(bindings.p1));
                }
            };

        return iterator2;
    }
}
