#created on: 4/11/2008
package org.openiaml.verification.drools.rules.infinite;

#list any import classes here.
import org.openiaml.verification.drools.*;

import org.openiaml.model.model.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.verification.model.validation.*;

global org.openiaml.verification.model.validation.ValidationFactory factory;
global org.openiaml.verification.drools.VerifyHandler verify;

rule "Frame navigating to another Frame on access"
	when
		access : EventTrigger ( )
		p : Frame ( onAccess == access )
		p2 : Frame ( eval(p != p2) )
		navigate : ActionEdge ( from == access, to == p2 )
		not ( NavigatesTo ( from == p, to == p2 ))
	
	then
		NavigatesTo navigatesTo = factory.createNavigatesTo();
		navigatesTo.setFrom(p);
		navigatesTo.setTo(p2);
		insert(navigatesTo);
		
end

rule "Recursiveness of NavigatesTo"
	when
		p1 : Frame ( )
		p2 : Frame ( eval(p1 != p2) )
		n : NavigatesTo( from == p1, to == p2 )
		p3 : Frame ( eval(p2 != p3) )
		n2 : NavigatesTo ( from == p2, to == p3 )
		not ( NavigatesTo ( from == p1, to == p3 ))
	
	then
		NavigatesTo navigatesTo = factory.createNavigatesTo();
		navigatesTo.setFrom(p1);
		navigatesTo.setTo(p3);
		insert(navigatesTo);
	
end

rule "A circular access loop"
	when
		p : Frame ( )
		n : NavigatesTo ( from == p, to == p )
		not (Violation ( source == p ))
	
	then
		Violation violation = factory.createViolation();
		violation.setSource(p);
		violation.setReason("A circular access loop");
		verify.failed(violation);
		insert(violation);

end
	
