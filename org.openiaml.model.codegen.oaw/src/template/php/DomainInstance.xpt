«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/* expand out all domain attribute instances for the page */
«DEFINE expandDomainAttributes FOR model::InternetApplication»
	«EXPAND getDomainAttribute FOREACH getAllDomainAttributeInstances()»
	«EXPAND storeDomainAttribute FOREACH getAllDomainAttributeInstances()»
«ENDDEFINE»
«DEFINE expandDomainAttributes FOR model::visual::Page»
	«EXPAND expandDomainAttributes FOR getRoot()»
«ENDDEFINE»

«DEFINE expandDomainObjects FOR model::InternetApplication»
	«EXPAND getDomainObject FOREACH getRoot().getAllDomainObjectInstances()»
	«EXPAND storeDomainObject FOREACH getRoot().getAllDomainObjectInstances()»
«ENDDEFINE»
«DEFINE expandDomainObjects FOR model::visual::Page»
	«EXPAND expandDomainObjects FOR getRoot()»
«ENDDEFINE»

/* code to get domain attributes */
«DEFINE getDomainAttribute FOR model::DomainAttributeInstance-»
	function get_attribute_instance_«safeName()»($default = false) {
		/* return the current value for attribute id '«id»' */
		«IF eContainer.metaType.isAssignableFrom(model::DomainObjectInstance)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			$obj = get_object_instance_«safeName(eContainer)»();
			return $obj["«name-»"];
		«ELSE»
			/* not contained in an object instance; select it manually */
			«IF inEdges.typeSelect(model::wires::SelectWire).isEmpty»
				throw new IamlRuntimeException("No selection wires exist for attribute instance '«this»'");
			«ELSE»
				«EXPAND evaluateSelectWire FOR inEdges.typeSelect(model::wires::SelectWire).first()»
				$row = $rs->fetch();
				if (!$row) {
					if ($default === false)					
						throw new IamlRuntimeException("Could not find any value instance for attribute '«id»'");
					return $default;
				}
				return $row["«name-»"];
			«ENDIF»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE getDomainObject FOR model::DomainObjectInstance-»
	function get_object_instance_«safeName()»() {
		/* get the object instance '«id»' */
		/* not contained in an object instance; select it manually */
		«IF inEdges.typeSelect(model::wires::SelectWire).isEmpty»
			«IF inEdges.typeSelect(model::wires::NewInstanceWire).isEmpty»
				throw new IamlRuntimeException("No selection or new instance wires exist for object instance '«id»'");
			«ELSE»
				// return a "new" object
				«EXPAND getNewDomainObject(inEdges.typeSelect(model::wires::NewInstanceWire).first()) FOR this»
			«ENDIF»
		«ELSE»
			«EXPAND evaluateSelectWire FOR inEdges.typeSelect(model::wires::SelectWire).first()»
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				throw new IamlRuntimeException("No results found for query '$query'");
			}
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj;
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE getNewDomainObject(model::wires::NewInstanceWire wire) FOR model::DomainObjectInstance-»
	«IF isAutosaveOff()»
		/* autosave is off: don't insert it into the db yet */
		return NEW_OBJECT;
	«ELSE»
		/* autosave is on: insert a new object into the db */
		«IF containingSession() != null»
			// in the session
			if (require_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»', false) === false) {
				// insert a new one
				log_message("Inserting new domain object [session] '«safeNameString(name)»' ('«safeNameString(id)»')");
				
				// where are we loading it from? sets $db
				«EXPAND selectDatabase FOR wire.from»
				
				// create query
				$query = "INSERT INTO «safeNameString(((model::DomainObject) wire.from).name)»
					DEFAULT VALUES";
				
				// execute query
				$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
				$rs->execute() or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));

				// get the inserted id
				$new_id = $db->lastInsertId("id");
				log_message("new session variable id: $new_id");

				// add a link to this
				$_SESSION['new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'] = $new_id;
			}
				
			// return the newly inserted object
			«EXPAND selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT * FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE id=?";
			$args = array(require_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»'));
			log_message("selecting previously created new session object: " . print_r($args, true));

			// execute query
			$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
			$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
			
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				throw new IamlRuntimeException("No results found for query '$query'");
			}
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj;
		«ELSE»
			// in the page
			if (get_application_value('new_object_«safeNameString(id)-»', false) === false) {
				// insert a new one
				log_message("Inserting new domain object [page] '«safeNameString(name)»' ('«safeNameString(id)»')");
				
				// where are we loading it from? sets $db
				«EXPAND selectDatabase FOR wire.from»
				
				// create query
				$query = "INSERT INTO «safeNameString(((model::DomainObject) wire.from).name)»
					DEFAULT VALUES";
				
				// execute query
				$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
				$rs->execute() or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));

				// get the inserted id
				$new_id = $db->lastInsertId("id");
				log_message("new page variable id: $new_id");

				// add a link to this
				set_application_value('new_object_«safeNameString(id)-»', $new_id);
			}
				
			// return the newly inserted object
			«EXPAND selectDatabase FOR wire.from»
			
			// create query
			$query = "SELECT * FROM «safeNameString(((model::DomainObject) wire.from).name)»
				WHERE id=?";
			$args = array(get_application_value('new_object_«safeNameString(id)-»', 'missing'));
			log_message("selecting previously created new page object: " . print_r($args, true));

			// execute query
			$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
			$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
			
			// get just the first result
			$row = $rs->fetch();
			if (!$row) {
				throw new IamlRuntimeException("No results found for query '$query'");
			}
			$obj = array();
			foreach ($row as $key => $value) {
				$obj[$key] = $value;
			}
			return $obj;
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE evaluateSelectWire FOR model::wires::SelectWire»
	/* selection wire «this» */
	
	// where are we loading it from? sets $db
	«EXPAND selectDatabase FOR from»
	
	// create query
	$query = "SELECT * FROM «safeNameString(((model::DomainObject) from).name)»
		WHERE " . «EXPAND getQuery FOR this-»;
	$args = array(«EXPAND template::php::EventTrigger::callOperationParameters(this, false, false) FOREACH inEdges.typeSelect(model::wires::ParameterWire) SEPARATOR ","»);
	
	// execute query
	$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
	$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
«ENDDEFINE»

/* create a SQL query to select a particular value */
«DEFINE getQuery FOR model::wires::SelectWire»
	«IF query == null || query.trim().length == 0»
		«REM»an empty query«ENDREM»
		"1"
	«ELSE-»
		"«query-»" /* direct query */
	«ENDIF-»
«ENDDEFINE»

/* select a database source */
«DEFINE selectDatabase FOR model::WireEdgesSource»
	«EXPAND exception FOR throwException("Cannot connect to a database source from " + this)»
«ENDDEFINE»

«DEFINE selectDatabase FOR model::DomainObject»
	«EXPAND selectDatabaseStore FOR eContainer»	
«ENDDEFINE»

/* select a particular database */
«DEFINE selectDatabaseStore FOR emf::EObject»
	«EXPAND exception FOR throwException("Unknown DomainObject container " + this)»
«ENDDEFINE»

«DEFINE selectDatabaseStore FOR model::DomainStore»
	$db = new PDO('sqlite:«safeNameString(id)».db') 
		or throw_new_IamlRuntimeException("Could not open DomainStore '«id»'");
«ENDDEFINE»

/* code to _save_ attributes */
«DEFINE storeDomainAttribute FOR model::DomainAttributeInstance-»
	function store_domain_attribute_«safeName()»($arg0) {
		/* store a value into attribute id '«id»' */
		«IF eContainer.metaType.isAssignableFrom(model::DomainObjectInstance)»
			/* contained in an object instance '«eContainer»': get it from the instance */
			store_object_instance_«safeName(eContainer)»("«safeNameString(name)-»", $arg0);
		«ELSE»
			/* not contained in an object instance; select it manually */
			«IF inEdges.typeSelect(model::wires::SelectWire).isEmpty»
				throw new IamlRuntimeException("No selection wires exist for attribute instance '«safeNameString(id)-»'");
			«ELSE»
				$attribute_name = "«safeNameString(name)-»";
				«EXPAND evaluateSelectWireStore FOR inEdges.typeSelect(model::wires::SelectWire).first()»
			«ENDIF»
		«ENDIF»
	}

	«IF isAutosaveOff(this)»
	/* for elements with 'autosave' off */
	function queue_store_domain_attribute_«safeName()»($arg0) {
		/* queue store a value into attribute id '«id»' */
		«IF containingSession(this) != null»
			$_SESSION["instance_queue_«safeName()-»"] = $arg0;
		«ELSE»
			set_application_value("instance_queue_«safeName()-»", $arg0);
		«ENDIF»
	}
	
	function save_queued_store_domain_attribute_«safeName()»() {
		/* execute the actual save for attribute id '«id»' */
		«IF containingSession(this) != null»
			/* contained within a session */
			$arg0 = require_session("instance_queue_«safeName()-»", false);
			if ($arg0 !== false) {
				// lets set it
				store_domain_attribute_«safeName()-»($arg0);
			}
		«ELSE»
			/* contained within a page */
			$arg0 = get_application_value("instance_queue_«safeName()-»", false);
			if ($arg0 !== false) {
				// lets set it
				store_domain_attribute_«safeName()-»($arg0);
			}
		«ENDIF»
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE storeDomainObject FOR model::DomainObjectInstance-»
	function store_object_instance_«safeName()»($attribute_name, $arg0) {
		/* store a value into object id '«id»' */
		«IF inEdges.typeSelect(model::wires::SelectWire).isEmpty»
			«IF inEdges.typeSelect(model::wires::NewInstanceWire).isEmpty»
				throw new IamlRuntimeException("No selection wires exist for object instance '«id»'");
			«ELSE»
				// set the current "new" object
				«EXPAND setNewDomainObject(inEdges.typeSelect(model::wires::NewInstanceWire).first()) FOR this»
			«ENDIF»
		«ELSE»
			«EXPAND evaluateSelectWireStore FOR inEdges.typeSelect(model::wires::SelectWire).first()»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE setNewDomainObject(model::wires::NewInstanceWire wire) FOR model::DomainObjectInstance-»
	«IF containingSession() != null»
		// in the session

		// it should already be created
		$new_id = require_session('new_object_«safeNameString(containingSession().id)»_«safeNameString(id)-»');
		log_message("updating existing session new object $new_id");
		
		// where are we loading it from? sets $db
		«EXPAND selectDatabase FOR wire.from»
			
		// create query
		$query = "UPDATE «safeNameString(((model::DomainObject) wire.from).name)»
			SET $attribute_name = ?
			WHERE id = ?";
		
		$args = array($arg0, $new_id);
				
		// execute query
		$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
		$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
	«ELSE»
		// in the page

		// it should already be created
		$new_id = get_application_value('new_object_«safeNameString(id)-»', false);
		if ($new_id === false) {
			throw new IamlRuntimeException("We shouldn't have an empty new object ID: «safeNameString(id)-»");
		}
		log_message("updating existing page new object $new_id");
		
		// where are we loading it from? sets $db
		«EXPAND selectDatabase FOR wire.from»
			
		// create query
		$query = "UPDATE «safeNameString(((model::DomainObject) wire.from).name)»
			SET $attribute_name = ?
			WHERE id = ?";
		
		$args = array($arg0, $new_id);
				
		// execute query
		$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
		$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
	«ENDIF»
«ENDDEFINE»

«DEFINE evaluateSelectWireStore FOR model::wires::SelectWire»
	/* selection wire «this» (for storing values), assumes $arg0 exists */
	
	// where are we loading it from? sets $db
	«EXPAND selectDatabase FOR from»
	
	// create query
	$query = "UPDATE «safeNameString(((model::DomainObject) from).name)»
		SET $attribute_name = ?
		WHERE " . «EXPAND getQuery FOR this-»;
	$args = array($arg0);
	$args2 = array(«EXPAND template::php::EventTrigger::callOperationParameters(this, false, false) FOREACH inEdges.typeSelect(model::wires::ParameterWire) SEPARATOR ","»);
	foreach ($args2 as $k) {
		$args[] = $k;
	}
	
	// execute query
	$rs = $db->prepare($query) or throw_new_IamlRuntimeException("Could not prepare query '$query': " . print_r($db->errorInfo(), true));
	$rs->execute($args) or throw_new_IamlRuntimeException("Could not execute query '$query': " . print_r($db->errorInfo(), true));
«ENDDEFINE»

/** to find the relevant domain attribute set method */
«DEFINE findSetDomainAttributeMethod FOR model::InternetApplication» 
	«EXPAND findDomainAttribute FOREACH getAllDomainAttributeInstances()»
«ENDDEFINE»

«DEFINE findDomainAttribute FOR model::DomainAttributeInstance»
	if ($id == "«safeNameString(id)-»") {
		store_domain_attribute_«safeNameString(id)-»($arg0);
		log_message("set_application_value.php: succeeded");
		echo "ok";
		die;
	}
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»