«IMPORT iaml»

/**
 * Method definitions for emails.
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE emailDefinitions FOR model::InternetApplication»
	«FILE "output/email_definitions.php"»
		<?php				
			«EXPAND template::Template::phpCheck»
			
			// a list of all email operations required
			«FOREACH getAllEmails() AS e»
				require_once(ROOT_PATH . "emails/«safeName(e)».php");
			«ENDFOREACH»
	«ENDFILE»
	
	«FOREACH getAllEmails() AS e»
		«FILE "output/emails/" + safeName(e) + ".php"»
		<?php				
			«EXPAND template::Template::phpCheck»
			
			«EXPAND emailDefinition FOR e» 
		«ENDFILE»
	
		«REM»
			all emails have a default generated template, if a custom template
			does not exist
		«ENDREM»
		«FILE "output/templates/" + safeName(e) + ".php"»		
			«EXPAND emailTemplateDefinition FOR e» 
		«ENDFILE»
	«ENDFOREACH»

«ENDDEFINE»

/**
 * @implementation Email
 *		To construct the content of an {@model Email}, a custom template may be specified
 *		in <code>templates/ID.php</code>; otherwise, a default builtin template is generated.
 * @implementation Email
 *		An {@model Email} with any 'to' address ending in <code>@example</code> will instantly 
 *		{@model Email#onFailure fail};
 *		it will not even attempt to be sent. 
 * @implementation Email
 *		The <i>storage semantics</i> for an {@model Email} follows the
 *		<i>storage semantics</i> of its parent {@model Scope}.
 */
«DEFINE emailDefinition FOR model::messaging::Email»
	/**
	 * Send the given e-mail.
	 *
	 * @return true if the email was sent, or false if it failed
	 */
	function email_«safeName()»_send() {
		$args = array(
			"to" => «EXPAND getEmailProperty("to")»,
			"to_name" => «EXPAND getEmailProperty("toName")»,
			"from" => «EXPAND getEmailProperty("from")»,
			"from_name" => «EXPAND getEmailProperty("fromName")»,
			"subject" => «EXPAND getEmailProperty("subject")»,
		);
		
		// get content
		$args["content"] = get_email_«safeName()»_content();
		
		// should we fail?
		$should_fail = false;
		if ($args["to"] == null || trim($args["to"]) == "" || strtolower(substr($args["to"], -8)) == "@example") {
			$should_fail = true;
		}
		
		if ($should_fail) {
			// process any onFailure events
			«IF onFailure != null»
				«EXPAND template::events::EventCall::callEvent(true) FOR onFailure-»
			«ENDIF»
			
			// stop
			return false;
		}
		
		// use library function to send
		$result = send_email($args);
		if ($result) {
			// process any onSent events
			«IF onSent != null»
				«EXPAND template::events::EventCall::callEvent(true) FOR onSent-»
			«ENDIF»
		} else {
			// process any onFailure events
			«IF onFailure != null»
				«EXPAND template::events::EventCall::callEvent(true) FOR onFailure-»
			«ENDIF»
		}
		
		return $result;
	}
	
	/**
	 * Get the content of the e-mail.
	 *
	 * @return the content in text form, or <code>null</code> if none could be found
	 */
	function get_email_«safeName()»_content() {
		// try a property 'content'
		$content = «EXPAND getEmailProperty("content")»;
		
		// if null, try and construct it from a template on the server
		if ($content == null) {
			// first, a custom template
			$template_file = CUSTOM_PATH . "templates/«safeName()».php";
			if (!file_exists($template_file)) {
				// otherwise, our template generated at codegen
				log_message("[email] get template: custom template '$template_file' does not exist; using manual template");
				$template_file = ROOT_PATH . "templates/«safeName()».php";
			}
			
			if (file_exists($template_file)) {
				// create all of the default variables that we want to use in the template
				$property = array();
				$value = array();
				$label = array();
				
				«FOREACH properties.sortBy(e|e.name) AS p»
					$property["«escapePhpString(p.name)»"] = «EXPAND template::operations::Parameters::callParameterValue(true, false) FOR p»;
				«ENDFOREACH»
				«FOREACH labels.sortBy(e|e.name) AS label»
					«IF label.fieldValue != null»
						«IF label.onAccess != null»
						if (!«EXPAND template::operations::Parameters::isSetParameter(true) FOR label.fieldValue») {
							// Label not set; call onAccess
							«EXPAND template::events::EventCall::callEvent(true) FOR label.onAccess-»
						}
						«ENDIF»
						$label["«escapePhpString(label.name)»"] = «EXPAND template::operations::Parameters::callParameterValue(true, false) FOR label.fieldValue»;
					«ENDIF»
				«ENDFOREACH»
							
				// use PHP's output buffering to provide PHP templates
				// (similar to Symfony's approach)
				if (!ob_start())
					throw new IamlRuntimeException("Could not start output buffering");
				require($template_file);
				$content = ob_get_contents();
				ob_end_clean();
				
				$property = null;
				$value = null;
				$label = null;
			} else {
				log_message("[email] get template: file '$template_file' does not exist");
			}
			
		}
		
		return $content;		
	}
«ENDDEFINE»

/**
 * The default template definition for an email.
 * Just lists all of the contained properties and static values. 
 * As a result, may have security problems.
 *
 * @implementation Email
 *		The default template for a sent {@model Email} contains a list of all of its
 *		contained {@model Property Properties}, {@model StaticValue}s and
 *		{@model Label} values.
 */
«DEFINE emailTemplateDefinition FOR model::messaging::Email»
<?php 
/**
 * The default generated e-mail template for email '«name»'.
 * Simply lists out all properties and values contained within it.
 *
 * <p>To override this template, create a new file CUSTOM_PATH/templates/«safeName()».php;
 * this template will be used instead.
 */
?>
	«FOREACH properties.sortBy(e|e.name) AS p»
		«p.name»: <?php echo $property["«escapePhpString(p.name)»"]; echo "\n"; ?>
	«ENDFOREACH»
	«FOREACH labels.sortBy(e|e.name) AS label»
		«IF label.fieldValue != null»
			«label.name»: <?php echo $label["«escapePhpString(label.name)»"]; echo "\n"; ?>
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

/**
 * Get the runtime value of the given e-mail property, or <code>null</code>
 * if it is not set.
 *
 * @implementation Email
 *		When selecting a {@model Property} or {@model StaticValue} for an e-mail template, the
 *		{@model Property} has a higher priority.
 */
«DEFINE getEmailProperty(String name) FOR model::messaging::Email»
	«IF !properties.select(e|e.name == name).isEmpty»
		«EXPAND template::operations::Parameters::callParameterValue(true, false) FOR properties.selectFirst(e|e.name == name)»
	«ELSE»
	  	null
	«ENDIF» 
«ENDDEFINE»
