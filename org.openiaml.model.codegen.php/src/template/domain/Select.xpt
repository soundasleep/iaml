«IMPORT iaml»

/**
 * Methods for selecting queries and databases.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Must set $row with the result.
 * @param force if the source of a query parameter does not exist, should we crash?
 */
«DEFINE evaluateSelectWire(model::visual::Frame currentFrame, boolean force) FOR model::wires::SelectWire»
	/* selection wire «this» */
	
	«IF !force && inParameterEdges.size > 0»
		/* we try not to crash if a query parameter does not exist */
		/* check all parameter sources */
		if («EXPAND template::operations::Parameters::callParameterExists(currentFrame) FOREACH inParameterEdges SEPARATOR " && "») {		
	«ENDIF»
	
	// where are we loading it from? sets $db_name
	«EXPAND selectDatabase FOR from»
	
	$source_class = "«safeNameString(((model::DomainObject) from).name)»";
	$source_id = "«safeNameString(((model::DomainObject) from).id)»";
	$query = «EXPAND getQuery FOR this-»;
	$args = array(«EXPAND template::operations::Parameters::callParameter(true, this, false, true, currentFrame) FOREACH inParameterEdges SEPARATOR ","»); 
	
	// get the result or return null
	$row = evaluate_select_wire($db_name, $source_id, $source_class, $query, $args);
	
	«IF !force && inParameterEdges.size > 0»
		} else {
			$row = null;
		}
	«ENDIF»
«ENDDEFINE»

/* create a SQL query to select a particular value */
«DEFINE getQuery FOR model::wires::SelectWire»
	«IF query == null || query.trim().length == 0»
		«REM»an empty query«ENDREM»
		"1"
	«ELSE-»
		"«query-»" /* direct query */
	«ENDIF-»
«ENDDEFINE»

/* select a database source */
«DEFINE selectDatabase FOR model::WireSource»
	«EXPAND exception FOR throwException("Cannot connect to a database source from " + this)»
«ENDDEFINE»

«DEFINE selectDatabase FOR model::DomainObject»
	«EXPAND selectDatabaseStore FOR eContainer»	
«ENDDEFINE»

«DEFINE selectDatabase FOR model::DomainAttribute»
	«IF model::DomainObject.isInstance(eContainer)»
		«EXPAND selectDatabase FOR (model::DomainObject) eContainer»
	«ELSEIF model::DomainStore.isInstance(eContainer)»
		«EXPAND selectDatabaseStore FOR (model::DomainStore) eContainer»
	«ELSE»
		«EXPAND selectDatabaseStore FOR getRoot()»
	«ENDIF»	
«ENDDEFINE»

/* select a particular database */
«DEFINE selectDatabaseStore FOR emf::EObject»
	$db_name = «EXPAND getDatabaseStoreString»;
«ENDDEFINE»

«DEFINE getDatabaseStoreString FOR emf::EObject»
	«EXPAND exception FOR throwException("Unknown DomainObject container " + this)»
«ENDDEFINE»

«DEFINE getDatabaseStoreString FOR model::DomainStore»
	'sqlite:«safeNameString(id)».db'
«ENDDEFINE»

«DEFINE getDatabaseStoreString FOR model::InternetApplication»
	'sqlite:internet_application.db' /* default database, for attributes without stores */
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
