@@dc:creator=jevon wright
@@dc:date=09/10/2008
// import org.openiaml.model.model.*;
// import org.openiaml.model.model.visual.*;
// var org.openiaml.model.model.InternetApplication app
// var org.openiaml.model.model.ApplicationElement another 
// var org.openiaml.model.model.visual.Page page
// var org.openiaml.model.model.visual.InputForm input_form
import org.openiaml.model.model.*;
import org.openiaml.model.model.visual.*;
ref ApplicationElement another
ref InputForm input_form
ref Page page
ref InternetApplication app
ref ApplicationElementContainer aec
ref NamedElement ne
//import org.openiaml.model.diagram.custom.takeproxy.*;
//ref InternetApplicationProxy app
//ref ApplicationElementProxy another
//ref PageProxy page
//ref InputFormProxy input_form
//ref ApplicationElementContainerProxy aec
//ref NamedElementProxy ne
// for InternetApplication
@take.compilerhint.class=InternetApplication_Children
@take.compilerhint.method=getAppChildren
query app_children[parent,child]
// for ApplicationElementContainer
@take.compilerhint.class=ApplicationElementContainer_Children
@take.compilerhint.method=getElementChildren
query element_children[parent,child]
@take.compilerhint.class=NamedElement_Name
@take.compilerhint.slots=element,string
@take.compilerhint.method=getName
query name[element,string]
//rule1: if name[app, 'test'] then app_children[app, page] and name[page, 'generated'] and element_children[page, input_form] and name[input_form, 'generated form'] and name[another, 'empty']
external facts1: name[NamedElement, java.lang.String]
external facts2: app_children[InternetApplication, ApplicationElement]
external facts3: element_children[ApplicationElementContainer, ApplicationElement]
rule1: if name[app, 'test'] then app_children[app, page]
//
//
//
//
//
//
//
//
//
//
//
// example 
// var example.nz.org.take.compiler.example1.Customer customer
// ref example.nz.org.take.compiler.example1.Discount goldCustomerDiscount
// @take.compilerhint.class=CustomerDiscount
// @take.compilerhint.slots=customer,discount
// @take.compilerhint.method=getDiscount
// query discount[in,out]
// rules
// rule1: if category[customer,'gold'] then discount[customer,goldCustomerDiscount] 
// rule2: if 500<customer.turnover then category[customer,'gold']
