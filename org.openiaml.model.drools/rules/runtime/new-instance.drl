# Update the attributes in "new instance" objects when they
# are connected to DomainObjects.
package org.openiaml.model.drools.rules.runtime.new_instance

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.*;
import org.openiaml.model.model.*;	// for ModelPackage
import org.openiaml.model.model.domain.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.operations.*;

import org.openiaml.model.inference.*;		// for handler

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Refresh NewInstanceWire Instance Object mappings"
	when
		object : DomainObject ( )
		instance : DomainObjectInstance ( )
		wire : NewInstanceWire( from == object, to == instance )

		attribute : DomainAttribute ( eContainer == object )
		
		not ( DomainAttributeInstance( eContainer == instance, name == attribute.name ))

		eval ( handler.veto( wire ))
		
	then
		# create a new one
		DomainAttributeInstance attr = handler.generatedDomainAttributeInstance(wire, instance);
		handler.setName(attr, attribute.getName());
		handler.setAutosave(attr, instance.isAutosave());
		# set type
		handler.setType(attr, attribute.getType());
		queue.add(attr, drools);

end

rule "Refresh SelectWire Instance Object mappings"
	when
		object : DomainObject ( )
		instance : DomainObjectInstance ( )
		wire : SelectWire( from == object, to == instance )

		attribute : DomainAttribute ( eContainer == object )
		
		not ( DomainAttributeInstance( eContainer == instance, name == attribute.name ))
		
		eval ( handler.veto( wire ))
		
	then
		# create a new one
		DomainAttributeInstance attr = handler.generatedDomainAttributeInstance(wire, instance);
		handler.setName(attr, attribute.getName());
		handler.setAutosave(attr, instance.isAutosave());
		# set type
		handler.setType(attr, attribute.getType());
		queue.add(attr, drools);

end

rule "Mark AttributeInstances as extensions of the identically-named Attributes (NewInstanceWire)"
	when
		object : DomainObject ( )
		instance : DomainObjectInstance ( )
		wire : NewInstanceWire( from == object, to == instance )

		attribute : DomainAttribute ( eContainer == object )
		attrinst : DomainAttributeInstance( eContainer == instance, name == attribute.name ) 
		
		not ( ExtendsEdge ( from == attrinst, to == attribute ) )
		
		eval ( handler.veto( attrinst ))
		
	then
		# mark it as an extension
		ExtendsEdge w = handler.generatedExtendsEdge(wire, attrinst, attrinst, attribute);
		queue.add(w, drools);
	
end

rule "Mark AttributeInstances as extensions of the identically-named Attributes (SelectWire)"
	when
		object : DomainObject ( )
		instance : DomainObjectInstance ( )
		wire : SelectWire( from == object, to == instance )

		attribute : DomainAttribute ( eContainer == object )
		attrinst : DomainAttributeInstance( eContainer == instance, name == attribute.name ) 
		
		not ( ExtendsEdge ( from == attrinst, to == attribute ) )
		
		eval ( handler.veto( attrinst ))
		
	then
		# mark it as an extension
		ExtendsEdge w = handler.generatedExtendsEdge(wire, attrinst, attrinst, attribute);
		queue.add(w, drools);
	
end

rule "Create 'save' operation for DomainObjectInstances"
	when
		instance : DomainObjectInstance ( )
		
		not ( Operation( eContainer == instance, name == "save" ))
		
		eval ( handler.veto( instance ))
		
	then
		# create a new one
		PrimitiveOperation op = handler.generatedPrimitiveOperation(instance, instance);
		handler.setName(op, "save");
		queue.add(op, drools);

end
