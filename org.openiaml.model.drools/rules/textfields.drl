/**
 * Rules related to InputTextFields.
 */
package org.openiaml.model.drools.rules.textfields

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.datatypes.*;

import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.model.model.users.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

/**
 * @inference InputTextField
 *		{@model InputTextField}s have an {@model EventTrigger} 'onInput'.
 */
rule "InputTextFields have an event onInput"
	when
		field : InputTextField ( )
		not ( event : EventTrigger ( field.onInput == event ))
	
		eval ( handler.veto( field ))
	
	then
		EventTrigger event = handler.generatedEventTriggerOnInput(field, field);
		handler.setName(event, "onInput");
		queue.add(event, drools);

end

/**
 * @inference InputTextField
 *		{@model InputTextField}s have an {@model Property} 'currentInput'.
 */
rule "InputTextFields have a Property currentInput"
	when
		field : InputTextField ( )
		not ( property : Property ( field.currentInput == property ))
	
		eval ( handler.veto( field ))
	
	then
		Property property = handler.generatedPropertyCurrentInput(field, field);
		handler.setName(property, "currentInput");
		handler.setType(property, BuiltinDataTypes.getTypeString());
		queue.add(property, drools);

end
