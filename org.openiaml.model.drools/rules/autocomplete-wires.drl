/**
 * Completes the functionality of {@model AutocompleteWire}s.
 */
package org.openiaml.model.drools.rules.autocomplete_wires

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.datatypes.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.model.model.users.*;
import org.openiaml.model.model.domain.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Create a containing InputForm for Autocomplete list and input"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		
		not ( form : InputForm ( eContainer == container, name == iterator.name ) )
		
		eval ( handler.veto( wire ))
	
	then
		InputForm form = handler.generatedInputForm(wire, container);
		handler.setName(form, iterator.getName());
		queue.add(form, drools);
	
end

rule "Create an input field for Autocomplete"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		not ( VisibleThing ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) ) )
		
		eval ( handler.veto( wire ))
		
	then
		InputTextField text = handler.generatedInputTextField(wire, form);
		handler.setName(text, functions.getAutocompleteInputName(attribute));
		queue.add(text, drools);
		
end

rule "Connect parameter for input field for Autocomplete"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		text : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) ) 
		fieldValue : Property ( text.fieldValue == fieldValue )
		
		not ( ParameterEdge ( from == fieldValue, to == iterator ) )
		
		eval ( handler.veto( wire ))
		
	then
		ParameterEdge param = handler.generatedParameterEdge(wire, text, fieldValue, iterator);
		handler.setName(param, attribute.getName());
		queue.add(param, drools);
		
end

rule "Update DomainIterator query if it is not set"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
	
		eval ( !functions.getAutocompleteIteratorQuery(wire).equals(iterator.getQuery()) )
				
		eval ( handler.veto( wire ))
		
	then
		handler.setQuery(iterator, functions.getAutocompleteIteratorQuery(wire));
	
end

rule "Input field for Autocomplete should update instantly"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		text : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) ) 
	
		onInput : EventTrigger ( text.onInput == onInput )
		currentInput : Property ( text.currentInput == currentInput )
		
		updateOperation : Operation ( eContainer == text, name == "update" )
		
		not ( ActionEdge ( from == onInput, to == updateOperation ))
		
		eval ( handler.veto( wire ))
		
	then
		ActionEdge run = handler.generatedActionEdge(wire, text, onInput, updateOperation);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		// add a parameter
		ParameterEdge param = handler.generatedParameterEdge(wire, text, currentInput, run);
		queue.add(param, drools);
		
end

rule "Create IteratorList"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		not ( list : IteratorList ( eContainer == form, name == iterator.name ) )
		
		eval ( handler.veto( wire ))
	
	then
		IteratorList list = handler.generatedIteratorList(wire, form);
		handler.setName(list, iterator.getName());
		queue.add(list, drools);
		
		// connected by SetWire
		SetWire set = handler.generatedSetWire(wire, iterator, iterator, list);
		handler.setName(set, "autocomplete set");
		queue.add(set, drools);
	
end

rule "IteratorList labels update the target of the Autocomplete Wire"
	when
		attribute : DomainAttribute ( )
		container : Frame ( )
		iterator : DomainIterator ( )
		
		# VisibleThing with the same name as the given attribute
		target : VisibleThing ( name == attribute.name )
		updateOperation : Operation ( eContainer == target, name == "update" )
		
		wire : AutocompleteWire ( from == iterator, to == target ) 
		form : InputForm ( eContainer == container, name == iterator.name )
		
		# containing list
		list : IteratorList ( eContainer == form )
		set : SetWire ( from == iterator, to == list )

		# the value of the given label
		targetLabel : VisibleThing ( eContainer == list, name == attribute.name )
		value : Property ( targetLabel.fieldValue == value )
			
		# for every label within (including target label)
		label : VisibleThing ( eContainer == list )
		onClick : EventTrigger ( label.onClick == onClick )
		
		not ( ActionEdge ( from == onClick, to == updateOperation ))
		
		eval ( handler.veto( wire ))
	
	then
		ActionEdge run = handler.generatedActionEdge(wire, label, onClick, updateOperation);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		ParameterEdge param = handler.generatedParameterEdge(wire, label, value, run);
		queue.add(param, drools);
	
end

rule "InternetApplication has a readonly Property 'blank' created"
	when
		container : InternetApplication ( )
	
		not ( Property ( eContainer == container, defaultValue == "" ))
		
		eval ( handler.veto( container ))
		
	then
		Property blank = handler.generatedProperty(container, container);
		handler.setName(blank, "blank");
		handler.setReadOnly(blank, true);
		handler.setType(blank, BuiltinDataTypes.getTypeString());
		handler.setDefaultValue(blank, "");
		queue.add(blank, drools);
			
end

rule "IteratorList labels clear the input onClick"
	when
		ia : InternetApplication ( )
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )

		attribute : DomainAttribute ( )

		wire : AutocompleteWire ( from == iterator, to == target ) 
		form : InputForm ( eContainer == container, name == iterator.name )
		
		# containing list
		list : IteratorList ( eContainer == form )
		set : SetWire ( from == iterator, to == list )

		# input		
		input : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) )
		updateOperation : Operation ( eContainer == input, name == "update" )
		
		blank : Property ( eContainer == ia, defaultValue == "" )
		
		# for every label within
		label : VisibleThing ( eContainer == list )
		onClick : EventTrigger ( label.onClick == onClick )
		
		not ( ActionEdge ( from == onClick, to == updateOperation ))
		
		eval ( handler.veto( wire ))
	
	then
		ActionEdge run = handler.generatedActionEdge(wire, label, onClick, updateOperation);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		ParameterEdge param = handler.generatedParameterEdge(wire, label, blank, run);
		queue.add(param, drools);
	
end

rule "Frame.onAccess hides the IteratorList if the input is empty"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		# input
		input : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) )
		condition : Condition ( input.empty == condition )
		
		# containing list
		list : IteratorList ( eContainer == form )
		set : SetWire ( from == iterator, to == list )

		# 'hide' operation
		hide : Operation ( eContainer == list, name == "hide" )
		
		# Frame.onAccess
		onAccess : EventTrigger ( container.onAccess == onAccess )
		
		not ( ActionEdge ( from == onAccess, to == hide ))
		
		eval ( handler.veto( wire ))
	
	then
		ActionEdge run = handler.generatedActionEdge(wire, container, onAccess, hide);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		# ConditionEdge
		ConditionEdge edge = handler.generatedConditionEdge(wire, container, condition, run);
		queue.add(edge, drools);
	
end

rule "Frame.onAccess shows the IteratorList if the input is not empty"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		# input
		input : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) )
		condition : Condition ( eContainer == input, name == "not empty" ) 
		
		# containing list
		list : IteratorList ( eContainer == form )
		set : SetWire ( from == iterator, to == list )

		# 'hide' operation
		hide : Operation ( eContainer == list, name == "show" )
		
		# Frame.onAccess
		onAccess : EventTrigger ( container.onAccess == onAccess )
		
		not ( ActionEdge ( from == onAccess, to == hide ))
		
		eval ( handler.veto( wire ))
	
	then
		ActionEdge run = handler.generatedActionEdge(wire, container, onAccess, hide);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		# ConditionEdge
		ConditionEdge edge = handler.generatedConditionEdge(wire, container, condition, run);
		queue.add(edge, drools);
	
end

rule "Input.onChange hides the IteratorList if the input is empty"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		# input
		input : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) )
		condition : Condition ( input.empty == condition )
		
		# containing list
		list : IteratorList ( eContainer == form )
		set : SetWire ( from == iterator, to == list )

		# 'hide' operation
		hide : Operation ( eContainer == list, name == "hide" )
		
		# Frame.onAccess
		onChange : EventTrigger ( input.onChange == onChange )
		
		not ( ActionEdge ( from == onChange, to == hide ))
		
		eval ( handler.veto( wire ))
	
	then
		ActionEdge run = handler.generatedActionEdge(wire, container, onChange, hide);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		# ConditionEdge
		ConditionEdge edge = handler.generatedConditionEdge(wire, container, condition, run);
		queue.add(edge, drools);
	
end


rule "Input.onChange shows the IteratorList if the input is not empty"
	when
		container : Frame ( )
		target : VisibleThing ( )
		iterator : DomainIterator ( )
		
		attribute : DomainAttribute ( )
		
		wire : AutocompleteWire ( from == iterator, to == target, match == attribute )
		form : InputForm ( eContainer == container, name == iterator.name )
		
		# input
		input : InputTextField ( eContainer == form, eval (functions.getAutocompleteInputName(attribute).equals(name)) )
		condition : Condition ( eContainer == input, name == "not empty" ) 
		
		# containing list
		list : IteratorList ( eContainer == form )
		set : SetWire ( from == iterator, to == list )

		# 'hide' operation
		hide : Operation ( eContainer == list, name == "show" )
		
		# Frame.onAccess
		onChange : EventTrigger ( input.onChange == onChange )
		
		not ( ActionEdge ( from == onChange, to == hide ))
		
		eval ( handler.veto( wire ))
	
	then
		ActionEdge run = handler.generatedActionEdge(wire, container, onChange, hide);
		handler.setName(run, "run");
		queue.add(run, drools);
		
		# ConditionEdge
		ConditionEdge edge = handler.generatedConditionEdge(wire, container, condition, run);
		queue.add(edge, drools);
	
end

