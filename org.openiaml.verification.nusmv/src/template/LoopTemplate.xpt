«IMPORT iaml»

«EXTENSION metamodel::LoopExtensions»

«DEFINE main FOR model::InternetApplication»
	«FILE "output/check.smv"»	

-- definitions for each CompositeOperation
«EXPAND OperationContents::operationContents FOREACH eAllContents.typeSelect(model::CompositeOperation)»

-- definitions for each CompositeCondition
«EXPAND ConditionContents::conditionContents FOREACH eAllContents.typeSelect(model::CompositeCondition)»

-- main module
«LET eAllContents.typeSelect(model::visual::Frame) AS allPages»
«LET eAllContents.typeSelect(model::visual::Button) AS allButtons»

MODULE main

VAR
	-- possible running operations
	«FOREACH eAllContents.typeSelect(model::CompositeOperation) AS operation»
		running_«safeName(operation)» : process operation_«safeName(operation)»(run_«safeName(operation)»
			«FOREACH allApplicationProperties() AS p», property_«safeName(p)»«ENDFOREACH»);
		run_«safeName(operation)» : boolean;
	«ENDFOREACH»

	-- possible running conditions
	«FOREACH eAllContents.typeSelect(model::CompositeCondition) AS condition»
		running_condition_«safeName(condition)» : process condition_«safeName(condition)»(run_condition_«safeName(condition)»
			«FOREACH allApplicationProperties() AS p», property_«safeName(p)»«ENDFOREACH»);
		run_condition_«safeName(condition)» : boolean;
	«ENDFOREACH»
	
	-- all pages
	«IF !allPages.isEmpty»
		current_page : {
			null 
			«FOREACH allPages AS p»
				, «safeName(p)»
			«ENDFOREACH»
		};

		-- allowing NuSMV to select pages at random
		browse_to_page : {
			null,
			«FOREACH allPages AS p SEPARATOR ", "»
				«safeName(p)»
			«ENDFOREACH»
		};
	«ENDIF»
	
	-- all buttons on all pages
	«FOREACH allButtons AS b»
	click_«safeName(b)» : boolean;
	«ENDFOREACH»
	
	-- application properties
	«FOREACH allApplicationProperties() AS p»
	property_«safeName(p)» : 0..«maximumIntegerSize()»;
	«ENDFOREACH»

	-- value overflow
	value_overflow : boolean;
	
	-- flags
	operation_running : boolean;
	operation_finished : boolean;
	
	navigation_running : boolean;
	navigation_finished : boolean;

ASSIGN
	init(value_overflow) := 0;
	init(operation_running) := 0;
	init(operation_finished) := 0;
	init(navigation_finished) := 1;
	
	«FOREACH eAllContents.typeSelect(model::CompositeOperation) AS operation»
		init(run_«safeName(operation)») := 0;
	«ENDFOREACH»
	
	«FOREACH allApplicationProperties().select(p|p.defaultValue != null) AS p»
		-- initialise default values, if specified
		init(property_«safeName(p)») := «p.defaultValue»;
	«ENDFOREACH»

	«IF !allPages.isEmpty»
		-- we start off without being on any page
		init(current_page) := null;
	«ENDIF»		
	
	-- click_button is chosen by nusmv
	-- browse_to_page is chosen by nusmv

	«REM»
	TODO I think the current implementation supports clicking two buttons
	simultaneously, and executing these two operations simultaneously.
	«ENDREM»
	«FOREACH eAllContents.typeSelect(model::CompositeOperation) AS operation»
		next(run_«safeName(operation)») := case
			-- cannot execute an operation until it has finished navigating
			navigation_finished = 0 : 0;
		
			-- already running
			run_«safeName(operation)» = 1 : case 
				-- operation finished?
				running_«safeName(operation)».finished = 1 : 0;
				
				-- still running
				1 : 1;
			esac;
			
			-- executed by accessing a page
			«REM»
			«REM»an access operation can be executed many times while in the
			same page (as long as it isn't currently being run); this is the same as reloading the page«ENDREM»
			operation_running = 0 : case
				«FOREACH allPages AS p»
					«IF p.onAccess != null && p.onAccess.outActions.select(a|model::Operation.isInstance(a.to))
						.to.contains(operation)»
						current_page = «safeName(p)» : 1;
					«ENDIF»
					
					-- executed by clicking a button on the page
					«FOREACH p.children.typeSelect(model::visual::Button) AS b»
						-- TODO if there is a button on a page with 'access', it can never be executed
					
						«REM»button -> run[onClick] -> operation«ENDREM»
						«IF !b.outActions.select(w|w.name == "click" || w.name == "onClick").select(w|w.to == operation).isEmpty»				
						current_page = «safeName(p)» & click_«safeName(b)» = 1 : 1;
						«ENDIF»
						«REM»button -> event[onClick] -> run -> operation«ENDREM»
						«IF !(b.onClick != null && b.onClick.outActions.select(w|w.to == operation).isEmpty)»				
						current_page = «safeName(p)» & click_«safeName(b)» = 1 : 1;
						«ENDIF»
						«REM»TODO button -> event -> run -> operation«ENDREM»
					«ENDFOREACH»	
				«ENDFOREACH»
			
				1 : run_«safeName(operation)»;	-- don't change it	
			esac;
			
			-- should not be running
			1 : 0;
		esac;
	«ENDFOREACH»
	
	«FOREACH eAllContents.typeSelect(model::CompositeCondition) AS condition»
		next(run_condition_«safeName(condition)») := case
			-- already running
			run_condition_«safeName(condition)» = 1 : case 
				-- condition finished?
				running_condition_«safeName(condition)».finished = 1 : 0;
				
				-- still running
				1 : 1;
			esac;
			
			-- has it finished?
			running_condition_«safeName(condition)».finished = 1 : 0;
			
			-- navigation just started?
			navigation_running = 1 & navigation_finished = 0 : case
				«FOREACH allPages AS p»
					«IF !(p.onAccess != null && p.onAccess.outActions.select(w | !w.inConditionEdges.select(w|w.from == condition).isEmpty).isEmpty)»
						-- start the condition
						current_page = «safeName(p)» : 1;
					«ENDIF»
				«ENDFOREACH»
				
				-- should not be running
				1 : 0;
			esac;
						
			-- should not be running
			1 : 0;
		esac;
	«ENDFOREACH»
	
	next(value_overflow) := case
		«FOREACH eAllContents.typeSelect(model::CompositeOperation) AS operation»
			running_«safeName(operation)».value_overflow = 1 : 1;
		«ENDFOREACH»
		«FOREACH eAllContents.typeSelect(model::CompositeCondition) AS condition»
			running_condition_«safeName(condition)».value_overflow = 1 : 1;
		«ENDFOREACH»
		1 : value_overflow;
	esac;

	next(operation_running) := case
	«FOREACH eAllContents.typeSelect(model::CompositeOperation) AS operation»
		running_«safeName(operation)».finished = 1 : 0;
		run_«safeName(operation)» = 1 : 1;
	«ENDFOREACH»
		1 : 0;
	esac;
	
	next(operation_finished) := case
	«FOREACH eAllContents.typeSelect(model::CompositeOperation) AS operation»
		running_«safeName(operation)».finished = 1 : 1;
	«ENDFOREACH»
		1 : 0;
	esac;
	
	«IF !allPages.isEmpty»
		-- browsing to a new page
		next(current_page) := case
			
			-- cannot navigate away until finished navigating
			navigation_running = 1 : case
				-- does the current page have a redirection attached?
				«FOREACH allPages AS p»
				current_page = «safeName(p)» :
					«IF p.onAccess == null»
						current_page;	-- we must have stopped navigating (2)
					«ELSE»
					«LET p.onAccess.outActions.select(w | model::visual::Frame.isInstance(w.to)) AS navs»
						«IF navs.size == 1»
							«LET navs.first() AS nav»
							«IF nav.inConditionEdges.isEmpty»
								-- an instant redirect
								«safeName(nav.to)»;
							«ELSEIF nav.inConditionEdges.size == 1»
								«LET nav.inConditionEdges.first() AS condition»
								-- a conditional redirect '«safeNameString(condition.name)»'
								case
									running_condition_«safeName(condition.from)».finished = 0 : current_page;
									
									running_condition_«safeName(condition.from)».finished = 1 : case 
										running_condition_«safeName(condition.from)».result = passed : «safeName(nav.to)»;
										running_condition_«safeName(condition.from)».result = failed : «safeName(p)»;
										1 : null;		-- this should never happen
									esac;
								esac;
								«ENDLET»
							«ELSE»
								«EXPAND exception FOR throwException("Cannot handle multiple condition wires")»
							«ENDIF»
							«ENDLET»
						«ELSEIF navs.size > 1»
							«EXPAND exception FOR throwException("Cannot handle multiple navigation wires")»
						«ELSE»
							current_page;	-- we must have stopped navigating
						«ENDIF» 
					«ENDLET»
					«ENDIF»
				«ENDFOREACH»
				
				-- no redirections; stay where we are
				1 : current_page;
			esac;
		
			-- cannot navigate away while executing an operation
			operation_running = 1 : current_page;
			
			-- browse to another page chosen by NuSMV
			«FOREACH allPages AS p»
				browse_to_page = «safeName(p)» : «safeName(p)»;
			«ENDFOREACH»
			
			-- finally, otherwise, stay where we are
			1 : current_page;
		esac;
	«ENDIF»
	
	next(navigation_running) := case
		-- we are currently navigating
		navigation_running = 1 : case
			«FOREACH allPages AS p»
				current_page = «safeName(p)» :
				«IF p.onAccess == null»
					0;	-- we must have stopped navigating (2)
				«ELSE»
				«LET p.onAccess.outActions.select(w | model::visual::Frame.isInstance(w.to)) AS navs»
					«IF navs.size == 1»
						«LET navs.first() AS nav»
						«IF nav.inConditionEdges.isEmpty»
							-- an instant redirect
							1;
						«ELSEIF nav.inConditionEdges.size == 1»
							«LET nav.inConditionEdges.first() AS condition»
							-- a conditional redirect '«safeNameString(condition.name)»'
							case
								running_condition_«safeName(condition.from)».finished = 0 : 1;	-- still navigating
								
								running_condition_«safeName(condition.from)».finished = 1 : case 
									running_condition_«safeName(condition.from)».result = passed : 1;
									running_condition_«safeName(condition.from)».result = failed : 0;	-- we've stopped
									1 : 0;		-- this should never happen
								esac;
							esac;
							«ENDLET»
						«ELSE»
							«EXPAND exception FOR throwException("Cannot handle multiple condition wires")»
						«ENDIF»
						«ENDLET»
					«ELSEIF navs.size > 1»
						«EXPAND exception FOR throwException("Cannot handle multiple navigation wires")»
					«ELSE»
						0;	-- we must have stopped navigating
					«ENDIF»
				«ENDLET»
				«ENDIF»
			«ENDFOREACH»

			current_page = null : 0;	-- should never occur
		esac;
		
		-- cannot navigate away while executing an operation
		operation_running = 1 : 0;
		
		-- browse to another page chosen by NuSMV
		«FOREACH allPages AS p»
			browse_to_page = «safeName(p)» : 1;
		«ENDFOREACH»
		
		-- otherwise, we are not navigating
		1 : 0;
	esac;
		
	next(navigation_finished) := case
		-- we are currently navigating
		navigation_running = 1 : case
			«FOREACH allPages AS p»
				current_page = «safeName(p)» :
				«IF p.onAccess == null»
					1;	-- we must have stopped navigating (2)
				«ELSE»
				«LET p.onAccess.outActions.select(w | model::visual::Frame.isInstance(w.to)) AS navs»
					«IF navs.size == 1»
						«LET navs.first() AS nav»
						«IF nav.inConditionEdges.isEmpty»
							-- an instant redirect
							1;
						«ELSEIF nav.inConditionEdges.size == 1»
							«LET nav.inConditionEdges.first() AS condition»
							-- a conditional redirect '«safeNameString(condition.name)»'
							case
								running_condition_«safeName(condition.from)».finished = 0 : 1;	-- still navigating
								
								running_condition_«safeName(condition.from)».finished = 1 : case 
									running_condition_«safeName(condition.from)».result = passed : 1;
									running_condition_«safeName(condition.from)».result = failed : 0;	-- we've stopped
									1 : 1;		-- this should never happen
								esac;
							esac;
							«ENDLET»
						«ELSE»
							«EXPAND exception FOR throwException("Cannot handle multiple condition wires")»
						«ENDIF»
						«ENDLET»
					«ELSEIF navs.size > 1»
						«EXPAND exception FOR throwException("Cannot handle multiple navigation wires")»
					«ELSE»
						1;	-- we must have stopped navigating
					«ENDIF» 
				«ENDLET»
				«ENDIF»
			«ENDFOREACH»
			
			current_page = null : 0;	-- should never occur
		esac;
	
		-- cannot navigate away while executing an operation
		operation_running = 1 : 1;
		
		-- browse to another page chosen by NuSMV
		«FOREACH allPages AS p»
			browse_to_page = «safeName(p)» : 0;
		«ENDFOREACH»
		
		-- otherwise, we are not navigating
		1 : 1;
	esac;
	
	«FOREACH allApplicationProperties() AS p»
	next(property_«safeName(p)») := case
		-- always stays the same while in the root (i.e. not executing an operation)
		1 : property_«safeName(p)»;
	esac;
	«ENDFOREACH»

«REM»if we only have 'main' module, we cannot have FAIRNESS«ENDREM»
«IF !eAllContents.typeSelect(model::CompositeOperation).isEmpty»
FAIRNESS
  running
«ENDIF»

«ENDLET»
«ENDLET»
	
	«ENDFILE»
«ENDDEFINE»

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540  
 */
«DEFINE exception FOR Object»
«ENDDEFINE»
