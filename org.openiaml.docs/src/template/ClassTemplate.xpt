«IMPORT modeldoc»

«EXTENSION metamodel::ModeldocExtensions»

«DEFINE class(modeldoc::ModelDocumentation root) FOR modeldoc::EMFClass»
	«FILE "output/" + fileName()»
		«EXPAND ModeldocTemplate::header(name, "summary")»

		<div class="navigation">
		<a href="index.html">&lt; Back to list</a>
		</div>
		
		<div class="intro">
		<div class="gmfeditor">
		«IF gmfEditor != null»		
			«FOREACH {gmfEditor}.reference.typeSelect(modeldoc::FileReference) AS fr»
				<img src="«EXPAND ClassTemplate::viewSource FOR this»«fr.plugin»/«getPackage(fr.package)»/«fr.name»">	
			«ENDFOREACH»
		«ENDIF»
		</div>		
		
		<h1>
		<span class="«IF abstract»abstract «ENDIF»«IF interface»interface «ENDIF»">
		«EXPAND ModeldocTemplate::getIcon»
		«name»
		</span>
		
		«REM»get all extensions«ENDREM»
		«IF !supertypes.isEmpty»
		<small class="supertypes">
		extends
		«EXPAND supertypes FOREACH supertypes.sortBy(t|t.name) SEPARATOR ", "»
		</small>
		«ENDIF»
		</h1>
		
		«IF tagline != null»
		<div id="tagline">
		«EXPAND ClassTemplate::javadocElement(true) FOR tagline»
		</div>
		«ENDIF»
		
		«IF !additionalDocumentation.isEmpty»
			<div id="description">
			«FOREACH additionalDocumentation AS description»
				«EXPAND javadocElement(true) FOR description.description» «EXPAND linkReference FOR description.reference»
			«ENDFOREACH»
			</div>
		«ENDIF»
		
		«IF rationale != null»
		<div id="rationale">
			<h3>Rationale</h3>
			«EXPAND ClassTemplate::javadocElement(true) FOR rationale»
		</div>
		«ENDIF»
		
		«IF !subtypes.isEmpty»
		<p>
		<div id="subtypes">
			Direct subtypes:
			<div class="subtype_list">
			«EXPAND supertypes FOREACH subtypes.sortBy(t|t.name) SEPARATOR ", "»
			</div>
		</div>
		</p>
		«ENDIF»

		«IF !allSubtypes().isEmpty»
		<p>
		<div id="allsubtypes">
			All subtypes: <a class="toggle_on" id="toggle_all_subtypes" onClick="toggle_visibility('display_all_subtypes', 'display_all_subtypes', 'toggle_all_subtypes');">Toggle</a>
			<div id="display_all_subtypes" style="display: none;" class="subtype_list">
			«EXPAND supertypes FOREACH allSubtypes().sortBy(t|t.name) SEPARATOR ", "»
			</div>
			<script language="Javascript" type="application/javascript">
				/* <![CDATA[ */
				set_visibility('display_all_subtypes', readCookie('display_all_subtypes') == 'true', 'toggle_all_subtypes');
				/* ]]> */
			</script>
		</div>
		</p>
		«ENDIF»

		<div id="intro_end"></div>
		</div>
		
		«IF !examples.union(getInheritedExamples(this)).isEmpty»
		<div id="examples" class="semantic_block">
			<h2>Examples</h2>
			
			<ul>
			«REM»group by example source«ENDREM»
			«FOREACH examples.union(getInheritedExamples(this)).exampleModel.sortBy(m|m.name).uniqueModelID().toSet() AS exampleModel»
				«LET examples.union(getInheritedExamples(this)).exampleModel.selectFirst(e|e.uniqueModelID() == exampleModel) AS actualExampleModel»  
				<li>
					<span class="model_reference reference">
						«EXPAND exampleLinkReference(actualExampleModel) FOR examples.union(getInheritedExamples(this)).selectFirst(e|e.exampleModel.uniqueModelID() == exampleModel).exampleLocation»
						«EXPAND exampleModelReference FOR actualExampleModel»
					</span>
				
				<ul>
					«EXPAND example(true) FOREACH examples.select(e|e.exampleModel.uniqueModelID() == exampleModel).sortBy(e|e.description.getString())»
					«EXPAND example(false) FOREACH getInheritedExamples(this).select(e|e.exampleModel.uniqueModelID() == exampleModel).sortBy(e|e.description.getString())»
				</ul>
				</li>
				«ENDLET»
			«ENDFOREACH»
			</ul>
		</div>
		«ENDIF»
		
		«IF !implementationNotes.isEmpty»
		<div id="implementation" class="semantic_block">
			<h2>Implementation Notes</h2>
			
			<ul>
			«EXPAND implementationNote FOREACH implementationNotes.sortBy(n|collateJavadocs(n.description))»
			</ul>
		</div>
		«ENDIF»
		
		«IF !operationalSemantics.union(getInheritedOperationalSemantics(this)).isEmpty»
		<div id="operational" class="semantic_block">
			<h2>Operational Semantics</h2>
			
			«IF operationalSemantics.union(getInheritedOperationalSemantics(this)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND operationalSemantics(true) FOREACH operationalSemantics.sortBy(n|collateJavadocs(n.description))»
				«EXPAND operationalSemantics(false) FOREACH getInheritedOperationalSemantics(this).sortBy(n|collateJavadocs(n.description))»
				</ul>
			«ENDIF»
		</div>
		«ENDIF»
		
		<div id="inference" class="semantic_block">
			<h2>Inference Rules</h2>
			
			«IF inferenceSemantics.union(getInheritedInferenceSemantics(this)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND inferenceSemantics(true) FOREACH inferenceSemantics.sortBy(n|collateJavadocs(n.description))»
				«EXPAND inferenceSemantics(false) FOREACH getInheritedInferenceSemantics(this).sortBy( c | c.containingClass.name ).sortBy(n|collateJavadocs(n.description))»
				</ul>
			«ENDIF»
		</div>
		
		<div id="constraints" class="semantic_block">
			<h2>Constraints</h2>
			
			«IF constraints.union(getInheritedConstraints(this)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND constraint(true) FOREACH constraints.sortBy(c|c.constraint)»
				«EXPAND constraint(false) FOREACH getInheritedConstraints(this).sortBy(c|c.constraint)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="attributes_direct" class="semantic_block">
			<h2>Attributes</h2>
			
			«IF attributes.isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND attribute(true) FOREACH attributes.sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>

		<div id="attributes_inherited" class="semantic_block">
			<h2>Inherited Attributes</h2>
			
			«IF getInheritedAttributes(this).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND attribute(false) FOREACH getInheritedAttributes(this).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="containments_direct" class="semantic_block">
			<h2>Children</h2>
			
			«IF references.select(r|r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(true) FOREACH references.select(r|r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>

		<div id="containments_inherited" class="semantic_block">
			<h2>Inherited Children</h2>
			
			«IF getInheritedReferences(this).select(r|r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(false) FOREACH getInheritedReferences(this).select(r|r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="references_direct" class="semantic_block">
			<h2>References</h2>
			
			«IF references.select(r|!r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(true) FOREACH references.select(r|!r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>

		<div id="references_inherited" class="semantic_block">
			<h2>Inherited References</h2>
			
			«IF getInheritedReferences(this).select(r|!r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(false) FOREACH getInheritedReferences(this).select(r|!r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="extensions_inherited" class="semantic_block">
			<h2>Extensions</h2>
			
			«IF extensions.isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND extension(true) FOREACH extensions.sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="extensions_inherited" class="semantic_block">
			<h2>Inherited Extensions</h2>
			
			«IF getInheritedExtensions(this).reject(e|extensions.name.contains(e.name)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND extension(false) FOREACH getInheritedExtensions(this).reject(e|extensions.name.contains(e.name)).sortBy(a|a.name + "," + a.containingClass.name + "," + a.reference)»
				</ul>
			«ENDIF»
		</div>
		
		«EXPAND ModeldocTemplate::footer»
	«ENDFILE»
«ENDDEFINE»

«DEFINE supertypes FOR modeldoc::EMFClass-»<span class="class_link"><a href="«fileName()»" class="«IF abstract»abstract «ENDIF»«IF interface»interface «ENDIF»">«EXPAND ModeldocTemplate::getIcon»</a> <a href="«fileName()»" class="«IF abstract»abstract «ENDIF»«IF interface»interface «ENDIF»">«name»</a></span>«ENDDEFINE»

«REM»if an EReference.type is not an EMFClass (in this project), we have typeName as a string instead«ENDREM»
«DEFINE typeName(String name) FOR emf::EObject-»<span class="class_link">«name»</span>«ENDDEFINE»

«DEFINE example(Boolean local) FOR modeldoc::Example»
	<li>
		«EXPAND javadocElement(true) FOR description»

		<span class="javadoc_reference">«EXPAND linkReference FOR reference»</span>
		
		«IF !local»
		<span class="inherited_block">[from «EXPAND supertypes FOR containingClass»]</span>
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE operationalSemantics(Boolean local) FOR modeldoc::OperationalSemantic»
	<li>
		«EXPAND javadocElement(true) FOR description»
		
		<span class="javadoc_reference">«EXPAND linkReference FOR reference»</span>
		
		«IF !local»
		<span class="inherited_block">[from «EXPAND supertypes FOR containingClass»]</span>
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE inferenceSemantics(Boolean local) FOR modeldoc::InferenceSemantic»
	<li>
		«EXPAND javadocElement(true) FOR description»
		
		<span class="javadoc_reference">«EXPAND linkReference FOR reference»</span>
		
		«IF !local»
		<span class="inherited_block">[from «EXPAND supertypes FOR containingClass»]</span>
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE implementationNote FOR modeldoc::ImplementationNote»
	<li>
		«EXPAND javadocElement(true) FOR description»
		
		<span class="javadoc_reference">«EXPAND linkReference FOR reference»</span>
	</li>
«ENDDEFINE»

«DEFINE constraint(Boolean local) FOR modeldoc::Constraint»
	<li class="constraint">
		«IF type == modeldoc::ConstraintType::WARNING»
			<span class="warning">
		«ELSE»
			<span class="error">
		«ENDIF»
		«message»
		
		<span class="javadoc_reference">«EXPAND linkReference FOR reference»</span>
		
		«IF !local»
		<span class="inherited_block">[from «EXPAND supertypes FOR containingClass»]</span>
		«ENDIF»
		</span>
	</li>
«ENDDEFINE»

«DEFINE attribute(Boolean local) FOR modeldoc::EMFAttribute»
	<li>
		«IF local»
		<a name="«name»">«name»</a>
		«ELSE»
		<a name="«name»" href="«fileName(containingType)»#«name»">«name»</a>
		«ENDIF»
		:
		«type»
		«IF lowerBound == 0»
		(optional)
		«ELSEIF defaultLiteral != null && defaultLiteral.length > 0»
		(default: «defaultLiteral»)
		«ELSE»
		(<b>required</b>)
		«ENDIF»
		
		«IF tagline != null»
		<div class="tagline">
		«EXPAND ClassTemplate::javadocElement(true) FOR tagline»
		</div>
		«ENDIF»
		
		«IF !acceptedValues.isEmpty»
		<div class="tagline">
		<b>Accepted literals:</b>
		«FOREACH acceptedValues AS literal SEPARATOR ", "»«literal»«ENDFOREACH»
		</div>
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE reference(Boolean local) FOR modeldoc::EMFReference»
	<li>
		«IF local»
		<a name="«name»">«name»</a>
		«ELSE»
		<a name="«name»" href="«fileName(containingType)»#«name»">«name»</a>
		«ENDIF»
		:
		«IF lowerBound == upperBound»
		[«lowerBound»]
		«ELSE»
		[«lowerBound»...«IF upperBound==-1»*«ELSE»«upperBound»«ENDIF»]
		«ENDIF»

		«IF type != null»
			«EXPAND supertypes FOR type»
		«ELSE»
			«EXPAND typeName(typeName)»
		«ENDIF»
		
		«IF opposite != null»
		<span class="opposite_block">
		[opposite: <a href="«fileName(opposite.containingType)»#«opposite.name»">«opposite.name»</a>]
		</span>
		«ENDIF»
		
		«IF tagline != null»
		<div class="tagline">
		«EXPAND ClassTemplate::javadocElement(true) FOR tagline»
		</div>
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE extension(Boolean local) FOR modeldoc::ModelExtension»
	<li class="extension">
		«IF local»
		<a name="«name»">«name»</a>
		«ELSE»
		<a name="«name»" href="«fileName(containingClass)»#«name»">«value»</a>
		«ENDIF»
		
		<span class="javadoc_reference">«EXPAND linkReference FOR reference»</span>
	</li>
«ENDDEFINE»

«DEFINE javadocElement(boolean allowSpace) FOR modeldoc::Reference»
	<span class="error">Unknown javadoc '«this»'</span>
«ENDDEFINE»

«DEFINE javadocElement(boolean allowSpace) FOR modeldoc::JavadocTagElement»<span class="javadocTag «getCssTagName(name)»">«IF name == "@inference" || name == "@operational" || name == "@implementation" || name == "@example"-»
«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«EXPAND javadocSemanticsElement FOR fragments.first()-»
«EXPAND javadocElement(true) FOREACH fragments.withoutFirst()-»
«ELSEIF name == "@issue"-»
<span class="issue"><a href="http://code.google.com/p/iaml/issues/detail?id=«EXPAND javadocElement(false) FOREACH fragments-»">issue «EXPAND javadocElement(false) FOREACH fragments-»</a></span>
«ELSEIF name == "@type"-»
<code class="type">«EXPAND javadocElement(false) FOREACH fragments-»</code>
«ELSEIF name == "@model" || name == "@link"-»
«EXPAND javadocModelElement FOREACH fragments-»
«ELSE-»
«EXPAND javadocElement(true) FOREACH fragments-»
«ENDIF-»</span>«ENDDEFINE»

«DEFINE javadocElement(boolean allowSpace) FOR modeldoc::JavadocTextElement-»
«IF !allowSpace && !(value.startsWith(",") || value.startsWith(".")
	|| value.startsWith("-")
	|| value.startsWith("?") || value.startsWith(")"))»«" "»«ENDIF»«value-»
«ENDDEFINE»

«REM»the formatting is ugly, but we sadly can't have _any_ whitespace«ENDREM»
«DEFINE javadocModelElement FOR modeldoc::JavadocTextElement-»
«" "»«IF value.contains(".")-»
«value-»«REM»the value contains an illegal character; it can't link to a model element«ENDREM»
«ELSE-»
«IF value.trim().contains(" ")-»
«LET value.trim().split(" ") AS bits-»
«IF bits.first().contains("#")-»
«LET bits.first().trim().split("#") AS hashBits-»
<a href="«hashBits.first()».html#«hashBits.withoutFirst().first()»">«ENDLET-»
«ELSE-»
<a href="«bits.first()».html">«ENDIF-»
«FOREACH bits.withoutFirst().withoutLast() AS s»«s» «ENDFOREACH»«bits.last()»</a>«ENDLET-»
«ELSE-»
«IF value.trim().contains("#")-»
«LET value.trim().split("#") AS hashBits-»
<a href="«hashBits.first()».html#«hashBits.withoutFirst().first()»">«hashBits.withoutFirst().first()»</a>«ENDLET-» 
«ELSE-»
<a href="«value».html">«value»</a>«ENDIF-»
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«DEFINE javadocSemanticsElement FOR modeldoc::JavadocTextElement»
	«FOREACH value.trim().split(" ").withoutFirst() AS s»«s» «ENDFOREACH»
«ENDDEFINE»
«DEFINE javadocSemanticsElement FOR modeldoc::JavadocFragment»
	<span class="error">(unknown semantic starting tag '«this»')</span>
«ENDDEFINE»

/* no special meaning; just render it like normal */
«DEFINE javadocModelElement FOR modeldoc::JavadocFragment»
	«EXPAND javadocElement(true)» 
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::Reference»
	<span class="error">Unknown reference '«this»'</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::JavaMethod»
	<span class="java_method reference">[<a href="«EXPAND browseSource»«javaClass.plugin»/src/«getPackage(javaClass.package)»/«javaClass.name».java#«line»">«name»()</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::JavaClass»
	<span class="java_class reference">[<a href="«EXPAND browseSource»«plugin»/src/«getPackage(package)»/«name».java">«name»</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::DroolsPackage»
	<span class="drools_file reference">[<a href="«EXPAND browseSource»«plugin»/«getPackage(package)»/«name».drl">«name».drl</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::DroolsRule»
	<span class="drools_rule reference">[<a href="«EXPAND browseSource»«package.plugin»/«getPackage(package.package)»/«package.name».drl#«line»">«package.name»</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::Template»
	<span class="template reference">[<a href="«EXPAND browseSource»«templateFile.plugin»/«getPackage(templateFile.package)»/«templateFile.name».xpt#«line»">«templateFile.name»</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::FileLineReference»
	<span class="file_line_reference reference">[<a href="«EXPAND browseSource»«file.plugin»/«getPackage(file.package)»/«file.name»#«line»">«file.name»</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::FileReference»
	<span class="file_reference reference">[<a href="«EXPAND browseSource»«plugin»/«getPackage(package)»/«name»">«name»</a>]</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::ModelReference»
	<span class="model_reference reference">[<a href="«EXPAND viewSource»«plugin»/src/«getPackage(package)»/«name»/«name».html">«name».iaml</a>
	(<a class="model_source" href="«EXPAND viewSource»«plugin»/src/«getPackage(package)»/«name».iaml">source</a>)]</span>
«ENDDEFINE»

«DEFINE exampleLinkReference(modeldoc::ModelReference model) FOR modeldoc::FileReference»
	<a href="«EXPAND viewSource»«plugin»/«getPackage(package)»/«name»">«model.name».iaml</a>
«ENDDEFINE»
«DEFINE exampleModelReference FOR modeldoc::ModelReference»
	(<a class="model_source" href="«EXPAND viewSource»«plugin»/src/«getPackage(package)»/«name».iaml">source</a>)
«ENDDEFINE»

«DEFINE browseSource FOR emf::EObject-»http://code.google.com/p/iaml/source/browse/trunk/«ENDDEFINE»

«DEFINE viewSource FOR emf::EObject-»http://iaml.googlecode.com/svn/trunk/«ENDDEFINE»

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540  
 */
«DEFINE exception FOR Object»
«ENDDEFINE»
