import modeldoc;

fileName(modeldoc::EMFClass this) :
	name + ".html";

List[modeldoc::EMFAttribute] getInheritedAttributes(modeldoc::EMFClass this) :
	supertypes.attributes.union( supertypes.getInheritedAttributes() ); 

List[modeldoc::EMFReference] getInheritedReferences(modeldoc::EMFClass this) :
	supertypes.references.union( supertypes.getInheritedReferences() ); 

List[modeldoc::Constraint] getInheritedConstraints(modeldoc::EMFClass this) :
	supertypes.constraints.union( supertypes.getInheritedConstraints() ); 

List[modeldoc::ModelExtension] getInheritedExtensions(modeldoc::EMFClass this) :
	supertypes.extensions.union( supertypes.getInheritedExtensions() ); 

List[modeldoc::OperationalSemantic] getInheritedOperationalSemantics(modeldoc::EMFClass this) :
	supertypes.operationalSemantics.union( supertypes.getInheritedOperationalSemantics() ); 

List[modeldoc::InferenceSemantic] getInheritedInferenceSemantics(modeldoc::EMFClass this) :
	supertypes.inferenceSemantics.union( supertypes.getInheritedInferenceSemantics() ); 

List[modeldoc::Example] getInheritedExamples(modeldoc::EMFClass this) :
	supertypes.examples.union( supertypes.getInheritedExamples() ); 

/**
 * Get a unique model reference ID that is consistent across multiple
 * model references.
 */
String uniqueModelID(modeldoc::ModelReference this) :
	plugin + ";" + package + ";" + name;

String getString(modeldoc::JavadocTagElement this) :
	name + " " + fragments.getString().toString();

String getString(modeldoc::JavadocFragment this) :
 	"";

String getString(modeldoc::JavadocTextElement this) :
	value;

/**
 * Converts 'foo.bar.baz' into 'foo/bar/baz'.
 * If package is the empty string '', returns '.'.
 */
getPackage(String this) :
	this == "" ? "." : replaceAll("\\.", "/");

/**
 * Get all direct and inherited subtypes of the given class.
 */
Set[modeldoc::EMFClass] allSubtypes(modeldoc::EMFClass this) :
	subtypes.toSet().union( subtypes.collect(e | allSubtypes(e)).flatten() );

String timestamp() :
	JAVA org.openiaml.docs.generation.codegen.ModeldocCodeGenerator.timestamp();

/**
 * Turn a string like "InputTextField" into "Input Text Field".
 */
String humanise(String name) :
	JAVA org.openiaml.docs.generation.codegen.LatexCodegenFunctions.humanise(java.lang.String);

/**
 * Turn a string like "InputTextField" into "input-text-field".
 */
String latexise(String name) :
	JAVA org.openiaml.docs.generation.codegen.LatexCodegenFunctions.latexise(java.lang.String);

/**
 * Escape out any HTML, and also make LaTeX-safe. See Javadocs for more information.
 */
String convertHTMLIntoLatex(String value) :
	JAVA org.openiaml.docs.generation.codegen.LatexCodegenFunctions.convertHTMLIntoLatex(java.lang.String);

/**
 * Get a simple string representation of the given Javadocs string.
 * This is generally used for sorting.
 * 
 * @param e a soup of Javadoc tags
 * @return a simple string representation of how it may be rendered
 */
String collateJavadocs(modeldoc::JavadocTagElement e) :
	JAVA org.openiaml.docs.generation.codegen.ModeldocCodeGenerator.collateJavadocs(org.openiaml.docs.modeldoc.JavadocTagElement);

/**
 * Convert a tag name such as '@model' into a CSS-able class name
 * such as 'tag_model'.
 */
String getCssTagName(String n) :
	if n == null
		then ""
		else "tag_" + n.replaceAll("@", "");

/**
 * Get the total number of rules used in this system.
 */
String getTotalRuleCount(modeldoc::ModelDocumentation root) :
	JAVA org.openiaml.docs.generation.codegen.ModeldocCodeGenerator.getTotalRuleCount(org.openiaml.docs.modeldoc.ModelDocumentation);

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540
 * to use: «EXPAND exception FOR throwException("Your message goes here")»
 * AND add this anywhere in your template file: (very important)

«DEFINE exception FOR Object»
«ENDDEFINE»
   
 */
String throwException(String message) :
	JAVA org.openiaml.docs.generation.codegen.ModeldocCodeGenerator.throwException(java.lang.String);
	
