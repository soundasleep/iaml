/**
 * Creates the default {@model EventTrigger}s and {@model Condition}s of
 * {@model VisibleThing}s.
 */
package org.openiaml.model.drools.rules.visible

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.datatypes.*;

import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.model.model.users.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

/**
 * @inference VisibleThing
 *		{@model VisibleThing}s have an {@model EventTrigger} 'onInput'.
 */
rule "VisibleThings have an event onInput"
	when
		field : VisibleThing ( )
		not ( event : EventTrigger ( field.onInput == event ))
	
		eval ( handler.veto( field ))
	
	then
		EventTrigger event = handler.generatedEventTriggerOnInput(field, field);
		handler.setName(event, "onInput");
		queue.add(event, drools);

end

/**
 * We only create currentInput for things that can actually use it, to
 * simplify the completed model; i.e. only text fields.
 *
 * @inference InputTextField
 *		{@model InputTextField}s have an {@model Property} 'currentInput'.
 */
rule "InputTextFields have a Property currentInput"
	when
		field : InputTextField ( )
		type : EXSDDataType( definition != null, 
			eval(functions.equalDataTypes(definition, BuiltinDataTypes.getTypeString())))  
		not ( property : Property ( field.currentInput == property ))
	
		eval ( handler.veto( field ))
	
	then
		Property property = handler.generatedPropertyCurrentInput(field, field);
		handler.setName(property, "currentInput");
		handler.setType(property, type);
		queue.add(property, drools);

end

/**
 * @inference VisibleThing
 *		{@model VisibleThing}s have an {@model EventTrigger} 'onClick'.
 */
rule "VisibleThings have an event onClick"
	when
		f : VisibleThing( )
		not (event : EventTrigger( f.onClick == event ))
				
		eval ( handler.veto( f ))
			
	then
		EventTrigger event = handler.generatedEventTriggerOnClick(f, f);
		queue.add(event, drools);
		
end

/**
 * @inference VisibleThing
 *		{@model VisibleThing}s have an {@model PrimitiveCondition} 'empty'.
 */
rule "VisibleThings have a PrimitiveCondition 'empty'"
	when
		f : VisibleThing( )
		not (condition : Condition( f.empty == condition ))
				
		eval ( handler.veto( f ))
			
	then
		PrimitiveCondition condition = handler.generatedPrimitiveCondition(f, f,
			ModelPackage.eINSTANCE.getVisibleThing_Empty());
		handler.setName(condition, "empty");
		queue.add(condition, drools);
		
end

/**
 * @inference VisibleThing
 *		{@model VisibleThing}s have an {@model PrimitiveCondition} 'not empty'.
 */
rule "VisibleThings have a PrimitiveCondition 'not empty'"
	when
		f : VisibleThing( )
		not (condition : Condition( f.notEmpty == condition ))
				
		eval ( handler.veto( f ))
			
	then
		PrimitiveCondition condition = handler.generatedPrimitiveCondition(f, f,
			ModelPackage.eINSTANCE.getVisibleThing_NotEmpty());
		handler.setName(condition, "not empty");
		queue.add(condition, drools);
		
end

/**
 * @inference VisibleThing
 *		A {@model VisibleThing} has a {@model PrimitiveOperation} 'hide'.
 */
rule "Create 'hide' PrimitiveOperation for VisibleThing"
	when
		tf : VisibleThing( )
		not ( op : Operation ( name == "hide", eContainer == tf ))
		
		eval ( handler.veto( tf ))
	
	then
		PrimitiveOperation warning = handler.generatedPrimitiveOperation(tf, tf);
		handler.setName(warning, "hide");
		queue.add(warning, drools);
	
end

/**
 * @inference VisibleThing
 *		A {@model VisibleThing} has a {@model PrimitiveOperation} 'show'.
 */
rule "Create 'show' PrimitiveOperation for VisibleThing"
	when
		tf : VisibleThing( )
		not ( op : Operation ( name == "show", eContainer == tf ))
		
		eval ( handler.veto( tf ))
	
	then
		PrimitiveOperation warning = handler.generatedPrimitiveOperation(tf, tf);
		handler.setName(warning, "show");
		queue.add(warning, drools);
	
end

