«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE updateAllFrameProperties FOR model::InternetApplication-»
/* Is there additional actions we should do on the client-side once this
 * property has changed? */
try {
	/**
	 * We cheat; we just iterate over ALL properties in the application.
	 * If the property is contained in a text field and on the current frame,
	 * then we specify the client to update it (we don't care if it hasn't
	 * changed). TODO this can probably do with a lot more optimisation!
	 */
	«REM»group by containingFrame: optimization«ENDREM»
	«FOREACH allProperties().collect(e|containingFrame(e)).toSet() AS frame»
	if ($frame_id == "«safeNameString(frame.id)-»") {
		«EXPAND outgoingEmailValue FOREACH allProperties(this).select(p|containingFrame(p)==frame)»
	}
	«ENDFOREACH»
} catch (IamlRuntimeException $e) {
	// redirect to the exception frame
	$url = "exception.php?fail=" . urlencode($e->getMessage() . " [from setApplicationValue]");
	log_message("[exception] " . print_r($e, true));
	log_message("[update exception handler] Redirecting to '$url' (fail)");

	log_message("redirect " 
		. escape_parameter_string($url));
	echo "\nredirect " 
		. escape_parameter_string($url);				
	die;
}
«ENDDEFINE»

«DEFINE outgoingEmailValue FOR model::Property»
	«IF model::visual::InputTextField.isInstance(eContainer)»
		/* the property "«this»" needs to be updated on the client */
		if («EXPAND template::operations::Parameters::isSetParameter(true)») {
			// but only if it's actually set
			// get the current value
			$value = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
			
			// pass it to the client 
			log_message("outgoing value to '«eContainer»' («safeNameString(((model::visual::InputTextField) eContainer).id)»): '$value'");
			log_message("set_value " 
				. escape_parameter_string("«safeNameString(((model::visual::InputTextField) eContainer).id)»")
				. " "
				. escape_parameter_string($value));
			echo "\nset_value " 
				. escape_parameter_string("«safeNameString(((model::visual::InputTextField) eContainer).id)»")
				. " "
				. escape_parameter_string($value);
		}				
	«ENDIF»
«ENDDEFINE»
