«IMPORT iaml»

/**
 * Methods for accessing data from domain objects and attributes.
 * All of this code is expected to execute on the server.
 */
«EXTENSION template::GeneratorExtensions»

/* code to _save_ attributes */
«DEFINE storeDomainAttribute(Boolean php) FOR model::DomainAttributeInstance-»
	«EXPAND storeDomainAttributeDefinition(php) FOR this»

	«IF php»
		«IF isAutosaveOff(this)»
		/* for elements with 'autosave' off */
		function queue_store_domain_attribute_«safeName()»($arg0) {
			«IF model::DomainObjectInstance.isInstance(eContainer)»
				$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
			«ELSE»
				$iterator = DomainIterator_Attribute_«safeName()»::getInstance();
			«ENDIF»
			$iterator->getAttributeInstance( DomainAttribute_«safeName(getAttributeForAttributeInstance())»::getInstance() )->setValue($arg0);
		}
		
		/* execute the actual save for attribute id '«id»' */
		function save_queued_store_domain_attribute_«safeName()»() {
			«IF model::DomainObjectInstance.isInstance(eContainer)»
				$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
				$iterator->save();
			«ELSE»
				«throwException("Can't save queued value for non-contained attribute '" + this)»
			«ENDIF»
		}
		
		«IF !isGeneratedPrimaryKey()»
		/**
		 * Can the given attribute instance be saved without throwing an error?
		 * Not generated for generated primary keys. (TODO it should also not be
		 * generated for attributes with a default value.)
		 */
		function can_save_queued_store_domain_attribute_«safeName()»() {
			«IF containingSession(this) != null»
				/* contained within a session */
				$arg0 = has_session("instance_queue_«safeName(containingSession())-»_«safeName()-»", false);
			«ELSE»
				/* contained within a frame */
				$arg0 = get_application_value("instance_queue_«safeName()-»", false);
			«ENDIF»
			
			if ($arg0 === false) {
				return false;
			}
				
			// can we cast it?
			return can_cast($arg0, '«type.uRI»');
		}
		«ENDIF»
		«ENDIF»
	«ELSE»
		/* for attributes with 'autosave' set to false */
		function queue_store_domain_attribute_«safeName()»(arg0) {
			«IF containingSession() != null»
				set_session("instance_queue_«safeName(containingSession())-»_«safeNameString(id)-»", arg0, null, true);
			«ELSE»
				set_application_value("instance_queue_«safeNameString(id)-»", arg0, null, true);
			«ENDIF» 
		}
		
		function save_queued_store_domain_attribute_«safeName()»() {
			save_queued_store_domain_attribute("«safeNameString(id)-»");
		}
	«ENDIF»
«ENDDEFINE»

/**
 * @implementation DomainAttributeInstance
 *		Currently, a {@model DomainAttributeInstance} derived from a primary key of
 *		another {@model DomainAttribute} through the use of {@model ExtendsEdge} can not
 *		be updated.
 */
«DEFINE storeDomainAttributeDefinition(Boolean php) FOR model::DomainAttributeInstance-»
	«IF php»
		function store_domain_attribute_«safeName()»($arg0) {
			/* store a value into attribute id '«id»' */
			«IF model::DomainObjectInstance.isInstance(eContainer)»
				/* contained in an object instance '«eContainer»': get it from the instance */
				$iterator = DomainIterator_«safeName(eContainer)»::getInstance();
			«ELSE»
				/* contained in an attribute instance '«this»': get it from the instance */
				$iterator = DomainIterator_Attribute_«safeName()»::getInstance();
			«ENDIF»
			$iterator->getAttributeInstance( DomainAttribute_«safeName(getAttributeForAttributeInstance())»::getInstance() )->setValue($arg0);
		}
	«ELSE»
		function store_domain_attribute_«safeName()»(arg0) {
			set_domain_attribute("«safeNameString(id)-»", arg0);
		}
	«ENDIF»
«ENDDEFINE»

/**
 * @implementation DomainObjectInstance
 *		The current offset of browsing {@model DomainObjectInstance instances} is stored
 *		in the containing {@model Session} if there is one, otherwise globally.
 */
«DEFINE storeDomainObject FOR model::DomainObjectInstance-»
	function save_queued_store_domain_object_«safeName()-»() {
		/* save a queued domain object instance */
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->save();
	}
	
	/**
	 * Can the current object instance be saved without throwing an error?
	 * i.e. Have all of the required attribute instances been set?
	 */
	function can_object_instance_save_«safeName()»() {
		«FOREACH attributes AS a»
			«IF !isGeneratedPrimaryKey(a)»
			if (!can_save_queued_store_domain_attribute_«safeNameString(a.id)-»()) {
				return false;
			}
			«ENDIF»
		«ENDFOREACH»
		return true;
	}
«ENDDEFINE»

/** to find the relevant domain attribute set method */
«DEFINE findSetDomainAttributeMethod FOR model::InternetApplication» 
	«EXPAND findDomainAttribute FOREACH getAllDomainAttributeInstances()»
«ENDDEFINE»

«DEFINE findDomainAttribute FOR model::DomainAttributeInstance»
	if ($id == "«safeNameString(id)-»") {
		store_domain_attribute_«safeNameString(id)-»($arg0);
		log_message("set_application_value.php: succeeded");
		echo "ok";
		echo_necessary_update_callbacks();
		die;
	}
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
