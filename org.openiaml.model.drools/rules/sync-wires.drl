#created on: 4/11/2008
package org.openiaml.model.drools.rules.sync_wires

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Sync wires between objects should create sync wires between all elements inside each object that matches"
	when
		# source : SyncWire(, eval(connects(source, p1, p2)) )
		source : SyncWire()
		# we put in these to prevent multiple wires being generated for two connects

		p1 : CanBeSynced( source.from == p1 )
		# cannot do 'source.to == this, this != p1' - this fails!!
		p2 : CanBeSynced( source.to == p2 )
		
		eval (p1 != p2)
		
		e1 : CanBeSynced( eContainer == p1 )
		e2 : CanBeSynced( eContainer == p2 )

		eval(functions.nameMatches(e1, e2))
	
		not (sw : SyncWire( name == "sync", eContainer == source, eval(functions.connects( sw, e1, e2)) ))
		
		eval( handler.veto( source ))
						
		eval ( handler.veto( source ))
		
	then
		SyncWire sw = handler.generatedSyncWire(source, source, e1, e2);
		handler.setName(sw, "sync");
		queue.add(sw, drools);
		
end

rule "Run instance wire from edit to update (onChange)"
	when
		sw : SyncWire()
		source : Editable( )
		target : ContainsOperations( )
		eval(functions.connects(sw, source, target))
		
		event : EventTrigger( source.onChange == event ) 
		operation : Operation( eContainer == target, name=="update" )
		
		not (RunAction( from == event, to == operation, name == "run", eContainer == sw ))
						
		eval ( handler.veto( sw ))
		
	then
		RunAction rw = handler.generatedRunAction(sw, sw, event, operation);
		handler.setName(rw, "run");
		queue.add(rw, drools);

end

rule "Connect parameter wire to: run instance wire from source.edit to target.update (onChange)"
	when
		sw : SyncWire()
		source : Editable( )
		target : ContainsOperations( )
		eval( functions.connects(sw, source, target))
	
		event : EventTrigger( source.onChange == event )
		operation : Operation( eContainer == target, name=="update" )
		field : Property( eContainer == source, name=="fieldValue" )
		wire : RunAction( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[sync] run instance parameter (source.edit)"); 
		queue.add(pw, drools);

end

# Ideally, these two commands would be joined together into one
rule "Run instance wire from source.access to source.init, when we have a value to provide as a parameter (onAccess)"
	when
		sw : SyncWire()
		source : Accessible( )  
		target : ContainsOperations( )
		eval ( functions.connects(sw, source, target ))
		
		event : EventTrigger( source.onAccess == event ) 
		operation : Operation( eContainer == source, name=="init" )
		field : Property( eContainer == target, name=="fieldValue" )
		
		not (RunAction( from == event, to == operation, name == "run", eContainer == sw ))
						
		eval ( handler.veto( sw ))
		
	then
		RunAction rw = handler.generatedRunAction(sw, sw, event, operation);
		handler.setName(rw, "run");
		queue.add(rw, drools);

end

rule "Run instance wire from source.access to source.init, adding ConditionEdge to check it is set (onAccess)"
	when
		sw : SyncWire()
		source : Accessible( )  
		target : ContainsOperations( )
		eval ( functions.connects(sw, source, target))
		
		event : EventTrigger( source.onAccess == event ) 
		operation : Operation( eContainer == source, name=="init" )
		field : Property( eContainer == target, name=="fieldValue" )
		
		run : RunAction( from == event, to == operation, name == "run", eContainer == sw )
		
		# condition check
		condition : CompositeCondition ( eContainer == target, name == "fieldValue is set" )
		
		not ( ConditionEdge ( from == condition, to == run ))
					
		eval ( handler.veto( sw ))
	
	then
		ConditionEdge cw = handler.generatedConditionEdge(sw, sw, condition, run);
		queue.add(cw, drools);
		
end	

# Ideally, these two commands would be joined together into one
rule "Connect parameter wire to: run instance wire from source.access to source.init"
	when
		sw : SyncWire()
		source : Accessible( )
		target : ContainsOperations( )
		eval ( functions.connects(sw, source, target))
	
		event : EventTrigger( source.onAccess == event )
		operation : Operation( eContainer == source, name=="init" )
		field : Property( eContainer == target, name=="fieldValue" )
		wire : RunAction( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[sync] run instance parameter (source.access)"); 
		queue.add(pw, drools);

end

/**
 * I think that chained SyncWires are generally impossible. Consider:
 * 
 *   page1 <--> page2 <--> unrelated
 *   condition on both SyncWires, matching (page1, page2)
 * 
 * If we allow for chaining, then the condition 
 *   condition[page2, unrelated]
 * will be copied onto
 *   condition[page1, page2]
 * which means the SyncWire will never satisfy all its conditions.
 *
 * --
 *
 * I think that chained SyncWires are only possible *when* each
 * SyncWire has identical Conditions, so we don't have to combine
 * the two conditions together into something impossible.
 *
 * However, trying to implement this did nothing. I think it is because
 * without adding more information to the model, you cannot chain.
 * The information you'd be adding is stuff like ChainedSyncWire, but
 * this defeats the purpose of having it in the model, because this should
 * be handled by the code generation instead.
 */

rule "Cascaded SyncWires: Conditions from parent to child"
	when

		# the containing elements	
		sw : SyncWire (  )
		source : CanBeSynced( sw.from == source )  
		// cannot use 'sw.to == target, target != source'
		// can NOT use 'sw.to == target, this != source'
		// can NOT use 'sw.to == this, this != source'
		target : CanBeSynced( sw.to == target )
		eval ( target != source )
				
		# the elements contained
		e1 : CanBeSynced( eContainer == source )
		e2 : CanBeSynced( eContainer == target, eval(functions.nameMatches(e1, e2)) )
		esw : SyncWire( name == "sync", eval(functions.connects(esw, e1, e2)) )
		
		# there is a condition on the containing sync wire
		condition : Condition ( )
		cw : ConditionEdge( from == condition, to == sw )

		# and there isn't one on the element sync wire
		not (ecw : ConditionEdge( from == condition, to == esw )) 
						
		eval ( handler.veto( cw ))
		
	then
		ConditionEdge ecw = handler.generatedConditionEdge( cw, sw, condition, esw );
		handler.setName(ecw, "[copied] from: " + cw.getId());
		queue.add(ecw, drools);

end

rule "Cascaded SyncWires: Parameters from parent to child"
	when

		# the containing elements
		sw : SyncWire (  )
		source : CanBeSynced( sw.from == source )  
		target : CanBeSynced( sw.to == target )
		eval ( target != source )
		
		# the elements contained
		e1 : CanBeSynced( eContainer == source )
		e2 : CanBeSynced( eContainer == target, eval(functions.nameMatches(e1, e2)) )
		esw : SyncWire( name == "sync", eval(functions.connects(esw, e1, e2)) )
		
		# there is a condition on the containing sync wire
		condition : Condition ( )
		cw : ConditionEdge( from == condition, to == sw )
		
		# the generated condition wire
		ecw : ConditionEdge( from == condition, to == esw )
		
		# there is a parameter on the condition wire
		parameter : ParameterEdgesSource( )
		pw : ParameterEdge( from == parameter, to == cw )

		# and there isn't one on the element sync wire
		not (epw : ParameterEdge( from == parameter, to == ecw )) 
						
		eval ( handler.veto( cw ))
		
	then
		# create it
		ParameterEdge epw = handler.generatedParameterEdge( cw, sw, parameter, ecw );
		handler.setName(epw, "[copied] from: " + pw.getId());
		queue.add(epw, drools);

end

# SyncWires do not connect the fields together; they can _also_
# connect the Frames together.
rule "Connect Session.init to incoming SyncWires (contained in Frames) (onChange 2)"
	when
		session : Session (  )
		sw : SyncWire(  )
		sourceFrame : VisibleThing( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connects(sw, sourceFrame, targetFrame ))

		sw2 : SyncWire ( eContainer == sw)
		sourceElement : Editable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connects(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event ) 
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : RunAction( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )
		
		not (RunAction( eContainer == sw2, from == inite, to == operation, name == "run" ))
						
		eval ( handler.veto( sw2 ))
		
	then
		RunAction rw2 = handler.generatedRunAction(sw2, sw2, inite, operation);
		handler.setName(rw2, "run");
		queue.add(rw2, drools);
		
end

rule "Connect Session.init to incoming SyncWires (contained in Frames) (onChange 3)"
	when
		session : Session (  )
		sw : SyncWire(  )
		sourceFrame : Frame( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connects(sw, sourceFrame, targetFrame ))

		sw2 : SyncWire ( eContainer == sw)
		sourceElement : Editable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connects(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event ) 
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : RunAction( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )
		
		not (RunAction( eContainer == sw2, from == inite, to == operation, name == "run" ))
						
		eval ( handler.veto( sw2 ))
		
	then
		RunAction rw2 = handler.generatedRunAction(sw2, sw2, inite, operation);
		handler.setName(rw2, "run");
		queue.add(rw2, drools);
		
end

rule "Connect parameter for Session.init to incoming SyncWires (contained in Frames) (onChange) (2)"
	when
		session : Session (  )
		sw : SyncWire(  )
		sourceFrame : VisibleThing( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connects(sw, sourceFrame, targetFrame ))

		sw2 : SyncWire ( eContainer == sw)
		sourceElement : Editable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connects(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event ) 
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : RunAction( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )

		initrw : RunAction( eContainer == sw2, from == inite, to == operation, name == "run" )
		
		field : Property( eContainer == sourceElement, name=="fieldValue" )
		pw : ParameterEdge( eContainer == sw2, from == field, to == rw ) 

		not( ParameterEdge( eContainer == sw2, from == field, to == initrw ))  
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw2 = handler.generatedParameterEdge(sw, sw, field, initrw);
		queue.add(pw2, drools);		
end

rule "Connect parameter for Session.init to incoming SyncWires (contained in Frames) (onChange) (3)"
	when
		session : Session (  )
		sw : SyncWire(  )
		sourceFrame : Frame( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connects(sw, sourceFrame, targetFrame ))

		sw2 : SyncWire ( eContainer == sw)
		sourceElement : Editable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connects(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event ) 
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : RunAction( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )

		initrw : RunAction( eContainer == sw2, from == inite, to == operation, name == "run" )
		
		field : Property( eContainer == sourceElement, name=="fieldValue" )
		pw : ParameterEdge( eContainer == sw2, from == field, to == rw ) 

		not( ParameterEdge( eContainer == sw2, from == field, to == initrw ))  
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw2 = handler.generatedParameterEdge(sw, sw, field, initrw);
		queue.add(pw2, drools);		
end

rule "Refresh New Instance Object mappings (except for generated primary keys) when sync connected to Forms: create text fields"
	when
		sync : SyncWire(  )
		form : InputForm (  )
		instance : DomainObjectInstance (  )
		
		eval(functions.connects(sync, form, instance))
		
		originalAttribute : DomainAttribute ( )
		attribute : DomainAttributeInstance( eContainer == instance )
		ExtendsEdge ( from == attribute, to == originalAttribute )
		
		# at the top of the attribute inheritance heirarchy, not
		# a generated primary key
		eval( functions.notExtendingGeneratedPrimaryKey( originalAttribute ) )
		
		not ( tf : InputTextField( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		InputTextField text = handler.generatedInputTextField(sync, form);
		handler.setName(text, attribute.getName());
		queue.add(text, drools);

end

rule "Refresh Domain Object mappings (except for generated primary keys) when sync connected to Forms: create text fields"
	when
		sync : SyncWire(  )
		form : InputForm (  )
		object : DomainObject (  )
		
		eval(functions.connects(sync, form, object))
		
		attribute : DomainAttribute( eContainer == object )
		
		# at the top of the attribute inheritance heirarchy, not
		# a generated primary key
		eval( functions.notExtendingGeneratedPrimaryKey( attribute ) )
		
		not ( tf : InputTextField( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		InputTextField text = handler.generatedInputTextField(sync, form);
		handler.setName(text, attribute.getName());
		queue.add(text, drools);

end

/**
 * @inference InputForm,SyncWire
 *		When two {@model InputForm}s are connected by a {@model SyncWire} and the
 *		source {@model InputForm} contains a {@model InputTextField}, another text field
 *		with the same name is created in the target {@model InputForm}.
 */
rule "Refresh mappings between InputForms connected to InputForms containing InputTextFields"
	when
		sync : SyncWire(  )
		source : InputForm (  )
		target : InputForm (  )
		
		eval(functions.connects(sync, source, target))
		
		sf : InputTextField ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		InputTextField tf = handler.generatedInputTextField(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end

/**
 * @inference InputForm,SyncWire
 *		When two {@model InputForm}s are connected by a {@model SyncWire} and the
 *		source {@model InputForm} contains a {@model Label}, another label
 *		with the same name is created in the target {@model InputForm}.
 */
rule "Refresh mappings between InputForms connected to InputForms containing Labels"
	when
		sync : SyncWire(  )
		source : InputForm (  )
		target : InputForm (  )
		
		eval(functions.connects(sync, source, target))
		
		sf : Label ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label tf = handler.generatedLabel(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end

rule "A SyncWire between Attributes selected from a NewInstanceWire need to check that the attribute exists before initialising"
	when
		sync : SyncWire(  )
		form : InputForm (  )
		instance : DomainObjectInstance (  )
		
		eval(functions.connects(sync, form, instance))
		
		# the instance is created through a NewInstanceWire
		domainObject : DomainObject ( )
		newInstance : NewInstanceWire ( from == domainObject, to == instance )
		
		# contained attribute/field
		attribute : DomainAttributeInstance( eContainer == instance )
		tf : InputTextField ( eContainer == form )
		sync2 : SyncWire ( )
		
		eval(functions.connects(sync2, tf, attribute))
		
		# text field access/init events
		access : EventTrigger ( tf.onAccess == access ) 
		initOp : Operation ( eContainer == tf, name == "init" )
		run : RunAction ( from == access, to == initOp )
		
		attributeValue : Property ( eContainer == attribute, name == "fieldValue" )
		
		param : ParameterEdge ( from == attributeValue, to == run )  
		
		# exists? condition in the instance
		existsCondition : Condition ( eContainer == instance, name == "exists?" )
		
		# but not connected		
		not (ConditionEdge ( from == existsCondition, to == run ))
						
		eval ( handler.veto( sync2 ))
		
	then
		# connect it
		ConditionEdge cw = handler.generatedConditionEdge(sync2, sync2, existsCondition, run);
		handler.setName(cw, "check new instance exists");
		queue.add(cw, drools);

end

