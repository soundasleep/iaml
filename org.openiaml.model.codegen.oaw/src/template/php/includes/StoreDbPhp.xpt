«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE storeDbPhp FOR model::InternetApplication-»
<?php
/**
 * For storing a single value into the database (attribute id).
 */
 
require("header.php");
require("create_database.php");	// init db if necessary
require("properties_file.php");	// properties loading code

// queue up any log messages
queue_log_messages(true);

/**
 * Recursive functions in PHP. See default.js for Javascript implementations of these.
 * TODO add test cases to make sure these are both identical.
 */
function store_event($page_id, $event_name, $arg0) {
	// not sure how often this will actually be called: we block on operations
	/*
	register_running_functions();
	
	$function_id = "store_event_" . $page_id . "_" . $event_name;
	if (has_running_function($function_id)) {
		log_message("Breaking out of infinite loop: $function_id");
		return false;
	}
	*/
	
	/*
	 * a simple solution (but not scalable TODO): create a new HTTP request to store the event.
	 * a better solution is obviously to store the new event in this same page.
	 */	
	$url = get_baseurl() . "/store_event.php?page_id=" . urlencode($page_id)
		. "&event_name=" . urlencode($event_name)
		. "&arg0=" . urlencode($arg0);
		
	log_message("store_db.php:store_event calling $url");
	$result = call_remote_url($url);

	if (trim($result) != "ok")
		throw new IamlRuntimeException("store_db failed: \"" . $result . "\"");
		
	return true;
}

log_message("store_db.php? " . print_r($_GET, true));
$attribute_id = $_GET["attribute_id"] or throw_new_IamlRuntimeException("no attribute id");
$arg0 = $_GET["arg0"] or throw_new_IamlRuntimeException("no arg0");

// anti-infinite-loop trace tracking
add_running_function($attribute_id);

// find the table name
$db_type = null;
$db_name = false;
$table_name = false;
$row_name = false;
«EXPAND expandDomainStore FOREACH domainStores»
«EXPAND expandDomainObjectRoot FOREACH children»

if ($db_type == "pdo") {
	if (!$db_name)
		throw new IamlRuntimeException("no $db_type db found");
	if (!$table_name)
		throw new IamlRuntimeException("no $db_type table found (db=$db_name)");
	if (!$row_name)
		throw new IamlRuntimeException("no $db_type row found (table=$table_name)");
	
	// connect to the database source
	$db = new PDO($db_name) or throw_new_IamlRuntimeException("could not open $db_type db '$db_name'");
	
	// does anything exist?
	$results = $db->query("SELECT * FROM $table_name") or throw_new_IamlRuntimeException("could not look for existing values in $db_type '$table_name': " .print_r($db->errorInfo(), true));
	if ($results->fetch()) {
		// yes: update all existing
		$s = $db->prepare("UPDATE $table_name SET $row_name = ?") or throw_new_IamlRuntimeException("could not prepare $db_type update query: " . print_r($db->errorInfo(), true));
	} else {
		// no: insert new
		$s = $db->prepare("INSERT INTO $table_name ($row_name) VALUES (?)") or throw_new_IamlRuntimeException("could not prepare $db_type insert query: " . print_r($db->errorInfo(), true));
	}
	
	// update all existing
	$s->execute(array($arg0)) or throw_new_IamlRuntimeException("could not execute query: " . print_r($db->errorInfo(), true));
} elseif ($db_type == "properties") {
	if (!$db_name)
		throw new IamlRuntimeException("no $db_type db found");
	if (!$row_name)
		throw new IamlRuntimeException("no $db_type row found (table=$table_name)");
	
	$properties = load_properties($db_name);
	$properties = set_property($db_name, $properties, $row_name, $arg0); 
	
} else {
	throw new IamlRuntimeException("Unknown domain store type: $db_type");
}

// done
$s = null;
log_message("store_db.php: adding attribute_id=$attribute_id, arg0=$arg0 into db=$db_name, table=$table_name, row=$row_name");

log_message("done");
echo "ok";

«ENDDEFINE»

/** 
 * Expand out each DomainStore.
 */
«DEFINE expandDomainStore FOR model::DomainStore»
	/* Domain Store «this.name» */ 
	«EXPAND expandDomainObject(this) FOREACH children»
	
	/* Sole attributes */
	«EXPAND soleAttribute(this) FOREACH attributes» 
«ENDDEFINE»

/**
 * Expand out each DomainObject.
 */
«DEFINE expandDomainObject(model::DomainStore store) FOR model::DomainObject»
	«EXPAND expandDomainAttribute(store, this) FOREACH attributes»
«ENDDEFINE»

/**
 * Expand out each DomainAttribute.
 */
«DEFINE expandDomainAttribute(model::DomainStore store, model::DomainObject object) FOR model::DomainAttribute»
	«IF isPropertiesFile(store)»
		«EXPAND expandDomainAttributeProperties(store, object) FOR this»
	«ELSE»
		«EXPAND expandDomainAttributeDatabase(store, object) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE expandDomainAttributeDatabase(model::DomainStore store, model::DomainObject object) FOR model::DomainAttribute»
	if ($attribute_id == "«safeNameString(id)»") {
		$db_type = "pdo";
		$db_name = "sqlite:«safeNameString(store.id)».db";
		$table_name = "«safeNameString(object.name)»";
		$row_name = "«safeNameString(name)»";
		
		// are there any onEdit operations for this attribute that we
		// have to then call?
		«EXPAND expandDomainAttributeEvents FOREACH eventTriggers»
	}
«ENDDEFINE»

«DEFINE expandDomainAttributeProperties(model::DomainStore store, model::DomainObject object) FOR model::DomainAttribute»
	if ($attribute_id == "«safeNameString(id)»") {
		$db_type = "properties";
		$db_name = "«store.file»";
		$table_name = null;
		$row_name = "«safeNameString(name)»";
		
		// are there any onEdit operations for this attribute that we
		// have to then call?
		«EXPAND expandDomainAttributeEvents FOREACH eventTriggers»
	}
«ENDDEFINE»

/**
 * Expand out each solo DomainAttribute.
 */
«DEFINE soleAttribute(model::DomainStore store) FOR model::DomainAttribute»
	«IF isPropertiesFile(store)»
		«EXPAND soleAttributeProperties(store) FOR this»
	«ELSE»
		«EXPAND soleAttributeDatabase(store) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE soleAttributeDatabase(model::DomainStore store) FOR model::DomainAttribute»
	if ($attribute_id == "«safeNameString(id)»") {
		$db_type = "pdo";
		$db_name = "sqlite:«safeNameString(store.id)».db";
		$table_name = "single_values";
		$row_name = "«safeNameString(name)»";
		
		// are there any onEdit operations for this attribute that we
		// have to then call?
		«EXPAND expandDomainAttributeEvents FOREACH eventTriggers»
	}
«ENDDEFINE»

«DEFINE soleAttributeProperties(model::DomainStore store) FOR model::DomainAttribute»
	if ($attribute_id == "«safeNameString(id)»") {
		$db_type = "properties";
		$db_name = "«store.file»";
		$table_name = null;
		$row_name = "«safeNameString(name)»";
		
		// are there any onEdit operations for this attribute that we
		// have to then call?
		«EXPAND expandDomainAttributeEvents FOREACH eventTriggers»
	}
«ENDDEFINE»

/* if an InternetApplication directly contains an AbstractObject,
   we still process it anyway. */
«DEFINE expandDomainObjectRoot FOR model::ApplicationElement»
	«REM»empty«ENDREM»
«ENDDEFINE»

«DEFINE expandDomainObjectRoot FOR model::DomainObject»
	«EXPAND expandDomainAttributeRoot(this) FOREACH attributes»
«ENDDEFINE»

«DEFINE expandDomainAttributeRoot(model::DomainObject object) FOR model::DomainAttribute»
	«IF isPropertiesFile(getDomainStore(this))»
		«EXPAND expandDomainAttributeRootProperties(object) FOR this»
	«ELSE»
		«EXPAND expandDomainAttributeRootDatabase(object) FOR this»
	«ENDIF»
«ENDDEFINE»

«DEFINE expandDomainAttributeRootDatabase(model::DomainObject object) FOR model::DomainAttribute»
	if ($attribute_id == "«safeNameString(id)»") {
		$db_type = "pdo";
		$db_name = "sqlite:internet_application.db";
		$table_name = "«safeNameString(object.name)»";
		$row_name = "«safeNameString(name)»";
		
		// are there any onEdit operations for this attribute that we
		// have to then call?
		«EXPAND expandDomainAttributeEvents FOREACH eventTriggers»
	}
«ENDDEFINE»

«DEFINE expandDomainAttributeRootProperties(model::DomainObject object) FOR model::DomainAttribute»
	if ($attribute_id == "«safeNameString(id)»") {
		$db_type = "properties";
		$db_name = "internet_application.properties";
		$table_name = null;
		$row_name = "«safeNameString(name)»";
		
		// are there any onEdit operations for this attribute that we
		// have to then call?
		«EXPAND expandDomainAttributeEvents FOREACH eventTriggers»
	}
«ENDDEFINE»

/**
 * Expand out any event triggers.
 */
«DEFINE expandDomainAttributeEvents FOR model::EventTrigger»
	«IF name=="edit"»
		«EXPAND template::php::EventTrigger::callOperations(false, true) FOREACH outEdges»
	«ENDIF»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»