«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/* default = nothing */
«DEFINE expandPage FOR model::ApplicationElement-»
«ENDDEFINE»

«DEFINE expandPage FOR model::visual::Page-»
	«FILE "output/"+safeName(id)+".php"-»
<?php
		/* generated page "«name-»" */

		// include header code
		«EXPAND php::HeaderPhp::headerPhp FOR this-»
		require("create_database.php");		// ensure DB exists
		
		// run any event triggers for this page
		«EXPAND php::EventTrigger::pageEvents FOREACH eventTriggers-»
		
		// expand any operations (both in this page and in any surrounding scopes)
		«EXPAND php::EventTrigger::expandOperations FOR this-»
	
		?>
		<html>
		<head>
			<title>«pageTitle()»</title>
			<link rel="stylesheet" type="text/css" href="default.css" />
			<script language="Javascript" src="js/prototype.js"></script>
			<script language="Javascript">
				«EXPAND js::DefaultJs::defaultJs FOR this-»
			</script>
			<script language="Javascript">
				var try_catch_depth = 0;
			
				«EXPAND expandOperations FOR this-»
				
				// this needs to be loaded *after* the page has loaded
				function loadStoredEvents() {
					$('response').innerHTML = "before loadStoredEvents...";
					<?php 
					«EXPAND php::EventsPhp::eventsPhp FOR this-» 
					?>
				}
			</script>
		</head>
		
		<body onLoad="loadStoredEvents()">
		<div style="font-size:small; text-align: right;"><a href="sitemap.html">sitemap</a></div>
		
		<h1>«pageTitle()»</h1>
		
		<?php
		/* expand any fail error messages */
		if (require_get("fail")) {
?>
	<div class="error">
		<p>An exception occured: <i><?php echo htmlspecialchars(require_get("fail")); ?></i></p>
	</div>
<?php 
		}
		?>
		
		«EXPAND expandChild FOREACH children-»
		
		<div id="debug">			
		<div>
		
		<div id="response">empty</div>
		
		<!-- for test cases to improve speed: an outstanding ajax calls counter -->
		<div id="ajax_monitor"></div>
		</body>
		</html>
	«ENDFILE»
«ENDDEFINE»

«DEFINE expandChild FOR model::ApplicationElement-»
«ENDDEFINE»

«DEFINE expandChild FOR model::visual::InputForm-»
	<form id="«safeName(id)»" «EXPAND EventTrigger::expandEventTriggers FOREACH eventTriggers-»>
		<h2>«formName()»</h2>
		
		«EXPAND expandChild FOREACH children-»
	</form>
«ENDDEFINE»

«DEFINE expandChild FOR model::visual::InputTextField-»
	<div>
	<label id="label_«safeName(id)-»">
		«textFieldName()»
		
		<input type="text" id="«safeName(id)»" name="«safeName(id)»" «EXPAND EventTrigger::expandEventTriggers FOREACH eventTriggers-»>
	</label>
	</div>
«ENDDEFINE»

/* currently, a "Button" == a submit button. */
«DEFINE expandChild FOR model::visual::Button-»
	<input type="submit" id="button_«safeName(id)-»" value="«buttonName()»" «EXPAND EventTrigger::expandEventTriggers FOREACH eventTriggers-» />
«ENDDEFINE»

/* expand out the operations for the page */
«DEFINE expandOperations FOR model::ContainsOperations-»
	«EXPAND expandOperation FOREACH operations-»
«ENDDEFINE»

«DEFINE expandOperations FOR model::ApplicationElementContainer-»
	// expanding operations for «this»
	«EXPAND expandOperation FOREACH allContainerOperations()-»
«ENDDEFINE»

«DEFINE expandOperation FOR model::Operation-»
	/* simple operation */
	function do_«safeName()»(«EXPAND expandParameters FOREACH parameters SEPARATOR ", "-») {
		alert("simple operation: «name»");
	}
«ENDDEFINE»

«DEFINE expandOperation FOR model::CompositeOperation»
	/** composite operation "«name»" */
	var running_«safeName()» = false;
	function do_«safeName()»(«EXPAND expandParameters FOREACH parameters SEPARATOR ", "-») {
		«REM»here we would expand out the data flow of the operation, etc«ENDREM»
		// operation: «name»
		if (running_«safeName()-» == false) {
			running_«safeName()-» = true;		// prevent loops
			
			// has this operation got a fail handler?
			«IF getFailEdge() != null»
				// fail edge «getFailEdge()»
				try {
					try_catch_depth++;
			«ENDIF»
			
			// execute the operation
			// if we are at the root try/catch, catch the exception explicitly
			if (try_catch_depth == 0 «IF getFailEdge() != null»&& false«ENDIF» ) {
				try {
					«EXPAND doExecutionFlow FOR startNode()-»
				} catch (e if e instanceof IamlJavascriptException) {
					alert("Exception: " + e);
				}
			} else {
				«EXPAND doExecutionFlow FOR startNode()-»
			}					

			«IF getFailEdge() != null»
					try_catch_depth--;
				} catch (e if e instanceof IamlJavascriptException) {
					debug("Caught exception " + e);
					«EXPAND expandFailEdge FOR getFailEdge()»
				}
			«ENDIF»

			running_«safeName()-» = false;
		}
	}
«ENDDEFINE»

«DEFINE expandParameters FOR model::Parameter-»
	«safeName()-»
«ENDDEFINE»

/* I don't know how in JS we are supposed to handle multiple out edges yet... but we'll get there ;) */
«DEFINE doExecutionFlow FOR model::operations::StartNode-»
	// flow starts here
	«FOREACH outExecutions AS e-»
		«EXPAND doExecutionFlowNext FOR e.to-»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE doExecutionFlow FOR model::ActivityNode-»
	// nothing for an activity node
«ENDDEFINE»

/* an edge that is the end (both StartNode and FinishNode also fall into this) */
«DEFINE doExecutionFlowNext FOR model::ExecutionEdgeDestination-»
	// do nothing «this-»
«ENDDEFINE»

«DEFINE doExecutionFlowNext FOR model::operations::CancelNode-»
	«IF exceptionText.length > 0»
		throw new IamlJavascriptException("«exceptionText»");
	«ENDIF»
«ENDDEFINE»

/* a chained operation: carry on */
«DEFINE doExecutionFlowNext FOR model::ChainedOperation-»
	// chained operation «name-»
	«EXPAND expandOperationContents FOR this-»
	«FOREACH outExecutions AS e-»
		«EXPAND doExecutionFlowNext FOR e.to-»
	«ENDFOREACH»
«ENDDEFINE»

/* a decision operation: expandOperationContents will continue the execution flow */
«DEFINE doExecutionFlowNext FOR model::operations::DecisionOperation-»
	// decision operation «name-»
	«EXPAND expandOperationContents FOR this-»
«ENDDEFINE»

/* expand the definition of an operation, assumed to be called as part of an existing function call */
«DEFINE expandOperationContents FOR model::Operation-»
	«REM»special operation names«ENDREM»
	«IF name == "setPropertyToValue"-»
		«REM»outflowTarget == inflowTarget«ENDREM»
		// outFlows first to = «outFlows.first().to»
		«IF outFlows.first().to.eContainer.metaType.isAssignableFrom( model::scopes::Session )»
			set_session("«safeName(outFlows.first().to)-»", «EXPAND setPropertyToValueInflowTarget FOR inFlows.first().from-»);
		«ELSE»
			«EXPAND setPropertyToValueOutflowTarget FOR outFlows.first().to» = «EXPAND setPropertyToValueInflowTarget FOR inFlows.first().from-»;
		«ENDIF»
		
		«REM»
			now we expand all the event triggers for the source element that contains the fieldValue: 
			if any of them have an eventTrigger, they should be called if necessary
		«ENDREM»
		«EXPAND EventTrigger::expandEventTriggersInline FOR outFlows.first().to.eContainer-»
	«ELSE»
		«REM»an existing function on this page«ENDREM»
		«ERROR "Unknown client-side function to expand: " + this»
	«ENDIF»
«ENDDEFINE»

/* expand the definition of an operation, assumed to be called as part of an existing function call */
«DEFINE expandOperationContents FOR model::operations::DecisionOperation-»
	«REM»compare operations«ENDREM»
	if (
	«IF name == "equal?"-»
		«REM»check all inflow targets are identical«ENDREM»
		is_array_equal(new Array(«EXPAND expandCheckInflows FOREACH inFlows SEPARATOR ", "»))
	«ELSE»
		«REM»??? who knows«ENDREM»
		«ERROR "Unknown decision operation '" + this + "'"»
	«ENDIF»
	) {
		// passed (exactly one pass)
		«EXPAND doExecutionFlowNext FOR passedExectionFlow().to»
	} else {
		// failed (exactly one fail)
		«EXPAND doExecutionFlowNext FOR failedExectionFlow().to»
	}
«ENDDEFINE»

/* data flows out */
«DEFINE setPropertyToValueOutflowTarget FOR model::DataFlowEdgeDestination»
	«ERROR "unknown data flow edge destination for setPropertyToValue: " + this»
«ENDDEFINE»

«DEFINE setPropertyToValueOutflowTarget FOR model::ApplicationElementProperty»	
	document.getElementById('«safeName(( (model::NamedElement) eContainer).id)»').value
«ENDDEFINE»

/* data flows in */
«DEFINE setPropertyToValueInflowTarget FOR model::DataFlowEdgesSource»
	«ERROR "unknown data flow edge source for setPropertyToValue: " + this»
«ENDDEFINE»

«DEFINE setPropertyToValueInflowTarget FOR model::Parameter»
	«safeName()»
«ENDDEFINE»

«DEFINE expandCheckInflows FOR model::DataFlowEdge-»
	«EXPAND expandCheckInflowsName FOR from-»
«ENDDEFINE»

/** get the data for the elements we are checking */
«DEFINE expandCheckInflowsName FOR model::DataFlowEdgesSource-»
	«ERROR "Unknown data inflow source " + this»
«ENDDEFINE»

«DEFINE expandCheckInflowsName FOR model::Parameter-»
	«safeName()-»
«ENDDEFINE»

«DEFINE expandCheckInflowsName FOR model::ApplicationElementProperty-»
	«IF eContainer.metaType.isAssignableFrom( model::scopes::Session )»
		/* a property from our session */
		require_session("«safeName()-»")
	«ELSE»
		get_application_property("«safeName()-»")
	«ENDIF»
«ENDDEFINE»

«DEFINE expandCheckInflowsName FOR model::StaticValue-»
	"«value-»"
«ENDDEFINE»

/** fail edges */
«DEFINE expandFailEdge FOR model::WireEdge-»
	«ERROR "Cannot expand the fail edge '" + this + "'"»
«ENDDEFINE»

«DEFINE expandFailEdge FOR model::wires::NavigateWire-»
	// we need to navigate to the fail page
	var url = "«safeName(to)».php?fail=" + e; /* TODO urlencode me */
	debug("Redirecting to '" + url + "'");
	document.location.href = url;
«ENDDEFINE»
