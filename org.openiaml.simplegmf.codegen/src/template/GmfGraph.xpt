«IMPORT simplegmf»
«IMPORT ecore»

«EXTENSION metamodel::SimpleGMFExtensions»

/**
 * Generates the .gmfgraph
 */
«DEFINE generateGmfGraph FOR simplegmf::GMFConfiguration»
	«FILE toString(id) + ".gmfgraph"-»
<?xml version="1.0" encoding="UTF-8"?>
<gmfgraph:Canvas xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:gmfgraph="http://www.eclipse.org/gmf/2006/GraphicalDefinition" name="model">
  <figures
      name="Default">
    <figures
        xsi:type="gmfgraph:PolylineDecoration"
        name="MyArrowDecorator"/>
	«counterReset("descriptors")»
	«EXPAND generateGmfGraphPackage(this) FOR rootElement.ePackage»
  </figures>
	
«EXPAND generateAllLabelReferences»
</gmfgraph:Canvas>
	«ENDFILE»
«ENDDEFINE»

«DEFINE generateGmfGraphPackage(simplegmf::GMFConfiguration root) FOR ecore::EPackage»
	<!-- package «name» «nsPrefix» «nsURI» -->
	«EXPAND generateGmfGraphClass(root) FOREACH 
		eClassifiers.typeSelect(ecore::EClass).select(c|!toBoolean(c.abstract) && !toBoolean(c.interface))
		.reject(c|root.edgeTypes.exists(edge|toBoolean(edge.isSuperTypeOf(c))))»
	
	«EXPAND generateGmfGraphPackage(root) FOREACH eSubpackages»
«ENDDEFINE»

«DEFINE generateGmfGraphClass(simplegmf::GMFConfiguration root) FOR ecore::EClass»
	«LET deriveFigureConfiguration(root, this) AS fc»
    <descriptors
        name="«name»Figure">
      <actualFigure
«IF getShapeType(root, this) == "RECTANGLE"»
          xsi:type="gmfgraph:Rectangle"
«ELSEIF getShapeType(root, this) == "ELLIPSE"»
          xsi:type="gmfgraph:Ellipse"
«ELSE»
	«throwException("Unknown shape for classifier " + this + ": " + fc.shape.toString())»
«ENDIF»
          name="«name»Figure">
«LET fc.properties.toSet().addAll(defaultFigureConfiguration(root).properties) AS allProperties»
	«FOREACH allProperties AS p»
	<!-- «p.metaType.name»: «p» -->
	«ENDFOREACH»
	«IF !allProperties.typeSelect(simplegmf::FlowLayout).isEmpty»
	«FOREACH {allProperties.typeSelect(simplegmf::FlowLayout).first()} AS p»
		«IF toBoolean(p.flowLayout)»
        <layout
            xsi:type="gmfgraph:FlowLayout"
            vertical="true"/>
		«ENDIF»
	«ENDFOREACH»
	«ENDIF»
	
	«IF !allProperties.typeSelect(simplegmf::ForegroundColor).isEmpty»
	«FOREACH {allProperties.typeSelect(simplegmf::ForegroundColor).first()} AS p»
        <foregroundColor
        	«EXPAND toColor FOR toString(p.color)»
		/>
	«ENDFOREACH»
	«ENDIF»	
	
	«IF !allProperties.typeSelect(simplegmf::BackgroundColor).isEmpty»
	«FOREACH {allProperties.typeSelect(simplegmf::BackgroundColor).first()} AS p»
        <backgroundColor
        	«EXPAND toColor FOR toString(p.color)»
		/>
	«ENDFOREACH»
	«ENDIF»	
	
	«IF !allProperties.typeSelect(simplegmf::FigureMargin).isEmpty»
	«FOREACH {allProperties.typeSelect(simplegmf::FigureMargin).first()} AS p»
        <border
            xsi:type="gmfgraph:MarginBorder">
          <insets
              top="«p.margin»"
              left="«p.margin»"
              bottom="«p.margin»"
              right="«p.margin»"/>
        </border>
	«ENDFOREACH»
	«ENDIF»	
	
«ENDLET»

«LET root.labelConfigurations.select(lc |
	(lc.classifiers.isEmpty && lc.feature == null) || /* no classifiers or features set */
	(!lc.classifiers.select(c | c.isSuperTypeOf(this)).isEmpty && ( /* matching classifiers */
		lc.feature == null || /* no feature to match */
		eAllStructuralFeatures.contains(lc.feature)) /* matching a feature */
	))
	AS labels»
	«FOREACH labels AS label»
	    <children
	        xsi:type="gmfgraph:Label"
	        name="«name»«label.name»Figure"
	        text="«label.prefix»«IF label.specialLabel.toString() == "CONTAINMENT_NAME"»&lt;containment>«ELSEIF label.specialLabel.toString() == "METACLASS_NAME"»«name»«ELSE»&lt;...>«ENDIF»«label.suffix»">
			«FOREACH label.properties.typeSelect(simplegmf::ForegroundColor) AS p»
		        <foregroundColor
		        	«EXPAND toColor FOR toString(p.color)»
				/>
			«ENDFOREACH»
			«IF !label.properties.typeSelect(simplegmf::LabelBold).isEmpty»
	          <font
	              xsi:type="gmfgraph:BasicFont"
	              style="BOLD"/>
	        «ENDIF»
	    </children>
	«ENDFOREACH»

	</actualFigure>
	«counterReset("labels")»
	«FOREACH labels AS label»
	    <accessors
	        figure="//@figures.0/@descriptors.«counterGet("descriptors")»/@actualFigure/@children.«counterGet("labels")»"/>

		«REM»save this label for <labels> later«ENDREM»
		«labelSave(
			toString(name) + "Figure", /* figure name */ 
			toString(name) + toString(label.name) + "Figure", /* label name */
			"//@figures.0/@descriptors." + counterGet("descriptors") + "/@accessors." + counterGet("labels"), /* href */
			labels.first() == label ? true : false /* element icon */)» 

	  «counterIncrement("labels")»
	«ENDFOREACH»
«ENDLET»
		
    </descriptors>
    «counterIncrement("descriptors")»
	«ENDLET»
«ENDDEFINE»

«DEFINE toColor FOR String»
	«IF toString().startsWith("(")»
		«LET toString() AS rgb»
		«LET rgb.subString(1,rgb.length-1).split(",") AS rgb2»
	    xsi:type="gmfgraph:RGBColor"
	    red="«rgb2.get(0)»"
	    green="«rgb2.get(1)»"
	    blue="«rgb2.get(2)»"
		«ENDLET»
		«ENDLET»
	«ELSE»
	    xsi:type="gmfgraph:ConstantColor"
	    value="«this»"
	«ENDIF»
«ENDDEFINE»

«DEFINE generateAllLabelReferences FOR simplegmf::GMFConfiguration»
«FOREACH savedLabelList() AS i»
  <labels
      name="«savedLabelName(i)»"
      figure="«savedLabelFigureName(i)»"
      accessor="«savedLabelHref(i)»"
      elementIcon="«IF savedLabelElementIcon(i)»true«ELSE»false«ENDIF»"/>
«ENDFOREACH»
«ENDDEFINE»

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540  
 */
«DEFINE exception FOR Object»
«ENDDEFINE»
