«IMPORT iaml»

/**
 * If we are in Javascript and we are trying to get an operation on a DomainObjectInstance (usually 'exists?') 
 * and we are in a condition, we can't wait for an async result. In this case, we use
 * cached operation results (stored in Javascript) which can be updated through
 * callbacks, etc.
 *
 * All of this file is assumed to be in Javascript mode.
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE updateClientCache FOR model::InternetApplication»
	<?php
	/**
	 * Whenever we can execute callbacks on the client, this function should be called
	 * in order to find out which cached values need to be changed.
	 * Returns back a list of instructions (strings).
	 * This should <em>not</em> be called if the client cannot actually update the
	 * cached values, as the server will update the cached values as well.
	 */
	function get_necessary_update_callbacks() {
		$result = array();
		
		«EXPAND updateCachedPrimitiveOperations FOREACH getClientSideCacheOperations()»
		«EXPAND updateCachedPrimitiveConditions FOREACH getClientSideCacheConditions()»
		«EXPAND updateCachedProperties FOREACH getClientSideCacheProperties()»
			
		return implode("\n", $result);
	}
	
	function echo_necessary_update_callbacks() {
		$result = get_necessary_update_callbacks();
		if ($result) {
			echo "\n" . $result;
		}
	}
	
	?>
«ENDDEFINE»

«DEFINE updateCachedPrimitiveOperations FOR model::Operation»
	«throwException("Cannot expand client-side cached operation '" + this + "'")»
«ENDDEFINE»

«DEFINE updateCachedPrimitiveOperations FOR model::PrimitiveOperation»
	«LET ((model::DomainObjectInstance) eContainer) AS object»
		
		{
			// primitive operation '«name»'
			$new_value = «EXPAND template::domain::DomainInstance::domainInstanceCall(true, null, object) FOR this»;
			$old_value = $_SESSION["cached_result_«safeName()»_value"];
			if ($new_value != $old_value) {
				// cache needs to be updated
				$new_value = $new_value ? "true" : "false";		// force to boolean
				log_message("Updating cache value [server] 'cached_result_«safeName()»_value' from '$old_value' to '$new_value'");
				$result[] = "call_operation update_cached_result_«safeName()» " . escape_parameter_string($new_value);
				$_SESSION["cached_result_«safeName()»_value"] = $new_value;
			}		
		}
		
	«ENDLET»
«ENDDEFINE»

«DEFINE updateCachedPrimitiveConditions FOR model::Condition»
	«throwException("Cannot expand client-side cached operation '" + this + "'")»
«ENDDEFINE»

«DEFINE updateCachedPrimitiveConditions FOR model::PrimitiveCondition»
	«LET ((model::DomainObjectInstance) eContainer) AS object»
		
		{
			// primitive condition '«name»'
			$new_value = «EXPAND template::domain::DomainInstance::domainInstanceCondition(true, object) FOR this»;
			$old_value = $_SESSION["cached_result_«safeName()»_value"];
			if ($new_value != $old_value) {
				// cache needs to be updated
				$new_value = $new_value ? "true" : "false";		// force to boolean
				log_message("Updating cache value [server] 'cached_result_«safeName()»_value' from '$old_value' to '$new_value'");
				$result[] = "call_operation update_cached_result_«safeName()» " . escape_parameter_string($new_value);
				$_SESSION["cached_result_«safeName()»_value"] = $new_value;
			}		
		}
		
	«ENDLET»
«ENDDEFINE»

/**
 * Cached properties can be stored anywhere.
 */
«DEFINE updateCachedProperties FOR model::Property»
	{
		// property '«name»'
		$new_value = «EXPAND template::operations::Parameters::callParameterValue(true, false) FOR this»; 
		$old_value = isset($_SESSION["cached_property_«safeName()»_value"]) ? $_SESSION["cached_property_«safeName()»_value"] : null;
		if ($new_value != $old_value) {
			// cache needs to be updated
			log_message("Updating cache value [server] 'cached_property_«safeName()»_value' from '$old_value' to '$new_value'");
			$result[] = "call_operation update_instance_property_«safeName()» " . escape_parameter_string($new_value);
			$_SESSION["cached_property_«safeName()»_value"] = $new_value;
		}
	}
«ENDDEFINE»
