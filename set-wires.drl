#created on: 4/11/2008
package org.openiaml.model.drools.rules.set_wires

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.domain.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Set wires between objects should create set wires between all elements inside each object that matches [set]"
	when
		# source : SetWire(, eval(functions.connectsSet(source, p1, p2)) )
		source : SetWire( overriddenNames not contains "set" )
		p1 : CanBeSynced( )
		p2 : CanBeSynced( )
		eval( p1 != p2 )
		eval(functions.connectsSet(source, p1, p2))
		
		e1 : CanBeSynced( eContainer == p1 )
		e2 : CanBeSynced( eContainer == p2, eval(functions.nameMatches(e1, e2)) )
	
		not (sw : SetWire( eContainer == source, eval(functions.connectsSet( sw, e1, e2)) ))
				
		eval ( handler.veto( source ))
		
	then
		SetWire sw = handler.generatedSetWire(source, source, e1, e2);
		handler.setName(sw, "set");
		handler.setExecuteOnInput(sw, source.isExecuteOnInput());
		queue.add(sw, drools);
		
end

rule "Set wires from DomainSchema to CanBeSynced"
	when
		# source : SyncWire(, eval(connects(source, p1, p2)) )
		source : SetWire( overriddenNames not contains "set" )
		
		# we put in these to prevent multiple wires being generated for two connects
		domainSource : DomainSource ( )
		p2 : CanBeSynced ( )
		eval ( functions.connectsSet( source, domainSource, p2 ))

		eval ( domainSource != p2)
		
		domainSchema : DomainSchema ( )
		schemaEdge : SchemaEdge ( )
		eval ( functions.connectsSchema( schemaEdge, domainSource, domainSchema ))
		
		e1 : CanBeSynced ( eContainer == domainSchema )
		e2 : CanBeSynced( eContainer == p2 )

		eval(functions.nameMatches(e1, e2))
	
		not (sw : SetWire( eContainer == source, eval(functions.connectsSet( sw, e1, e2)) ))
		
		eval ( handler.veto( source ))
						
	then
		SyncWire sw = handler.generatedSyncWire(source, source, e1, e2);
		handler.setName(sw, "set");
		handler.setExecuteOnInput(sw, source.isExecuteOnInput());
		queue.add(sw, drools);
		
end

rule "Run instance wire from edit to update (onChange)"
	when
		sw : SetWire( overriddenNames not contains "run" )
		source : Changeable( )
		target : ContainsOperations( )
		eval(functions.connectsSet(sw, source, target))
		
		event : EventTrigger( source.onChange == event ) 
		operation : Operation( eContainer == target, name=="update" )
		
		not (ActionEdge( eContainer == sw, from == event, to == operation ))
				
		eval ( handler.veto( sw ))
		
	then
		ActionEdge rw = handler.generatedActionEdge(sw, sw, event, operation);
		handler.setName(rw, "run");
		queue.add(rw, drools);

end

/**
 * Solves issue 209: Allow Properties to be set directly by SetWires or SyncWires.
 *
 * @inference Changeable,SetWire
 *		A {@model SetWire} connecting a {@model Changeable} to a {@model Property}
 *		directly will update the target {@model Property} when the
 *		source element is {@model Changeable#onChange changed}.
 */
rule "Run instance wire from edit to Property update (onChange)"
	when
		sw : SetWire( overriddenNames not contains "run" )
		source : Changeable( )
		
		targetContainer : ContainsOperations ( )
		target : Property ( eContainer == targetContainer )
		eval(functions.connectsSet(sw, source, target))
		
		event : EventTrigger( source.onChange == event ) 
		operation : Operation( eContainer == targetContainer, 
			name != null, 
			eval( ("set property " + target.getName()).equals(operation.getName()) ) )
		
		not (ActionEdge( eContainer == sw, from == event, to == operation ))
				
		eval ( handler.veto( sw ))
		
	then
		ActionEdge rw = handler.generatedActionEdge(sw, sw, event, operation);
		handler.setName(rw, "run");
		queue.add(rw, drools);

end

rule "Run instance wire from edit to update, instant SetWire (onInput)"
	when
		sw : SetWire( executeOnInput == true, overriddenNames not contains "run" ) 
		source : InputTextField( )
		target : ContainsOperations( )
		eval(functions.connectsSet(sw, source, target))
		
		event : EventTrigger( source.onInput == event ) 
		operation : Operation( eContainer == target, name=="update" )
		
		not (ActionEdge( eContainer == sw, from == event, to == operation, name == "run" ))
				
		eval ( handler.veto( sw ))
		
	then
		ActionEdge rw = handler.generatedActionEdge(sw, sw, event, operation);
		handler.setName(rw, "run");
		queue.add(rw, drools);

end

# Ideally, these two commands would be joined together into one
rule "Connect parameter wire to: run instance wire from source.edit to target.update [set]"
	when
		sw : SetWire( overriddenNames not contains "[set] run instance parameter (source.edit)" )
		source : CanBeSynced( )
		target : CanBeSynced( )
		eval(functions.connectsSet(sw, source, target))
	
		event : EventTrigger( eContainer == source, name=="edit" )
		operation : Operation( eContainer == target, name=="update" )
		field : Property( source.fieldValue == field )
		wire : ActionEdge( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
				
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[set] run instance parameter (source.edit)"); 
		queue.add(pw, drools);

end

rule "Connect parameter wire to: run instance wire from source.edit to target.update [set] (onChange)"
	when
		sw : SetWire( overriddenNames not contains "[set] run instance parameter (source.edit)" )
		source : Changeable( )
		target : CanBeSynced( )
		eval(functions.connectsSet(sw, source, target))
	
		event : EventTrigger( source.onChange == event ) 
		operation : Operation( eContainer == target, name=="update" )
		field : Property( source.fieldValue == field )
		wire : ActionEdge( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[set] run instance parameter (source.edit)"); 
		queue.add(pw, drools);

end

rule "Connect parameter wire to: Run instance wire from edit to Property update (onChange)"
	when
		sw : SetWire( overriddenNames not contains "[set] run instance parameter (source.edit)" )
		source : Changeable( )
		
		targetContainer : ContainsOperations ( )
		target : Property ( eContainer == targetContainer )
		eval(functions.connectsSet(sw, source, target))
		
		event : EventTrigger( source.onChange == event ) 
		operation : Operation( eContainer == targetContainer, 
			name != null, 
			eval( ("set property " + target.getName()).equals(operation.getName()) ) )

		field : Property( source.fieldValue == field )
		wire : ActionEdge( from == event, to == operation, name == "run", eContainer == sw )
				
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
				
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[set] run instance parameter (source.edit)"); 
		queue.add(pw, drools);


end

rule "Connect parameter wire to: run instance wire from source.edit to target.update [set], instant SetWire (onInput)"
	when
		sw : SetWire( overriddenNames not contains "[set] run instance parameter, instant SetWire (source.edit)" )
		source : InputTextField( )
		target : CanBeSynced( )
		eval(functions.connectsSet(sw, source, target))
	
		event : EventTrigger( source.onInput == event ) 
		operation : Operation( eContainer == target, name=="update" )
		field : Property( source.currentInput == field )
		wire : ActionEdge( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[set] run instance parameter, instant SetWire (source.edit)"); 
		queue.add(pw, drools);

end

# Ideally, these two commands would be joined together into one
rule "Run instance wire from target.access to target.init, when we have a value to provide as a parameter [set] (onAccess)"
	when
		sw : SetWire( overriddenNames not contains "run" )
		source : ContainsOperations( )
		target : Accessible( )
		eval(functions.connectsSet(sw, source, target))
		
		event : EventTrigger( target.onAccess == event )
		operation : Operation( eContainer == target, name=="init" )
		field : Property( source.fieldValue == field )
		
		not (ActionEdge( eContainer == sw, from == event, to == operation, name == "run" ))
						
		eval ( handler.veto( sw ))
		
	then
		ActionEdge rw = handler.generatedActionEdge(sw, sw, event, operation);
		handler.setName(rw, "run");
		queue.add(rw, drools);

end

rule "Run instance wire from target.access to target.init, adding ConditionEdge to check it is set [set] (onAccess)"
	when
		sw : SetWire()
		source : ContainsOperations( )
		target : Accessible( )
		eval(functions.connectsSet(sw, source, target))
		
		event : EventTrigger( target.onAccess == event )
		operation : Operation( eContainer == target, name=="init" )
		field : Property( source.fieldValue == field )
		
		run : ActionEdge( eContainer == sw, from == event, to == operation, name == "run" )
		param : ParameterEdge( from == field, to == run )
		
		# condition check
		condition : Condition ( eContainer == source, name == "fieldValue is set" )
		
		not ( ConditionEdge ( from == condition, to == run ))
					
		eval ( handler.veto( sw ))
	
	then
		ConditionEdge cw = handler.generatedConditionEdge(sw, sw, condition, run);
		queue.add(cw, drools);
		
end	

# Ideally, these two commands would be joined together into one
rule "Connect parameter wire to: run instance wire from target.access to target.init [set]"
	when
		sw : SetWire( overriddenNames not contains "[sync] run instance parameter (source.access)" )
		source : CanBeSynced( )
		target : CanBeSynced( )
		eval(functions.connectsSet(sw, source, target))
	
		event : EventTrigger( eContainer == target, name=="access" )
		operation : Operation( eContainer == target, name=="init" )
		field : Property( source.fieldValue == field )
		wire : ActionEdge( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[sync] run instance parameter (source.access)"); 
		queue.add(pw, drools);

end

rule "Connect parameter wire to: run instance wire from target.access to target.init [set] (onAccess)"
	when
		sw : SetWire( overriddenNames not contains "[set] run instance parameter (source.access)" )
		source : CanBeSynced( )
		target : Accessible( )
		eval(functions.connectsSet(sw, source, target))
	
		event : EventTrigger( target.onAccess == event ) 
		operation : Operation( eContainer == target, name=="init" )
		field : Property( source.fieldValue == field )
		wire : ActionEdge( from == event, to == operation, name == "run", eContainer == sw )
		
		not (ParameterEdge( eContainer == sw, from == field, to == wire )) 
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw = handler.generatedParameterEdge(sw, sw, field, wire); 
		handler.setName(pw, "[set] run instance parameter (source.access)"); 
		queue.add(pw, drools);

end

/**
 * I think that chained SetWires are generally impossible. Consider:
 * 
 *   page1 <--> page2 <--> unrelated
 *   condition on both SetWires, matching (page1, page2)
 * 
 * If we allow for chaining, then the condition 
 *   condition[page2, unrelated]
 * will be copied onto
 *   condition[page1, page2]
 * which means the SetWires will never satisfy all its conditions.
 *
 * --
 *
 * I think that chained SetWires are only possible *when* each
 * SetWires has identical Conditions, so we don't have to combine
 * the two conditions together into something impossible.
 *
 * However, trying to implement this did nothing. I think it is because
 * without adding more information to the model, you cannot chain.
 * The information you'd be adding is stuff like ChainedSetWire, but
 * this defeats the purpose of having it in the model, because this should
 * be handled by the code generation instead.
 */

rule "Cascaded SetWires: Conditions from parent to child [set]"
	when

		# the containing elements	
		sw : SetWire (  )
		source : CanBeSynced( )
		target : CanBeSynced( )
		eval(functions.connectsSet(sw, source, target))
		
		# the elements contained
		e1 : CanBeSynced( eContainer == source )
		e2 : CanBeSynced( eContainer == target, eval(functions.nameMatches(e1, e2)) )
		esw : SetWire( name == "set", eval(functions.connectsSet(esw, e1, e2)) )
		
		# there is a condition on the containing sync wire
		condition : Condition ( )
		cw : ConditionEdge( from == condition, to == sw )

		# and there isn't one on the element sync wire
		not (ecw : ConditionEdge( from == condition, to == esw )) 
						
		eval ( handler.veto( cw ))
		
	then
		ConditionEdge ecw = handler.generatedConditionEdge( cw, sw, condition, esw );
		handler.setName(ecw, "[copied] from: " + cw.getId());
		queue.add(ecw, drools);

end

rule "Cascaded SetWires: Parameters from parent to child [set]"
	when

		# the containing elements
		sw : SetWire (  )
		source : CanBeSynced( )
		target : CanBeSynced( )
		eval(functions.connectsSet(sw, source, target))
		
		# the elements contained
		e1 : CanBeSynced( eContainer == source )
		e2 : CanBeSynced( eContainer == target, eval(functions.nameMatches(e1, e2)) )
		esw : SetWire( name == "set", eval(functions.connectsSet(esw, e1, e2)) )
		
		# there is a condition on the containing sync wire
		condition : Condition ( )
		cw : ConditionEdge( from == condition, to == sw )
		
		# the generated condition wire
		ecw : ConditionEdge( from == condition, to == esw )
		
		# there is a parameter on the condition wire
		parameter : ParameterEdgesSource( )
		pw : ParameterEdge( from == parameter, to == cw )

		# and there isn't one on the element sync wire
		not (epw : ParameterEdge( from == parameter, to == ecw )) 
						
		eval ( handler.veto( cw ))
		
	then
		# create it
		ParameterEdge epw = handler.generatedParameterEdge( cw, sw, parameter, ecw );
		handler.setName(epw, "[copied] from: " + pw.getId());
		queue.add(epw, drools);

end

# SetWires do not connect the fields together; they can _also_
# connect the Frames together.
rule "Connect Session.init to incoming SetWires (contained in Frames) [set] (onChange 2)"
	when
		session : Session (  )
		sw : SetWire(  )
		sourceFrame : VisibleThing( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connectsSet(sw, sourceFrame, targetFrame ))

		sw2 : SetWire ( eContainer == sw, overriddenNames not contains "run" )
		sourceElement : Changeable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connectsSet(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event ) 
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : ActionEdge( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )
		
		not (ActionEdge( eContainer == sw2, from == inite, to == operation, name == "run" ))
						
		eval ( handler.veto( sw2 ))
		
	then
		ActionEdge rw2 = handler.generatedActionEdge(sw2, sw2, inite, operation);
		handler.setName(rw2, "run");
		queue.add(rw2, drools);
		
end

rule "Connect Session.init to incoming SetWires (contained in Frames) [set] (onChange 3)"
	when
		session : Session (  )
		sw : SetWire(  )
		sourceFrame : Frame( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connectsSet(sw, sourceFrame, targetFrame ))

		sw2 : SetWire ( eContainer == sw, overriddenNames not contains "run" )
		sourceElement : Changeable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connectsSet(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event ) 
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : ActionEdge( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )
		
		not (ActionEdge( eContainer == sw2, from == inite, to == operation, name == "run" ))
						
		eval ( handler.veto( sw2 ))
		
	then
		ActionEdge rw2 = handler.generatedActionEdge(sw2, sw2, inite, operation);
		handler.setName(rw2, "run");
		queue.add(rw2, drools);
		
end

rule "Connect parameter for Session.init to incoming SetWires (contained in Frames) [set] (onChange 2)"
	when
		session : Session (  )
		sw : SetWire(  )
		sourceFrame : VisibleThing( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connectsSet(sw, sourceFrame, targetFrame ))

		sw2 : SetWire ( eContainer == sw)
		sourceElement : Changeable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connectsSet(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event )
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : ActionEdge( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )

		initrw : ActionEdge( eContainer == sw2, from == inite, to == operation, name == "run" )
		
		field : Property( sourceElement.fieldValue == field )
		pw : ParameterEdge( eContainer == sw2, from == field, to == rw ) 

		not( ParameterEdge( eContainer == sw2, from == field, to == initrw ))  
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw2 = handler.generatedParameterEdge(sw, sw, field, initrw);
		queue.add(pw2, drools);		
end

rule "Connect parameter for Session.init to incoming SetWires (contained in Frames) [set] (onChange 3)"
	when
		session : Session (  )
		sw : SetWire(  )
		sourceFrame : Frame( eval(!functions.containingSessionEquals(sourceFrame, session)) )  
		targetFrame : ContainsOperations( eval(functions.containingSessionEquals(targetFrame, session)) )
		eval( functions.connectsSet(sw, sourceFrame, targetFrame ))

		sw2 : SetWire ( eContainer == sw)
		sourceElement : Changeable( eContainer == sourceFrame )
		targetElement : ContainsOperations( eContainer == targetFrame )
		eval( functions.connectsSet(sw2, sourceElement, targetElement ))

		event : EventTrigger( sourceElement.onChange == event )
		operation : Operation( eContainer == targetElement, name == "update" )

		rw : ActionEdge( eContainer == sw2, from == event, to == operation, name == "run" )
		inite : EventTrigger (eContainer == session, session.onInit == inite )

		initrw : ActionEdge( eContainer == sw2, from == inite, to == operation, name == "run" )
		
		field : Property( sourceElement.fieldValue == field )
		pw : ParameterEdge( eContainer == sw2, from == field, to == rw ) 

		not( ParameterEdge( eContainer == sw2, from == field, to == initrw ))  
						
		eval ( handler.veto( sw ))
		
	then
		ParameterEdge pw2 = handler.generatedParameterEdge(sw, sw, field, initrw);
		queue.add(pw2, drools);		
end

rule "Refresh New Instance Object mappings (except for generated primary keys) when Form sets an Instance: create text fields"
	when
		sync : SetWire(  )
		form : InputForm (  )
		instance : DomainIterator (  )
		
		eval(functions.connectsSet(sync, form, instance))
		
		originalAttribute : DomainAttribute ( primaryKey == false || isGenerated == false )
		attribute : DomainAttributeInstance( eContainer == instance )
		ExtendsEdge ( from == attribute, to == originalAttribute )
		
		not ( tf : InputTextField( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )
		
		eval ( !form.getOverriddenNames().contains(attribute.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		InputTextField text = handler.generatedInputTextField(sync, form);
		handler.setName(text, attribute.getName());
		queue.add(text, drools);

end

rule "Refresh Domain Object mappings (except for generated primary keys) when Form sets an Instance: create text fields"
	when
		sync : SetWire(  )
		form : InputForm (  )
		object : DomainSchema (  )
		
		eval(functions.connectsSet(sync, form, object))
		
		attribute : DomainAttribute( eContainer == object, primaryKey == false || isGenerated == false )
		
		not ( tf : InputTextField( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )

		eval ( !form.getOverriddenNames().contains(attribute.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		InputTextField text = handler.generatedInputTextField(sync, form);
		handler.setName(text, attribute.getName());
		queue.add(text, drools);

end

/**
 * @inference InputForm,SetWire
 *		When two {@model InputForm}s are connected by a {@model SetWire} and the
 *		source {@model InputForm} contains a {@model InputTextField}, a <em>{@model Label}</em>
 *		with the same name is created in the target {@model InputForm}.
 */
rule "Refresh mappings between InputForms connected to InputForms containing InputTextFields"
	when
		sync : SetWire(  )
		source : InputForm (  )
		target : InputForm (  )
		
		eval(functions.connectsSet(sync, source, target))
		
		sf : InputTextField ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )
		
		eval ( !target.getOverriddenNames().contains(sf.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label tf = handler.generatedLabel(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end

/**
 * @inference InputForm,SetWire
 *		When two {@model InputForm}s are connected by a {@model SetWire} and the
 *		source {@model InputForm} contains a {@model Label}, another label
 *		with the same name is created in the target {@model InputForm}.
 */
rule "Refresh mappings between InputForms connected to InputForms containing Labels"
	when
		sync : SetWire(  )
		source : InputForm (  )
		target : InputForm (  )
		
		eval(functions.connectsSet(sync, source, target))
		
		sf : Label ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )
						
		eval ( !target.getOverriddenNames().contains(sf.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label tf = handler.generatedLabel(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end

/**
 * @inference InputForm,SetWire
 *		When an {@model InputForm} is connected by a {@model SetWire} to an
 *		{@model Email}, all contained {@model InputTextField}s in the form will
 *		be copied to the Email as {@model Label}s.
 */
rule "Refresh mappings between InputForms connected to Emails containing InputTextFields"
	when
		sync : SetWire(  )
		source : InputForm (  )
		target : Email (  )
		
		eval(functions.connectsSet(sync, source, target))
		
		sf : InputTextField ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )

		eval ( !target.getOverriddenNames().contains(sf.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label tf = handler.generatedLabel(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end

/**
 * @inference InputForm,SetWire
 *		When an {@model InputForm} is connected by a {@model SetWire} to an
 *		{@model Email}, all contained {@model Label}s in the form will
 *		be copied to the Email as {@model Label}s.
 */
rule "Refresh mappings between InputForms connected to Emails containing Labels"
	when
		sync : SetWire(  )
		source : InputForm (  )
		target : Email (  )
		
		eval(functions.connectsSet(sync, source, target))
		
		sf : Label ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )

		eval ( !target.getOverriddenNames().contains(sf.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label tf = handler.generatedLabel(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end

/**
 * @inference InputForm,SetWire
 *		When an {@model InputForm} is connected by a {@model SetWire} to a
 *		{@model Map}, all contained {@model InputTextField}s in the form will
 *		be copied to the Email as {@model MapPoint}s.
 */
rule "Refresh mappings between InputForms connected to Maps containing InputTextFields"
	when
		sync : SetWire(  )
		source : InputForm (  )
		target : Map (  )
		
		eval(functions.connectsSet(sync, source, target))
		
		sf : InputTextField ( eContainer == source )
		not ( tf : VisibleThing ( eContainer == target, eval(functions.nameMatches( sf, tf ))) )

		eval ( !target.getOverriddenNames().contains(sf.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		MapPoint tf = handler.generatedMapPoint(sync, target);
		handler.setName(tf, sf.getName());
		queue.add(tf, drools);

end


/**
 * <strong>Depending on the orientation of a SetWire</strong>,
 * SyncWires create InputTextFields; SetWires should create Labels, because they cannot
 * be edited.
 *
 * @inference SetWire,Label
 *		When a {@model DomainIterator} is connected to a {@model InputForm} by a {@model SetWire},
 *		{@model Label}s will be generated for its non-generated, non-primary key attributes.
 */
rule "Refresh New Instance Object mappings (except for generated primary keys) when Instance sets a Form: create labels"
	when
		sync : SetWire(  )
		form : InputForm (  )
		instance : DomainIterator (  )
		
		eval(functions.connectsSet(sync, instance, form))	// backwards
		
		originalAttribute : DomainAttribute ( primaryKey == false || isGenerated == false )
		attribute : DomainAttributeInstance( eContainer == instance )
		ExtendsEdge ( from == attribute, to == originalAttribute )
		
		not ( tf : VisibleThing( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )

		eval ( !form.getOverriddenNames().contains(attribute.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label text = handler.generatedLabel(sync, form);
		handler.setName(text, attribute.getName());
		handler.setType(text, attribute.getType());
		queue.add(text, drools);

end

# TODO is this rule even used anymore? consider removing.
rule "Refresh Domain Object mappings (except for generated primary keys) when Instance sets a Form: create labels"
	when
		sync : SetWire(  )
		form : InputForm (  )
		object : DomainSchema (  )
		
		eval(functions.connectsSet(sync, object, form))		// backwards
		
		attribute : DomainAttribute( eContainer == object, primaryKey == false || isGenerated == false )
		
		not ( tf : VisibleThing( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )

		eval ( !form.getOverriddenNames().contains(attribute.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label text = handler.generatedLabel(sync, form);
		handler.setName(text, attribute.getName());
		handler.setType(text, attribute.getType());
		queue.add(text, drools);

end

rule "Refresh Domain Object mappings (except for generated primary keys) when Instance sets a IteratorList: create labels"
	when
		sync : SetWire(  )
		form : IteratorList (  )
		instance : DomainIterator (  )
		
		eval(functions.connectsSet(sync, instance, form))	// backwards
		
		originalAttribute : DomainAttribute ( primaryKey == false || isGenerated == false )
		attribute : DomainAttributeInstance( eContainer == instance )
		ExtendsEdge ( from == attribute, to == originalAttribute )
		
		not ( tf : VisibleThing( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )

		eval ( !form.getOverriddenNames().contains(attribute.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new one
		Label text = handler.generatedLabel(sync, form);
		handler.setName(text, attribute.getName());
		handler.setType(text, attribute.getType());
		queue.add(text, drools);

end

rule "Refresh Domain Object mappings (primary keys) when Instance sets a IteratorList: create hiddens"
	when
		sync : SetWire(  )
		form : IteratorList (  )
		instance : DomainIterator (  )
		
		eval(functions.connectsSet(sync, instance, form))	// backwards
		
		// only generated primary keys
		originalAttribute : DomainAttribute ( primaryKey == true )
		attribute : DomainAttributeInstance( eContainer == instance )
		ExtendsEdge ( from == attribute, to == originalAttribute )
		
		not ( tf : VisibleThing( eContainer == form, eval(functions.nameMatches( attribute, tf )) ) )

		eval ( !form.getOverriddenNames().contains(attribute.getName()) )
						
		eval ( handler.veto( sync ))
		
	then
		# create a new Hidden
		Hidden text = handler.generatedHidden(sync, form);
		handler.setName(text, attribute.getName());
		handler.setType(text, attribute.getType());
		queue.add(text, drools);

end

rule "A SetWire between Attributes passed to a DomainIterator need to check that the attribute exists before initialising (onAccess)"
	when
		sync : SetWire( )
		form : VisibleThing ( )		# InputForm, IteratorList
		instance : DomainIterator ( )
		
		# form -> Iterator
		eval(functions.connectsSet(sync, form, instance))
		
		# the instance is created through a NewInstanceWire
		schema : DomainSchema ( )
		domainSource : DomainSource ( )
		schemaEdge : SchemaEdge ( )
		eval ( functions.connectsSchema( schemaEdge, domainSource, schema ))
		
		selectEdge : SelectEdge ( )
		eval ( functions.connectsSelect( selectEdge, instance, domainSource ))		
		
		# contained attribute/field
		attribute : DomainAttributeInstance( eContainer == instance )
		tf : Label ( eContainer == form )
		sync2 : SetWire ( overriddenNames not contains "check new instance exists" )
		
		# Label -> attribute
		eval(functions.connectsSet(sync2, tf, attribute))
		
		# text field access/init events
		access : EventTrigger ( tf.onAccess == access ) 
		initOp : Operation ( eContainer == tf, name == "init" )
		run : ActionEdge ( from == access, to == initOp )
		
		attributeValue : Property ( attribute.fieldValue == attributeValue )
		
		param : ParameterEdge ( from == attributeValue, to == run )  
		
		# 'not empty' condition in the instance
		existsCondition : Condition ( eContainer == instance, name == "not empty" )
		
		# but not connected		
		not (ConditionEdge ( from == existsCondition, to == run ))
						
		eval ( handler.veto( sync2 ))
		
	then
		# connect it
		ConditionEdge cw = handler.generatedConditionEdge(sync2, sync2, existsCondition, run);
		handler.setName(cw, "check new instance exists");
		queue.add(cw, drools);

end

rule "A SetWire between Attributes selected from a DomainIterator need to check that the attribute exists before initialising (onChange)"
	when
		sync : SetWire( )
		form : VisibleThing ( )		# InputForm, IteratorList
		instance : DomainIterator ( )
		
		# Iterator -> Form
		eval(functions.connectsSet(sync, instance, form))
		
		# the instance is created through a NewInstanceWire
		schema : DomainSchema ( )
		domainSource : DomainSource ( )
		schemaEdge : SchemaEdge ( )
		eval ( functions.connectsSchema( schemaEdge, domainSource, schema ))
		
		selectEdge : SelectEdge ( )
		eval ( functions.connectsSelect( selectEdge, instance, domainSource ))		
		
		# contained attribute/field
		attribute : DomainAttributeInstance( eContainer == instance )
		tf : Label ( eContainer == form )
		sync2 : SetWire ( overriddenNames not contains "check new instance exists" )
		
		# Attribute -> Label
		eval(functions.connectsSet(sync2, attribute, tf))
		
		# text field access/init events
		onChange : EventTrigger ( attribute.onChange == onChange ) 
		initOp : Operation ( eContainer == tf, name == "update" )
		run : ActionEdge ( from == onChange, to == initOp )
		
		attributeValue : Property ( attribute.fieldValue == attributeValue )
		
		param : ParameterEdge ( from == attributeValue, to == run )  
		
		# 'not empty' condition in the instance
		existsCondition : Condition ( eContainer == instance, name == "not empty" )
		
		# but not connected		
		not (ConditionEdge ( from == existsCondition, to == run ))
						
		eval ( handler.veto( sync2 ))
		
	then
		# connect it
		ConditionEdge cw = handler.generatedConditionEdge(sync2, sync2, existsCondition, run);
		handler.setName(cw, "check new instance exists");
		queue.add(cw, drools);

end


