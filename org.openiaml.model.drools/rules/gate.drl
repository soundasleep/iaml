#created on: 4/11/2008
package org.openiaml.model.drools.rules.gate

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.model.model.users.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Create 'Continue' button for Frames connected with 'first' or 'last' NavigateAction"
	when
		gate : Gate ( )
		target : Frame ( )
		nav : NavigateAction ( from == gate, to == target, name == "first" || name == "last" )
		not (Button ( eContainer == target, name == "Continue" ))
		not (NavigateAction ( to == gate ))
		
		eval ( handler.veto( gate ))
	
	then
		Button button = handler.generatedButton(gate, target);
		handler.setName(button, "Continue");
		queue.add(button, drools);

end

rule "Connect 'click' on 'Continue' button to resume Gate"
	when
		gate : Gate ( )
		target : Frame ( )
		nav : NavigateAction ( from == gate, to == target, name == "first" || name == "last" ) 
		button : Button ( eContainer == target, name == "Continue" )
		
		click : EventTrigger ( button.onClick == click, eContainer == button )
		
		not (NavigateAction ( from == click, to == gate ))
		
		eval ( handler.veto( gate ))
	
	then
		NavigateAction wire = handler.generatedNavigateAction(gate, target, click, gate);
		handler.setName(wire, "resume");
		queue.add(wire, drools);

end

rule "Create '(gate) flag' property when Gate is connected by 'first' or 'last'"
	when
		session : Scope ( )
		gate : Gate ( eContainer == session )
		
		wire : NavigateAction ( from == gate, name == "first" || name == "last" )
		
		not (Property ( eContainer == session, eval( name.equals(gate.getName() + " flag")) ))
		
		eval ( handler.veto( gate ))
	
	then
		Property prop = handler.generatedProperty(gate, session);
		handler.setName(prop, gate.getName() + " flag");
		handler.setValue(prop, ModelPackage.eINSTANCE.getProperty_DefaultValue(), "false");
		queue.add(prop, drools);
	
end

rule "Create 'set flag' operation for Frames connected with 'first' or 'last' NavigateAction"
	when
		gate : Gate ( )
		target : Frame ( )
		nav : NavigateAction ( from == gate, to == target, name == "first" || name == "last" )
		button : Button ( eContainer == target, name == "Continue" )
		
		not (CompositeOperation ( eContainer == target, name == "Set gate flag" ))
			
		eval ( handler.veto( gate ))
		
	then
		CompositeOperation op = handler.generatedCompositeOperation(gate, target);
		handler.setName(op, "Set gate flag");
		queue.add(op, drools);

end

rule "Connect 'access' event with 'set flag' operation"
	when
		gate : Gate ( )
		target : Frame ( )
		nav : NavigateAction ( from == gate, to == target, name == "first" || name == "last" )
		button : Button ( eContainer == target, name == "Continue" )
		op : CompositeOperation ( eContainer == target, name == "Set gate flag" )
		access : EventTrigger ( eContainer == target, target.onAccess == access )
		
		not (RunAction ( from == access, to == op ))
			
		eval ( handler.veto( gate ))
		
	then
		RunAction run = handler.generatedRunAction(gate, target, access, op);
		handler.setName(run, "run");
		queue.add(run, drools);

end

rule "Create contents of 'set flag' operation"
	when
		session : Scope ( )
		gate : Gate ( eContainer == session )
		target : Frame ( )
		nav : NavigateAction ( from == gate, to == target, name == "first" || name == "last" )
		button : Button ( eContainer == target, name == "Continue" )
		property : Property ( eContainer == session, eval( name.equals(gate.getName() + " flag")) )
		
		op : CompositeOperation ( eContainer == target, name == "Set gate flag" )
		
		not (StartNode ( eContainer == op ))
			
		eval ( handler.veto( gate ))
		
	then
		StartNode start = handler.generatedStartNode(gate, op);
		FinishNode finish = handler.generatedFinishNode(gate, op);
		PrimitiveOperation set = handler.generatedPrimitiveOperation(gate, op);
		handler.setName(set, "set");
		StaticValue value = handler.generatedStaticValue(gate, op);
		handler.setName(value, "true");
		handler.setValue(value, "true");
		
		queue.add(start, drools);
		queue.add(finish, drools);
		queue.add(set, drools);
		
		ExecutionEdge e1 = handler.generatedExecutionEdge(gate, op, start, set);
		ExecutionEdge e2 = handler.generatedExecutionEdge(gate, op, set, finish);
		DataFlowEdge d1 = handler.generatedDataFlowEdge(gate, op, value, set);
		DataFlowEdge d2 = handler.generatedDataFlowEdge(gate, op, set, property);
		
		queue.add(e1, drools);
		queue.add(e2, drools);
		queue.add(d1, drools);
		queue.add(d2, drools);

end

rule "Create condition 'check (gate)'"
	when
		session : Scope ( )
		gate : Gate ( eContainer == session )
		wire : NavigateAction ( from == gate, name == "first" || name == "last" )
		
		not ( Condition ( eContainer == session, eval( name.equals("check " + gate.getName())) ))
		
		eval ( handler.veto( gate ))
	
	then
		CompositeCondition cond = handler.generatedCompositeCondition(gate, session);
		handler.setName(cond, "check " + gate.getName());
		queue.add(cond, drools);

end

rule "Connect condition 'check (gate)' with gate"
	when
		session : Scope ( )
		gate : Gate ( eContainer == session )
		wire : NavigateAction ( from == gate, name == "first" || name == "last" )
		
		cond : Condition ( eContainer == session, eval( name.equals("check " + gate.getName())) )
		
		not ( ConditionEdge ( from == cond, to == gate ))
		
		eval ( handler.veto( gate ))
	
	then
		ConditionEdge cw = handler.generatedConditionEdge(gate, session, cond, gate);
		handler.setName(cw, "condition");
		queue.add(cw, drools);

end

rule "Create contents of 'check (gate)' condition"
	when
		session : Scope ( )
		gate : Gate ( eContainer == session )
		wire : NavigateAction ( from == gate, name == "first" || name == "last" )
		property : Property ( eContainer == session, eval( name.equals(gate.getName() + " flag")) )
		
		cond : CompositeCondition ( eContainer == session, eval( name.equals("check " + gate.getName())) )
		cw : ConditionEdge ( from == cond, to == gate )
		
		not ( StartNode ( eContainer == cond ))
		
		eval ( handler.veto( gate ))
	
	then
		StartNode start = handler.generatedStartNode(gate, cond);
		FinishNode finish = handler.generatedFinishNode(gate, cond);
		CancelNode cancel = handler.generatedCancelNode(gate, cond);
		DecisionNode cmp = handler.generatedDecisionNode(gate, cond);
		handler.setName(cmp, "true?");
		
		queue.add(start, drools);
		queue.add(finish, drools);
		queue.add(cancel, drools);
		queue.add(cmp, drools);
		
		ExecutionEdge e1 = handler.generatedExecutionEdge(gate, cond, start, cmp);
		ExecutionEdge e2 = handler.generatedExecutionEdge(gate, cond, cmp, finish);
		handler.setName(e2, "y");
		ExecutionEdge e3 = handler.generatedExecutionEdge(gate, cond, cmp, cancel);
		handler.setName(e3, "n");
		DataFlowEdge d1 = handler.generatedDataFlowEdge(gate, cond, property, cmp);
		
		queue.add(e1, drools);
		queue.add(e2, drools);
		queue.add(e3, drools);
		queue.add(d1, drools);

end

