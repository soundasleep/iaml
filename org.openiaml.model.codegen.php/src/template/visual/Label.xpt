«IMPORT iaml»

/**
 * Visually rendering a label.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * @implementation Label
 *   The value of {@model Property} 'fieldValue' of a {@model Label}
 *   overrides the value of the Label.defaultValue attribute.
 */
«DEFINE renderLabel(model::visual::Frame currentFrame) FOR model::visual::Label-»
	<label
		id="«safeNameString(id)-»" 
		«EXPAND EventHandlers::getInlineClickJavascript(currentFrame)»
		«REM»has it been hidden by anything?«ENDREM»
		<?php
		/* has this label been hidden by anything? */
		if (
		«IF containingSession() != null»
			(require_session("«safeName(containingSession())»_«safeName()»_hidden", null) !== null)
			&& require_session("«safeName(containingSession())»_«safeName()»_hidden") 
		«ELSE»
			(get_application_value("«safeName()»_hidden", null) !== null)
			&& get_application_value("«safeName()»_hidden") 
		«ENDIF»
		) {
			echo 'style="display: none;"';
		}
		?>
		> 

	<?php $label_set = false; ?>

	«REM»
		an initial value?
		TODO we could have multiple default values; right now we are relying on
		browser behaviour to place this value as lower priority. we should work
		out some way to select it programatically.
	«ENDREM»

	«REM»selected in _reverse order_ to InputTextField, which abused HTML to allow
		another value to override a previously selected value«ENDREM»

	«REM»Label.property[fieldValue] overrides Label.defaultValue«ENDREM»
	«EXPAND staticInitialValue(currentFrame) FOREACH properties.select( e | e.name == "fieldValue")»			

	«IF defaultValue != null && defaultValue.length > 0»
		<?php 
		// default value
		if (!$label_set) { ?>
			«escapeHtmlString(defaultValue)»
			<?php $label_set = true; 
		} 
		?>
	«ENDIF»
	
	«EXPAND getInitialValuesSyncWire(currentFrame) FOREACH outWires.typeSelect(model::wires::SyncWire)» 			 
	«EXPAND getInitialValuesSyncWire(currentFrame) FOREACH inWires.typeSelect(model::wires::SyncWire)» 
	«EXPAND getInitialValuesSetWire(currentFrame) FOREACH inWires.typeSelect(model::wires::SetWire)» 			 
	</label>
	
	«EXPAND EventHandlers::getScriptClickDefinition(currentFrame)»
	
	<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			«REM»any on-access events?«ENDREM»
			addOnloadFunction( function() {
			«IF onAccess != null»
				// expand all onAccess
				«EXPAND template::events::EventCall::callEvent(false, currentFrame) FOR onAccess-»
			«ENDIF»
			} );
		/* ]]> */
	</script> 
«ENDDEFINE»


/* if it connects to a SyncWire that is an Property, use this
   property as the value */
«DEFINE getInitialValuesSyncWire(model::visual::Frame currentFrame) FOR model::wires::SyncWire»
	«EXPAND staticInitialValue(currentFrame) FOR from»
	«EXPAND staticInitialValue(currentFrame) FOR to»
«ENDDEFINE»

/* if it connects to a SetWire that is an Property, use this
   property as the value */
«DEFINE getInitialValuesSetWire(model::visual::Frame currentFrame) FOR model::wires::SetWire»
	«EXPAND staticInitialValue(currentFrame) FOR from»
«ENDDEFINE»

/* ignore these sources */
«DEFINE staticInitialValue(model::visual::Frame currentFrame) FOR model::WireSource»
«ENDDEFINE»
«DEFINE staticInitialValue(model::visual::Frame currentFrame) FOR model::WireDestination»
«ENDDEFINE»

/* we have a property to provide [in PHP] */
«DEFINE staticInitialValue(model::visual::Frame currentFrame) FOR model::Property»
	«IF containingSession(this) == null»
		«REM»contained in a Frame or InternetApplication: a static value«ENDREM»
		<?php
		if (get_application_value("«safeNameString(id)»", null) !== null) {
			$value = get_application_value("«safeNameString(id)»", "«escapeString(defaultValue)»");
			if (!$label_set) {
				echo htmlspecialchars($value);
				$label_set = true;
			}
		}		
		?>
	«ELSE»
		«REM»contained in a Session: a session value«ENDREM»
		<?php
		if (has_session("«safeName(containingSession(this))»_«safeNameString(id)»")) {
			$value = require_session("«safeName(containingSession(this))»_«safeNameString(id)»", "«escapeString(defaultValue)»");
			if (!$label_set) {
				echo htmlspecialchars($value);
				$label_set = true;
			}
		}		
		?>
	«ENDIF»
«ENDDEFINE»

«DEFINE staticInitialValue(model::visual::Frame currentFrame) FOR model::DomainAttributeInstance»
	«REM»from a domain attribute instance.«ENDREM»
	<?php
	«REM»if (has_attribute_instance_«safeName()»()) {«ENDREM»
		$value = get_attribute_instance_«safeName()»();
		if (!$label_set) {
			echo htmlspecialchars($value);
			$label_set = true;
		}
	«REM»}«ENDREM»		
	?>
«ENDDEFINE»

«DEFINE staticInitialValue(model::visual::Frame currentFrame) FOR model::QueryParameter»
	«REM»from the query«ENDREM»
	<?php
	$value = «EXPAND template::operations::Parameters::callParameterValue(true, false, currentFrame)»;
	if (!$label_set) {
		echo htmlspecialchars($value);
		$label_set = true;
	}		
	?>
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
