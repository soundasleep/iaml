«IMPORT iaml»

/**
 * Visually rendering an IteratorList, which navigates over the connected
 * DomainIterator to populate all results. Normally rendered as a table,
 * but probably can also be rendered as a normal list.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Rendering of IteratorLists.
 */
«DEFINE renderIteratorList(model::visual::Frame currentFrame) FOR model::visual::IteratorList-»
	<?php
	/* has the list been populated yet? */
	/* ALWAYS populate the list when rendering from HTML */
	populate_iterator_list_«safeName()»();

	?>
	<table id="«safeName()-»"
		class="list_«safeNameString(name)»"
		«REM»has it been hidden by anything?«ENDREM»
		<?php
		/* has this label been hidden by anything? */
		if (
		«IF containingSession() != null»
			(require_session("«safeName(containingSession())»_«safeName()»_hidden", null) !== null)
			&& require_session("«safeName(containingSession())»_«safeName()»_hidden") 
		«ELSE»
			(get_application_value("«safeName()»_hidden", null) !== null)
			&& get_application_value("«safeName()»_hidden", false) 
		«ENDIF»
		) {
			echo 'style="display: none;"';
		}
		?>
		>
		<!-- print out the list of columns -->
		<thead>
		«FOREACH children AS child»
			<th id="«safeNameString(child.id)»_heading" class="list_heading_«safeNameString(child.name)»">«escapeString(child.name)»</th>
		«ENDFOREACH»
		</thead>
	
		<!-- the first child has the first ID -->
		<tbody>
	<?php
	«EXPAND publishIteratorList(currentFrame, true)»
	?>
		</tbody>
	</table>
«ENDDEFINE»

/**
 * Assumed to be in PHP mode.
 *
 * @param as_html output the contents as HTML; otherwise, callbacks
 */
«DEFINE publishIteratorList(model::visual::Frame currentFrame, Boolean as_html) FOR model::visual::IteratorList»
if (defined('ITERATOR_LIST_«safeName()»_UPDATED')) {
	
	$limit = 
	«IF containingSession() != null»
		require_session("«safeName(containingSession())»_«safeName()»_limit", 0)
	«ELSE»
		get_application_value("«safeName()»_limit", 0)
	«ENDIF»
	;
	// expand the contents for each children, up to the limit of 
	// the iterator; some of these won't be set
	$iterator_«safeName()» = 0;

	// a hack to prevent the function from being created multiple times
	// should be refactored into a singleton, or likewise
	if (!function_exists('get_list_iterator_index_«safeName()»')) {
		function get_list_iterator_index_«safeName()»() {
			global $iterator_«safeName()»;
			return $iterator_«safeName()»;
		}
	}
	for ($iterator_«safeName()» = 0; $iterator_«safeName()» < $limit; $iterator_«safeName()»++) {
		
		// load the 'current' index
		$count = $iterator_«safeName()»;
		«FOREACH children AS child»
			«IF containingSession(child) != null»
				$_SESSION["«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»"] = 
					require_session("«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»:$count", "");
			«ELSE»
				set_application_value("«safeNameString(child.fieldValue.id)»",
					get_application_value("«safeNameString(child.fieldValue.id)»:$count", "")); 
			«ENDIF»
		«ENDFOREACH»
		
		// if the result set is empty, don't crash when we try and populate the contained label
		$check_attribute_instances = true;
		
		// also, don't execute any onLoad()s if the database is empty
		$skip_contained_onloads = («IF containingSession() != null»
				require_session("«safeName(containingSession())»_«safeName()»_count", -1)
			«ELSE»
				get_application_value("«safeName()»_count", -1)
			«ENDIF») <= 0;
			
		«IF as_html»
			«EXPAND publishIteratorListAsHTML(currentFrame)»
		«ELSE»
			«EXPAND publishIteratorListAsCallbacks(currentFrame)»
		«ENDIF»
		
		// store the 'current' index
		$count = $iterator_«safeName()»;
		«FOREACH children AS child»
			«IF containingSession(child) != null»
				$_SESSION["«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»:$count"] = 
					require_session("«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»", "");
			«ELSE»
				set_application_value("«safeNameString(child.fieldValue.id)»:$count",
					get_application_value("«safeNameString(child.fieldValue.id)»", "")); 
			«ENDIF»
		«ENDFOREACH»
					
		// unload the 'current' index
		«FOREACH children AS child»
			«IF containingSession(child) != null»
				$_SESSION["«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»"] = null; 
			«ELSE»
				set_application_value("«safeNameString(child.fieldValue.id)»", null);
			«ENDIF»
		«ENDFOREACH»
	}
}
«ENDDEFINE»

/**
 * Assumed to be in PHP mode, but breaking out into HTML mode.
 */
«DEFINE publishIteratorListAsHTML(model::visual::Frame currentFrame) FOR model::visual::IteratorList»
	// if the result set is empty, don't crash when we try and populate the contained label
	$check_attribute_instances = true;
	
	// also, don't execute any onLoad()s if the database is empty
	$skip_contained_onloads = («IF containingSession() != null»
			require_session("«safeName(containingSession())»_«safeName()»_count", -1)
		«ELSE»
			get_application_value("«safeName()»_count", -1)
		«ENDIF») <= 0;
	?>
	«REM»expand all children«ENDREM»
	<tr>
		«FOREACH children AS child»
		<td class="«safeNameString(child.id)»" class="list_item_«safeNameString(child.name)»">
			«EXPAND Render::renderVisual(currentFrame) FOR child»
		</td>
		«ENDFOREACH»
	</tr>
	<?php
	$check_attribute_instances = false;
	$skip_contained_onloads = false;
«ENDDEFINE»

/**
 * Assumed to be in PHP mode, but printing out JS callbacks.
 */
«DEFINE publishIteratorListAsCallbacks(model::visual::Frame currentFrame) FOR model::visual::IteratorList»
	«EXPAND template::php::callbacks::UpdateFrameProperties::outgoingEmailValue FOREACH children.fieldValue»
«ENDDEFINE»

/**
 * Defines an include file for all IteratorLists and related functionality.
 */
«DEFINE iteratorListDefinitions FOR model::InternetApplication»
	<?php
		«EXPAND template::Template::phpCheck»
		
		«FOREACH eAllContents.typeSelect(model::visual::Frame) AS currentFrame»
			// frame '«escapeString(currentFrame.name)»'
			«EXPAND populateIteratorListDefinition(currentFrame) FOREACH eAllContents.typeSelect(model::visual::IteratorList).select(a|containingFrame(a) == currentFrame)»
		«ENDFOREACH»
«ENDDEFINE»

«DEFINE populateIteratorListDefinition(model::visual::Frame currentFrame) FOR model::visual::IteratorList-»
/**
 * Has the list been populated yet? If not, populate it.
 */
function possibly_populate_iterator_list_«safeName()»() {
	if (!
	«IF containingSession() != null»
		require_session("«safeName(containingSession())»_«safeName()»_initialised", 0)
	«ELSE»
		get_application_value("«safeName()»_initialised", 0)
	«ENDIF»
	) {
		populate_iterator_list_«safeName()»();
	} else {
		// have the arguments for the source iterator changed?
		«IF inWires.from.typeSelect(model::domain::DomainIterator).isEmpty»
			«throwException("No incoming DomainIterator for IteratorList: " + this)»
		«ENDIF»
		«LET inWires.from.typeSelect(model::domain::DomainIterator).first() AS iterator»
			$iterator = DomainIterator_«safeName(iterator)»::getInstance();
			
			if ($iterator->contentsHaveChanged()) {
				// we need to reload
				populate_iterator_list_«safeName()»();
			}
		«ENDLET»
	}
}

/**
 * If the given iterator list has been populated, reset it, so it must
 * be repopulated again.
 */
function reset_populated_iterator_list_«safeName()»() {
	«IF containingSession() != null»
		unset($_SESSION["«safeName(containingSession())»_«safeName()»_initialised"]);
	«ELSE»
		set_application_value("«safeName()»_initialised", 0);
	«ENDIF»
}

/**
 * Force repopulate the iterator list '«escapeString(name)»'.
 */
function populate_iterator_list_«safeName()»() {
	log_message("[iterator list] populating initial iterator list «safeName()»");
	define('ITERATOR_LIST_«safeName()»_UPDATED', true);

	// find the incoming iterator
	«IF inWires.from.typeSelect(model::domain::DomainIterator).isEmpty»
		«throwException("No incoming DomainIterator for IteratorList: " + this)»
	«ENDIF»
	«LET inWires.from.typeSelect(model::domain::DomainIterator).first() AS iterator»
		$iterator = DomainIterator_«safeName(iterator)»::getInstance();
		 
		// reset all the stored label values
		«IF containingSession() != null»
			$_SESSION["«safeName(containingSession())»_«safeName()»_limit"] = $iterator->getLimit();
			$_SESSION["«safeName(containingSession())»_«safeName()»_count"] = $iterator->count();
		«ELSE»
			set_application_value("«safeName()»_limit", $iterator->getLimit());
			set_application_value("«safeName()»_count", $iterator->count());
		«ENDIF»
		
		for ($count = 0; $count < $iterator->getLimit(); $count++) {
			«FOREACH children AS child»
				// TODO should really be null, not the empty string
				«IF containingSession(child) != null»
					$_SESSION["«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»:$count"] = "";
				«ELSE»
					set_application_value("«safeNameString(child.fieldValue.id)»:$count", ""); 
				«ENDIF»
			«ENDFOREACH»
		}
			 
		if (!$iterator->isEmpty()) {
			$iterator->reset();

			$count = 0;
			while (true) {
				// for each attribute, call onChange; this will update
				// all contained label values
				«FOREACH iterator.attributes AS attribute»
					«IF attribute.onChange != null»
						«EXPAND template::events::EventCall::callEvent(true) FOR attribute.onChange»
					«ENDIF» 
				«ENDFOREACH»
				
				// store all the children values
				«FOREACH children AS child»
					«IF containingSession(child) != null»
						$_SESSION["«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»:$count"] = 
							require_session("«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»", -1);
					«ELSE»
						set_application_value("«safeNameString(child.fieldValue.id)»:$count",
							get_application_value("«safeNameString(child.fieldValue.id)»", -1)); 
					«ENDIF»
				«ENDFOREACH»
				
				if (!$iterator->hasNext())
					break;
					
		 		$iterator->next();
		 		$count++;
			};
			
			// finally, reset
			$iterator->reset();
		}
		
		// remove the 'current' label values
		«FOREACH children AS child»
			«IF containingSession(child) != null»
				$_SESSION["«safeName(containingSession(child))»_«safeNameString(child.fieldValue.id)»"] = null; 
			«ELSE»
				set_application_value("«safeNameString(child.fieldValue.id)»", null);
			«ENDIF»
		«ENDFOREACH»
	«ENDLET» 

	// it has now been initialised
	«IF containingSession() != null»
		$_SESSION["«safeName(containingSession())»_«safeName()»_initialised"] = 1;
	«ELSE»
		set_application_value("«safeName()»_initialised", 1);
	«ENDIF»
}
«ENDDEFINE»