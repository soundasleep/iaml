@@dc:creator=jevon wright
@@dc:date=09/10/2008
import org.openiaml.model.model.*;
import org.openiaml.model.model.visual.*;
ref ApplicationElement another
var InputForm input_form
var Page page
ref InternetApplication app
ref ApplicationElementContainer aec
// for InternetApplication
@take.compilerhint.class=InternetApplication_Children
@take.compilerhint.method=getAppChildren
query app_children[in,out]
// for ApplicationElementContainer
@take.compilerhint.class=ApplicationElementContainer_Children
@take.compilerhint.method=getElementChildren
query element_children[in,out]
@take.compilerhint.class=InternetApplication_Name
@take.compilerhint.slots=app,string
@take.compilerhint.method=getAppNames
// query app_name[in,out]
@take.compilerhint.class=NamedElement_Name
@take.compilerhint.slots=element,string
@take.compilerhint.method=getElementNames
// query element_name[element,string]
// this is the query that should exist for our example model
query input_form_name[form,string]
@take.compilerhint.class=GeneratedAppChildren
@take.compilerhint.slots=app,element
query generated_app_children[in,out]
// query impossible[element]
rule1: if app_name[app, 'test'] then rule_2[app]
rule1_generated: if generated_app_name[app, 'test'] then rule_2[app]
rule2: if rule_2[app] then rule2_a[app, page] and rule2_b[page, 'generated'] and rule2_c[page, input_form] and rule2_d[input_form, 'generated form']
rule2_a: if rule2_a[app, page] then generated_or_app_children[app, page]
// decomposition of OR into a separate rule
generated_or_app_children_1: if app_children[app, page] then generated_or_app_children[app, page]
generated_or_app_children_2: if generated_app_children[app, page] then generated_or_app_children[app, page]
rule2_b: if rule2_b[page, 'generated'] then generated_or_page_name[page, 'generated']
// decomposition of or
generated_or_page_name_1: if page_name[page, 'generated'] then generated_or_page_name[page, 'generated']
generated_or_page_name_2: if generated_page_name[page, 'generated'] then generated_or_page_name[page, 'generated']
rule2_c: if rule2_c[page, input_form] then generated_or_element_children[page, input_form]
// decomposition of or
generated_or_element_children_1: if element_children[page, input_form] then generated_or_element_children[page, input_form]
generated_or_element_children_2: if generated_element_children[page, input_form] then generated_or_element_children[page, input_form]
rule2_d: if rule2_d[input_form, 'generated form'] then generated_or_input_form_name[input_form, 'generated form']
// decomposition of or
generated_or_input_form_name_1: if input_form_name[input_form, 'generated form'] then generated_or_input_form_name[input_form, 'generated form']
generated_or_input_form_name_2: if generated_input_form_name[input_form, 'generated form'] then generated_or_input_form_name[input_form, 'generated form']
// decomposition of complicated rule complete 
external factsPage_Name: page_name[Page, java.lang.String]
external factsInputForm_Name: input_form_name[InputForm, java.lang.String]
external factsInternetApplication_Children: app_children[InternetApplication, ApplicationElement]
external factsApplicationElementContainer_Children: element_children[ApplicationElementContainer, ApplicationElement]
external factsInternetApplication_Name: app_name[InternetApplication, java.lang.String]
//
//
//
//
//
//
// old testing rules
// var String X
// ruleNamed1: if page_element_name[page, X] then element_name[page, X]
// ruleNamed2: if form_element_name[input_form, X] then element_name[input_form, X]
//
//
//
//
// original take example 
// var example.nz.org.take.compiler.example1.Customer customer
// ref example.nz.org.take.compiler.example1.Discount goldCustomerDiscount
// @take.compilerhint.class=CustomerDiscount
// @take.compilerhint.slots=customer,discount
// @take.compilerhint.method=getDiscount
// query discount[in,out]
// rules
// rule1: if category[customer,'gold'] then discount[customer,goldCustomerDiscount] 
// rule2: if 500<customer.turnover then category[customer,'gold']