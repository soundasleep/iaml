«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE updateAllFrameProperties FOR model::InternetApplication-»
/* Is there additional actions we should do on the client-side once this
 * property has changed? */
if (!require_get("ignore_updates", 0)) { 
	if (!isset($frame_id) || !$frame_id) {
		throw new IamlRuntimeException("Invalid frame ID: frame ID not set");
	}

	/**
	 * We cheat; we just iterate over ALL properties in the application.
	 * If the property is contained in a text field and on the current frame,
	 * then we specify the client to update it (we don't care if it hasn't
	 * changed). TODO this can probably do with a lot more optimisation!
	 */
	«REM»group by containingFrame: optimization«ENDREM»
	«FOREACH allProperties().collect(e|containingFrame(e)).toSet() AS frame»
	if ($frame_id == "«safeNameString(frame.id)-»") {
		«EXPAND outgoingEmailValue FOREACH allProperties(this).select(p|containingFrame(p)==frame && containingEmail(p) == null)»
		
		«EXPAND updateVisibility FOREACH eAllContents.typeSelect(model::VisibleThing).select(p|containingFrame(p)==frame && containingEmail(p) == null)»
	}
	«ENDFOREACH»
}
«ENDDEFINE»

«DEFINE outgoingEmailValue FOR model::Property»
	«IF model::visual::InputTextField.isInstance(eContainer)»
		/* container: InputTextField */
		if («EXPAND template::operations::Parameters::isSetParameter(true)») {
			// but only if it's actually set
			// get the current value
			$value = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
			
			// pass it to the client 
			log_message("outgoing value to '«eContainer»' («safeNameString(((model::visual::InputTextField) eContainer).id)»): '$value'");
			log_message("set_value " 
				. escape_parameter_string("«safeNameString(((model::visual::InputTextField) eContainer).id)»")
				. " "
				. escape_parameter_string($value));
			echo "\nset_value " 
				. escape_parameter_string("«safeNameString(((model::visual::InputTextField) eContainer).id)»")
				. " "
				. escape_parameter_string($value);
		}				
	«ENDIF»

	«IF model::visual::Label.isInstance(eContainer)»
	«LET (model::visual::Label) eContainer AS label» 
		/* container: Label */
		if («EXPAND template::operations::Parameters::isSetParameter(true)») {
			// but only if it's actually set
			// get the current value
			$value = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
			
			// pass it to the client 
			log_message("outgoing value to '«label»' («safeNameString(label.id)»"
				«IF label.eContainer != null && model::visual::IteratorList.isInstance(label.eContainer)»
					. (isset($doing_iterator_list_«safeName(label.eContainer)») && $doing_iterator_list_«safeName(label.eContainer)» ? «EXPAND template::visual::Label::getIteratorListIndex FOR label» : "")
				«ENDIF»
				. "): '$value'");
			log_message("set_html " 
				. escape_parameter_string("«safeNameString(label.id)»"«IF label.eContainer != null && model::visual::IteratorList.isInstance(label.eContainer)»
					. (isset($doing_iterator_list_«safeName(label.eContainer)») && $doing_iterator_list_«safeName(label.eContainer)» ? «EXPAND template::visual::Label::getIteratorListIndex FOR label» : "")
				«ENDIF»)
				. " "
				. escape_parameter_string($value));
			echo "\nset_html " 
				. escape_parameter_string("«safeNameString(label.id)»"«IF label.eContainer != null && model::visual::IteratorList.isInstance(label.eContainer)»
					. (isset($doing_iterator_list_«safeName(label.eContainer)») && $doing_iterator_list_«safeName(label.eContainer)» ? «EXPAND template::visual::Label::getIteratorListIndex FOR label» : "")
				«ENDIF»)
				. " "
				. escape_parameter_string($value);
		}
	«ENDLET»	
	«ENDIF»
	
	«IF model::visual::MapPoint.isInstance(eContainer)»
		/* container: MapPoint */
		if («EXPAND template::operations::Parameters::isSetParameter(true)») {
			// but only if it's actually set
			// get the current value
			$value = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
			
			// pass it to the client 
			log_message("outgoing value to '«eContainer»' («safeNameString(((model::visual::MapPoint) eContainer).id)»): '$value'");
			log_message("set_map_point " 
				. escape_parameter_string("«safeNameString(((model::visual::MapPoint) eContainer).id)»")
				. " "
				. escape_parameter_string($value));
			echo "\nset_map_point " 
				. escape_parameter_string("«safeNameString(((model::visual::MapPoint) eContainer).id)»")
				. " "
				. escape_parameter_string($value);
		}				
	«ENDIF»	

	«REM»Maps can be updated manually, but if the Map contains at least one MapPoint, this method may fail, since Maps only generate
	singleton MapPoints if they are empty of MapPoints at codegen time«ENDREM»
	«IF model::visual::Map.isInstance(eContainer)»
		«LET (model::visual::Map) eContainer AS map»
		«IF map.children.typeSelect(model::visual::MapPoint).isEmpty»
		/* container: Map */
		if («EXPAND template::operations::Parameters::isSetParameter(true)») {
			// but only if it's actually set
			// get the current value
			$value = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
			
			// pass it to the client 
			log_message("outgoing value to '«eContainer»' («safeNameString(((model::visual::Map) eContainer).id)»): '$value'");
			log_message("set_map_point " 
				. escape_parameter_string("map_«safeNameString(((model::visual::Map) eContainer).id)»")
				. " "
				. escape_parameter_string($value));
			echo "\nset_map_point " 
				. escape_parameter_string("map_«safeNameString(((model::visual::Map) eContainer).id)»")
				. " "
				. escape_parameter_string($value);
		}
		«ENDIF»		
		«ENDLET»
	«ENDIF»
	
	«IF model::visual::IteratorList.isInstance(eContainer)»
		/* container: IteratorList */
		$doing_iterator_list_«safeName(eContainer)» = true;
		«EXPAND template::visual::IteratorList::publishIteratorList(null, false) FOR (model::visual::IteratorList) eContainer»
		$doing_iterator_list_«safeName(eContainer)» = false;
	«ENDIF»
«ENDDEFINE»

«DEFINE updateVisibility FOR model::VisibleThing»
	{
		/* VisibleThing '«escapeString(name)»' */
	«IF containingSession() != null»
		$hidden = require_session("«safeName(containingSession())»_«safeName()»_hidden", 0);
	«ELSE»
		$hidden = get_application_value("«safeName()»_hidden", 0);
	«ENDIF»
		$value = make_into_boolean($hidden) ? "false" : "true";

		// pass it to the client 
		log_message("outgoing visibility value to («safeNameString(id)»): '$value'");
		log_message("set_visibility " 
			. escape_parameter_string("«safeNameString(id)»")
			. " "
			. escape_parameter_string($value));
		echo "\nset_visibility " 
			. escape_parameter_string("«safeNameString(id)»")
			. " "
			. escape_parameter_string($value);
	}
	
	«IF model::visual::IteratorList.isInstance(this)»
		«EXPAND updateVisibilityIteratorList FOR ((model::visual::IteratorList) this)»
	«ENDIF»
«ENDDEFINE»

«DEFINE updateVisibilityIteratorList FOR model::visual::IteratorList»
	{
		// notify the number of rows visible in the IteratorList
		$value = «EXPAND template::visual::IteratorList::iteratorListCurrentResultCount»;
		log_message("iterator_list_rows " 
			. escape_parameter_string("«safeNameString(id)»")
			. " "
			. escape_parameter_string($value));
		echo "\niterator_list_rows " 
			. escape_parameter_string("«safeNameString(id)»")
			. " "
			. escape_parameter_string($value); 
	}
«ENDDEFINE»
