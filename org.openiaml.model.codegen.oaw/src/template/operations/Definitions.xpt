«IMPORT iaml»

/**
 * Operation definitions.
 */
«EXTENSION template::GeneratorExtensions»

/* expand out the operations for the page */
/* this includes Page and Session */
«DEFINE operationDefinitions(Boolean php) FOR model::ContainsOperations-»
	«EXPAND operation(php) FOREACH operations-»
«ENDDEFINE»

«DEFINE operationDefinitions(Boolean php) FOR model::ApplicationElementContainer-»
	// expanding operations for «this»
	«EXPAND operation(php) FOREACH allContainerOperations()-»
«ENDDEFINE»

/* operation definitions */
«DEFINE operation(Boolean php) FOR model::Operation-»
	/* simple operation */
	function do_«safeName()»(«EXPAND Parameters::signatures(php) FOREACH parameters SEPARATOR ", "-») {
		log_message("simple operation: «name»");
	}
«ENDDEFINE»

«DEFINE operation(Boolean php) FOR model::CompositeOperation»
	/** composite operation "«name»" */
	$running_«safeName()» = false;
	function do_«safeName()»(«EXPAND Parameters::signatures(php) FOREACH parameters SEPARATOR ", "-») {
		«REM»here we would expand out the data flow of the operation, etc«ENDREM»
		// operation: «name»
		global $running_«safeName()-»;
		if ($running_«safeName()-» == false && !has_running_function("«safeName()-»")) {
			$running_«safeName()-» = true;		// prevent loops
			add_running_function("«safeName()-»");
			
			// has this operation got a fail handler?
			«IF getFailEdge() != null»
				// fail edge «getFailEdge()»
				try {
			«ENDIF»
			
			// temporary variables (if any)
			«EXPAND Variables::temporaryVariable(php) FOREACH variables.typeSelect(model::TemporaryVariable)»			
			
			// execute the operation
			«EXPAND ExecutionFlow::flow(php) FOR startNode()-»

			// continue chained operations
			«EXPAND ExecutionFlow::continueChainedOperations(php) FOR this»
			
			«IF getFailEdge() != null»
				} catch (IamlRuntimeException $e) {
					log_message("Caught exception $e");
					«EXPAND Failure::failWire(php) FOR getFailEdge()»
				}
			«ENDIF»
			
			$running_«safeName()-» = false;
			remove_running_function("«safeName()-»");
		}
	}
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
