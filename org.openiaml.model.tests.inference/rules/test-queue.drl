package org.openiaml.model.drools.rules.tests.test_queue

#list any import classes here.
import org.openiaml.model.drools.*;

import org.eclipse.emf.ecore.*;
import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.domain.*;

#declare any global variables here
global EcoreCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

rule "Create conflicting elements (a)"
	when
		a : InternetApplication ( )
		not ( ds : DomainStore ( eContainer == a ))
		
	then
		DomainStore ds = handler.generatedDomainStore( a, a );
		queue.add(ds, drools);
end

rule "Create conflicting elements (b)"
	when
		a : InternetApplication ( )
		not ( s : Session ( eContainer == a ))
		
	then
		Session s = handler.generatedSession( a, a );
		queue.add(s, drools);
end

# throw an exception if Session and DomainStore are added separately
rule "Check queue order (a)"
	when
		s : Session ( )
		not ( ds : DomainStore ( ))
	
	then
		throw new RuntimeException("The order of queued elements should not matter to Drools (a).");
		
end

# throw an exception if Session and DomainStore are added separately
rule "Check queue order (b)"
	when
		ds : DomainStore ( )
		not ( s : Session ( ))
	
	then
		throw new RuntimeException("The order of queued elements should not matter to Drools (b).");
		
end

# to make sure they are both made
rule "Check both elements are created successfully"
	when
		a : InternetApplication ( )
		ds : DomainStore ( eContainer == a )
		s : Session ( eContainer == a )
	
	then
		handler.setName(a, "created successfully");

end