/**
 * We want an easy way to refer to commands programatically.
 * This also allows us to remove the ".command" package export
 * requirement!
 *
 * It would be nice if this was in a separate class, but
 * I'm not sure how to make GMF do this yet.
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»
«EXTENSION xpt::diagram::Utils»

/**
 * Add our extensions in the "additions"
 */
«AROUND additions FOR gmfgen::GenDiagram-»
	«targetDef.proceed()»
	
	«REM»
		GMF 2.0.1 XXXCreateCommands extended CreateElementCommand; 
		GMF 2.2 XXXCreateCommands extend EditElementCommand. Not sure why.
		
		But this means we cannot execute the EditElementCommand get the
		created element; we have to use the original CreateElementRequest
		instead.
	«ENDREM»
	«EXPAND xpt::Common::generatedMemberComment»
	public static org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand 
			getCreateNodeCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest request, 
			org.eclipse.emf.ecore.EClass elementType) {
			
		if (elementType == null)
			return null;

			«EXPAND elementCreateNodeCommand FOREACH getAllTypedElements()-»
		
		return null;
	} 

	«EXPAND xpt::Common::generatedMemberComment»
	public static org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand 
			getCreateEdgeCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest request, 
			org.eclipse.emf.ecore.EClass elementType,
			org.eclipse.emf.ecore.EObject source,
			org.eclipse.emf.ecore.EObject target) {
			
		if (elementType == null)
			return null;

			«EXPAND elementCreateEdgeCommand FOREACH getAllTypedElements()-»
		
		return null;
	} 
	
	«EXPAND getElementReverse-»
«ENDAROUND»


// we have to expand it depending on what type it is
«DEFINE elementCreateNodeCommand FOR gmfgen::GenNode-»
	«EXPAND elementCreateNodeCommandType(self, getDiagram()) FOR elementType-»
«ENDDEFINE»

// other possible: gmfgen::GenLink, gmfgen::GenDiagram
// default element: blank
«DEFINE elementCreateNodeCommand FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE elementCreateNodeCommandType(gmfgen::GenNode node, gmfgen::GenDiagram diagram) FOR gmfgen::MetamodelType-»
	«IF null <> self-»
		if (elementType.equals(«EXPAND MetaModel::MetaClass FOR getMetaClass()»)) {
			return new «node.getCreateCommandQualifiedClassName()»(request);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE elementCreateNodeCommandType(gmfgen::GenNode node, gmfgen::GenDiagram diagram) FOR gmfgen::SpecializationType-»
	«IF null <> self-»
		if (elementType.equals(«EXPAND MetaModel::MetaClass FOR getMetamodelClass()»)) {
			return new «node.getCreateCommandQualifiedClassName()»(request);
		}
	«ENDIF-»
«ENDDEFINE»


// we have to expand it twice, depending on what type it is
«DEFINE elementCreateEdgeCommand FOR gmfgen::GenLink-»
	«EXPAND elementCreateEdgeCommandType(self, getDiagram()) FOR elementType-»
«ENDDEFINE»

// other possible: gmfgen::GenNode, gmfgen::GenDiagram
// default element: blank
«DEFINE elementCreateEdgeCommand FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE elementCreateEdgeCommandType(gmfgen::GenLink link, gmfgen::GenDiagram diagram) FOR gmfgen::MetamodelType-»
	«IF null <> self-»
		if (elementType.equals(«EXPAND MetaModel::MetaClass FOR getMetaClass()»)) {
			return new «link.getCreateCommandQualifiedClassName()»(request, source, target);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE elementCreateEdgeCommandType(gmfgen::GenLink link, gmfgen::GenDiagram diagram) FOR gmfgen::SpecializationType-»
	«IF null <> self-»
		if (elementType.equals(«EXPAND MetaModel::MetaClass FOR getMetamodelClass()»)) {
			return new «link.getCreateCommandQualifiedClassName()»(request, source, target);
		}
	«ENDIF-»
«ENDDEFINE»


/**
 * Copied from getElement() in ElementTypes.xpt
 */
«DEFINE getElementReverse FOR gmfgen::GenDiagram-»
	private static java.util.Map<org.eclipse.emf.ecore.EClass, org.eclipse.gmf.runtime.emf.type.core.IElementType> elementsReverse;

	«EXPAND xpt::Common::generatedMemberComment("Get the associated IElementType for this editor that renders a particular EClass in the model.")»
public static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(org.eclipse.emf.ecore.EClass hint) {
	if (elementsReverse == null) {
		elementsReverse = new java.util.IdentityHashMap<org.eclipse.emf.ecore.EClass, org.eclipse.gmf.runtime.emf.type.core.IElementType>();
		«EXPAND bindUniqueIdentifierToNamedElementReverse(getUniqueIdentifier()) FOR domainDiagramElement-»
		«FOREACH getAllNodes() AS node-»
			«EXPAND bindUniqueIdentifierToNamedElementReverse(node.getUniqueIdentifier()) FOR node.modelFacet-»
		«ENDFOREACH-»
		«FOREACH links->asSequence() AS link-»
			«EXPAND bindUniqueIdentifierToNamedElementReverse(link.getUniqueIdentifier()) FOR link.modelFacet-»
		«ENDFOREACH-»
	}
	return elementsReverse.get(hint);
}
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR genmodel::GenClass»
	elementsReverse.put(«EXPAND MetaModel::MetaClass», «id»);
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR gmfgen::ModelFacet»
	«ERROR 'Unsupported model facet: ' + self.repr()-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR gmfgen::TypeModelFacet»
	«EXPAND bindUniqueIdentifierToNamedElementReverse(id) FOR metaClass-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElementReverse(String id) FOR gmfgen::FeatureLinkModelFacet»
	elementsReverse.put(«EXPAND MetaModel::MetaFeature FOR metaFeature», «id»)
«ENDDEFINE»
