package iaml.generated2;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Wed Oct 15 15:05:06 NZDT 2008
 */
@SuppressWarnings("unchecked")
class KBFragement_getTestFromExternal {
    /**
     * Method generated for query /test_from_external[in,out]
     * @param app input parameter generated from slot 0
     * @return an iterator for instances of TestFromExternal
    */
    public static ResultSet<TestFromExternal> getTestFromExternal(
        final org.openiaml.model.model.InternetApplication app) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<TestFromExternal> _result = new ResultSet(KBFragement_getTestFromExternal.getTestFromExternal(
                    app, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /test_from_external[in,out]
     * @param app input parameter generated from slot 0
     * @return an iterator for instances of TestFromExternal
    */
    static ResourceIterator<TestFromExternal> getTestFromExternal(
        final org.openiaml.model.model.InternetApplication app,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<TestFromExternal> result = new IteratorChain<TestFromExternal>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // rule_test_external  IF /app_name([app],test) THEN /test_from_external([app],hello world)
                    case 0:
                        return getTestFromExternal_0(app,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // rule_test_external  IF /app_name([app],test) THEN /test_from_external([app],hello world)
                    case 0:
                        return "rule_test_external";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /test_from_external[in,out]
     * @param app input parameter generated from slot 0
     * @return an iterator for instances of TestFromExternal
    */
    private static ResourceIterator<TestFromExternal> getTestFromExternal_0(
        final org.openiaml.model.model.InternetApplication app,
        final DerivationController _derivation) {
        _derivation.log("rule_test_external", DerivationController.RULE, app,
            DerivationController.NIL);

        // comparing constants in rule head with parameters
        if (!Constants.app.equals(app)) {
            return EmptyIterator.DEFAULT;
        }

        // Variable bindings in rule:  IF /app_name([app],test) THEN /test_from_external([app],hello world)
        class bindingsInRule2 {
            // Property generated for term  "[app]"
            org.openiaml.model.model.InternetApplication p1;

            // Property generated for term  "test"
            java.lang.String p2;

            // Property generated for term  "hello world"
            java.lang.String p3;
        }
        ;

        final bindingsInRule2 bindings = new bindingsInRule2();
        bindings.p1 = Constants.app;
        bindings.p2 = "test";
        bindings.p3 = "hello world";

        // code for prereq /app_name([app],test)
        final ResourceIterator<InternetApplication_Name> iterator1 = KBFragement_getAppName.getAppName(Constants.app,
                "test", _derivation.increaseDepth());

        // code for prereq /test_from_external([app],hello world)
        final ResourceIterator<TestFromExternal> iterator2 = new NestedIterator<InternetApplication_Name, TestFromExternal>(iterator1) {
                public ResourceIterator<TestFromExternal> getNextIterator(
                    InternetApplication_Name object) {
                    bindings.p1 = Constants.app;
                    bindings.p2 = "test";

                    return new SingletonIterator(new TestFromExternal(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator2;
    }
}
