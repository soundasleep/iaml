«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE runEntryGate FOR model::components::Gate-»
/* entry gate '«safeName()»' */

/* expand conditions - do any of them fail? */
if (!(«EXPAND template::conditions::Runtime::callCondition(true, false) FOREACH conditions SEPARATOR " && "»)) {
	// condition failed
	
	// save the current frame, for resuming
	$resume = get_frame_id();
	«IF containingSession(this) != null»
		$_SESSION["«safeName(containingSession(this))»_«safeNameString(id)»"] = $resume;
	«ELSE»
		set_application_value("«safeNameString(id)»", $resume);
	«ENDIF»
	
	// execute any wires
	«EXPAND template::events::Frame::runGateWires FOR this»
}

«ENDDEFINE»

/**
 * If we have been asked to navigate to the given Gate,
 * where should we resume?
 *
 * Should set '$arg' to the new frame ID, or empty if the resume is not set.
 */
«DEFINE getEntryResumeTarget(String arg) FOR model::components::Gate»
	«IF containingSession(this) != null»
		$«arg-» = null;
		if (isset($_SESSION["«safeName(containingSession(this))»_«safeNameString(id)»"]))
			$«arg-» = $_SESSION["«safeName(containingSession(this))»_«safeNameString(id)»"];
	«ELSE»
		$«arg-» = get_application_value("«safeNameString(id)»", null);
	«ENDIF»

	// check that this is a valid value for this resume
	$is_valid = false;
	«FOREACH getEntryResumeTargets(this) AS target»
		if ($«arg-» == "«safeName(target)»")
			$is_valid = true;  
	«ENDFOREACH»
	if (!$is_valid) {
		log_message("[gate] resume target '$resume' is not valid");
		$«arg-» = "";	// reset
	}
«ENDDEFINE»

/**
 * Find _any_ target for the Gate (i.e. the resume has not been set)
 */
«DEFINE getEntryAnyTarget(String arg) FOR model::components::Gate»
	«IF getEntryResumeTargets(this).isEmpty»
		«throwException("Gate '" + this + "' did not have any possible resume targets")»
	«ENDIF»
	$«arg-» = "«safeName(getEntryResumeTargets(this).first())»"; 
«ENDDEFINE»
