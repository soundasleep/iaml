import iaml;

shouldBeSecure(model::visual::Page this) :
	eContainer != null && model::scopes::Session.isInstance(eContainer)	
		&& !((model::scopes::Session) eContainer).children.typeSelect(model::components::LoginHandler).isEmpty;	

isSecure(model::visual::Page this) :
	eventTriggers.select(e|e.name == "access")
		.outEdges.typeSelect(model::wires::RunInstanceWire)
		.to.typeSelect(model::Operation).exists(o | isSecureOperation(o));

isSecureOperation(model::Operation this) :
	false;

isSecureOperation(model::CompositeOperation this) :
	nodes.typeSelect(model::operations::StartNode)
		.exists(n | goesToCancelNode(n, {}.toSet()));

Boolean goesToCancelNode(emf::EObject this, Set[emf::EObject] visited) :
	false;
	
Boolean goesToCancelNode(model::operations::CancelNode this, Set[emf::EObject] visited) :
	true;
	
Boolean goesToCancelNode(model::ExecutionEdgesSource this, Set[emf::EObject] visited) :
	!visited.contains(this) &&
	outExecutions.exists(edge | 
		edge.to != null && 
		goesToCancelNode(edge.to, (visited.toSet().add(this)).toSet())
	);
