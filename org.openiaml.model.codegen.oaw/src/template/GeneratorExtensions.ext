import iaml;

extension metamodel::Extensions reexport;

pageTitle(model::InternetApplication this) :
	if name == null || name == "" then "(untitled application)" else name.toFirstUpper();

pageTitle(model::visual::Page this) :
	if name == null || name == "" then id else name;

formName(model::visual::InputForm this) :
	if (name == null || name == "") then "(untitled form)" else name;
	
textFieldName(model::visual::InputTextField this) :
	if (name == null || name == "") then "(untitled field)" else name;

safeName(model::visual::Page this) :
	if (eContainer == null) then safeName(id) else safeName(eContainer) + "_page_" + safeName(name);

safeName(model::visual::InputTextField this) :
	if (eContainer == null) then safeName(id) else safeName(eContainer) + "_text_" + safeName(name);

safeName(model::Operation this) :
	if (eContainer == null) then safeName(id) else safeName(eContainer) + "_op_" + safeName(name);

safeName(model::wires::SyncWire this) :
	if (eContainer == null) then safeName(id) else safeName(eContainer) + "_sync_" + safeName(name);

safeName(model::wires::ParameterWire this) :
	if (eContainer == null) then safeName(id) else safeName(eContainer) + "_param_" + safeName(id);
	
safeName(model::NamedElement this) :
	if (eContainer == null) then safeName(id) else safeName(eContainer) + "_" + safeName(name);

safeName(String s) :
	s.replaceAll("[^A-Za-z0-9]", "_");

safeName(emf::EObject this) :
	"unexpected eobject " + this;

operationName(model::WireEdgeDestination this) : 
	"impossible";

operationName(model::Operation this) :
	safeName(this);
	
/* is this operation contained in the current page? */
model::visual::Page containingPage(model::visual::Page element) :
	element;
	
model::visual::Page containingPage(model::Operation element) :
	containingPage(element.eContainer);

model::visual::Page containingPage(model::NamedElement element) :
	containingPage(element.eContainer);

/* default for any EObject */
model::visual::Page containingPage(emf::EObject element) :
	null;

onCurrentPage(model::WireEdgesSource pageElement, model::WireEdgeDestination target) :
	containingPage(pageElement) != null && 
	containingPage(pageElement) == containingPage(target);

/* get the start node for an operation */
startNode(model::CompositeOperation this) :
	nodes.selectFirst( node | node.metaType.isAssignableFrom(model::operations::StartNode) );
