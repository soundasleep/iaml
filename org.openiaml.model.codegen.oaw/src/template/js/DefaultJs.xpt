«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE defaultJs FOR emf::EObject»

/* approach #2: use event queues stored on the server, if the function is
   not available on the current page */
function store_event(page_id, event_name, arg0) {
	var url = 'store_event.php?page_id=' + escape(page_id) + '&event_name=' + escape(event_name) + "&arg0=" + escape(arg0);
	debug("creating ajax request to url: " + url);
	$('ajax_monitor').innerHTML = (1 * $('ajax_monitor').innerHTML) + 1;		// increment ajax counter
	new Ajax.Request(url,
  {
    method:'get',
    onSuccess: function(transport){
      	var response = transport.responseText || "no response text";
      	debug("success: " + response);
      	document.getElementById('response').innerHTML = response;
      	$('ajax_monitor').innerHTML = (1 * $('ajax_monitor').innerHTML) - 1;		// decrement ajax counter
    },
    onFailure: function(transport){ 
      	$('ajax_monitor').innerHTML = (1 * $('ajax_monitor').innerHTML) - 1;		// decrement ajax counter
    	debug("something went wrong: " + transport.responseText);
      	$('ajax_monitor').innerHTML = 'failed: ' + response.responseText;		// for speeding up testing
    	alert('Something went wrong...');	// alert is last so we can continue execution
     }
  });
  debug("store_event called");
}

/* save directly to database (only one attribute) */
function store_db(attribute_id, arg0) {
	var url = 'store_db.php?attribute_id=' + escape(attribute_id) + '&arg0=' + escape(arg0);
	debug("creating ajax request to url: " + url);
	$('ajax_monitor').innerHTML = (1 * $('ajax_monitor').innerHTML) + 1;		// increment ajax counter
	new Ajax.Request(url,
  {
    method:'get',
    onSuccess: function(transport){
      	var response = transport.responseText || "no response text";
      	debug("success: " + response);
      	document.getElementById('response').innerHTML = response;
      	$('ajax_monitor').innerHTML = (1 * $('ajax_monitor').innerHTML) - 1;		// decrement ajax counter
    },
    onFailure: function(transport){ 
      	$('ajax_monitor').innerHTML = (1 * $('ajax_monitor').innerHTML) - 1;		// decrement ajax counter
    	debug("something went wrong: " + transport.responseText);
      	$('ajax_monitor').innerHTML = 'failed: ' + response.responseText;		// for speeding up testing
    	alert('Something went wrong...');	// alert is last so we can continue execution
     }
  });
  debug("store_db called");	
}

var debug_message_saved = "";
function debug(msg) {
	var debug_string = "<li>" + msg + "\n";
	if (document.getElementById('debug')) {
		document.getElementById('debug').innerHTML += debug_message_saved + debug_string;
		debug_message_saved = "";
	} else {
		debug_message_saved += debug_string;
	}
}

/**
 * Populate all of the fields on the page.
 */
function populateFields() {
	// get all fields on the page
	debug("populating fields...");
	populateAll(document.getElementsByTagName("input"));
	populateAll(document.getElementsByTagName("textarea"));
}

/**
 * Populate all of the fields in the list, based on .id and .value
 */
function populateAll(fields) {
	var i;
	for (i = 0; i < fields.length; i++) {
		var cookieName = "field_" + fields[i].id;
		if (readCookie(cookieName) != null) {
			debug("field " + fields[i].id + " (cookie name " + cookieName + ") set to value " + readCookie(cookieName));
			fields[i].value = readCookie(cookieName);
		}
	}
}

/**
 * Save the value of a particular field
 */
function setField(field) {
	debug("saving cookie for " + field.id);
	createCookie("field_" + field.id, field.value, 30);
}

/**
 * Is every element in the array equal?
 */ 
function is_array_equal(a) {
	if (a.length <= 1)
		return true;
		
	for (var i = 1; i < a.length; i++) {
		if (a[0] != a[i])
			return false;
	}
	
	return true;
}

/**
 * Define an exception class.
 */
function IamlJavascriptException(message) {
	this.message = message;
	
	this.getMessage = function() { return message; }
	this.toString = function() { return "IamlJavascriptException: " + message; } 
}

// ---------

/**
 * Copied from http://www.quirksmode.org/js/cookies.html
 */
function createCookie(name,value,days) {
	if (days) {
		var date = new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		var expires = "; expires="+date.toGMTString();
	}
	else var expires = "";
	document.cookie = name+"="+value+expires+"; path=/";
}

function readCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
	}
	return null;
}

function eraseCookie(name) {
	createCookie(name,"",-1);
}

/* page onload functions */
populateFields();

«ENDDEFINE»
