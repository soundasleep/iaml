«IMPORT iaml»

/**
 * The flow of execution within an condition.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * TODO unresolved: Can a condition have multiple outExecutions?
 */
«DEFINE conditionFlow(Boolean php, model::visual::Page currentPage) FOR model::operations::StartNode-»
	// flow starts here
	«FOREACH outExecutions AS e-»
		«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE conditionFlow(Boolean php, model::visual::Page currentPage) FOR model::ActivityNode-»
	// nothing for an activity node
«ENDDEFINE»

/**
 * The individual steps within a flow.
 */
 
/* an edge that is the end (both StartNode and FinishNode also fall into this) */
«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::ExecutionEdgeDestination-»
	// do nothing «this-»
«ENDDEFINE»

/**
 * TODO expand each of these different types of Conditions into
 * new templates.
 */
«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::DecisionCondition»
	// DecisionCondition «this»
	if (!
		«IF name=="xpathMatch"»
			xpathMatch(«EXPAND conditionInflows(php, currentPage) FOREACH inFlows SEPARATOR ","»)
		«ELSEIF name=="emailAddress"»
			emailAddressMatch(«EXPAND conditionInflows(php, currentPage) FOREACH inFlows SEPARATOR ","»)
		«ELSEIF name=="is set?"»
			«EXPAND conditionIsSet(php, currentPage) FOREACH inFlows SEPARATOR " && "»
		«ELSE»
			«REM»unknown condition«ENDREM»
			«EXPAND exception FOR throwException("Unknown DecisionCondition '" + name + "': " + this)»
		«ENDIF»
	) {
		«REM»continue expanding following conditions (if any)«ENDREM»
		«FOREACH getFailFlows() AS e-»
			«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
		«ENDFOREACH»
	} else {
		«REM»continue expanding following conditions (if any)«ENDREM»
		«FOREACH getPassFlows() AS e-»
			«EXPAND conditionFlowStep(php, currentPage) FOR e.to-»
		«ENDFOREACH»
	}
«ENDDEFINE»

«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::CancelNode-»
	return false; /* condition failed: «exceptionText» */
«ENDDEFINE»

«DEFINE conditionFlowStep(Boolean php, model::visual::Page currentPage) FOR model::operations::FinishNode-»
	return true; /* condition passed */
«ENDDEFINE»

/**
 * Translate DataFlowEdges into actual sources of data
 */
«DEFINE conditionInflows(Boolean php, model::visual::Page currentPage) FOR model::DataFlowEdge-»
	«EXPAND template::operations::DataFlow::dataSource(php, currentPage) FOR from-»
«ENDDEFINE»

/**
 * Translate DataFlowEdges into 'is set' values
 */
«DEFINE conditionIsSet(Boolean php, model::visual::Page currentPage) FOR model::DataFlowEdge-»
	«EXPAND template::operations::DataFlow::isSet(php, currentPage) FOR from-»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
