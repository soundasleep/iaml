«IMPORT modeldoc»

«EXTENSION metamodel::ModeldocExtensions»

«DEFINE latexClass(modeldoc::ModelDocumentation root) FOR modeldoc::EMFClass»
	«FILE "output/latex/" + name + ".tex"»

% generated ModelDoc latex for class «name»
		
\hypertarget{model reference:«humanise(name)»}{}
\hypertarget{model reference:«humanise(name)»s}{}
\section{«humanise(name)»}

% tagline
«IF tagline != null»
«EXPAND LatexTemplate::javadocElementToLatex FOR tagline»
«ELSE»
\textbf{TODO} Tagline for «EXPAND modelLink».
«ENDIF»

\subsubsection{Rationale}

% Rationale
«IF rationale != null»
«EXPAND LatexTemplate::javadocElementToLatex FOR rationale»
«ELSE»
\textbf{TODO} Rationale for «EXPAND modelLink».
«ENDIF»

% structure
\subsubsection{Structure}
«IF !supertypes.isEmpty»
	\noindent \textbf{Extends:} «EXPAND modelLink FOREACH supertypes.sortBy(t|t.name) SEPARATOR ", "» 
«ENDIF»

«IF !subtypes.isEmpty»
	\noindent \textbf{Direct subtypes:} «EXPAND modelLink FOREACH subtypes.sortBy(t|t.name) SEPARATOR ", "» 
«ENDIF»

«IF !allSubtypes().without(subtypes).isEmpty»
	\noindent \textbf{Additional subtypes:} «EXPAND modelLink FOREACH allSubtypes().without(subtypes).sortBy(t|t.name) SEPARATOR ", "» 
«ENDIF»

% visual representation
\subsection{Visual Representation}

\begin{figure}[htb]
\centering
% TODO this should be using SVG images, not PNG
\includegraphics{elements/«name».eps}
\caption{«humanise(name)»}
\label{fig:reference-«name»}
\end{figure}

% Rationale behind the visual representation
A visual representation of this element is provided in Figure \ref{fig:reference-«name»}.
\textbf{TODO} Visual representation rationale.
% It uses the orange background of all input elements\footnote{Not implemented yet}, and uses a textual icon of \verb|'A'| to signify it is editable.

\subsection{Attributes}
«EXPAND latexAttributes»

\subsection{Children}
«EXPAND latexChildren»

\subsection{References}
«EXPAND latexReferences»

\subsection{Events}
«EXPAND latexEvents»

\subsection{Conditions}
«EXPAND latexConditions»

\subsection{Operations}
«EXPAND latexOperations»

	«ENDFILE»
«ENDDEFINE»

«DEFINE latexAttributes FOR modeldoc::EMFClass»
	«IF !attributes.isEmpty»
		\subsubsection{Direct Attributes}
				
		\begin{modeldocList}
		«FOREACH attributes.sortBy(a|a.name) AS attribute»
		  \item \modeldocName{«attribute.name»} : «EXPAND bounds(attribute.lowerBound, attribute.upperBound)» \code{«attribute.type»}
			«IF attribute.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR attribute.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
	
	«IF !getInheritedAttributes(this).isEmpty»
		\subsubsection{Inherited Attributes}
		
		«FOREACH getInheritedAttributes(this).sortBy(a|a.name) AS attribute SEPARATOR "; "»\modeldocName{«attribute.name»} (from «EXPAND modelLink FOR attribute.containingType»)«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexChildren FOR modeldoc::EMFClass»
	«IF !references.select(r|r.containment)
			.reject(r|r.type.name == "EventTrigger")
			.reject(r|r.type.name.endsWith("Condition"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		\subsubsection{Direct Children}
				
		\begin{modeldocList}
		«FOREACH references.select(r|r.containment)
				.reject(r|r.type.name == "EventTrigger")
				.reject(r|r.type.name.endsWith("Condition"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.containment)
			.reject(r|r.type.name == "EventTrigger")
			.reject(r|r.type.name.endsWith("Condition"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		\subsubsection{Inherited Children}
		
		«FOREACH getInheritedReferences(this).select(r|r.containment)
				.reject(r|r.type.name == "EventTrigger")
				.reject(r|r.type.name.endsWith("Condition"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref SEPARATOR "; "»\modeldocName{«ref.name»} (from «EXPAND modelLink FOR ref.containingType»)«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexReferences FOR modeldoc::EMFClass»
	«IF !references.select(r|!r.containment)
			.reject(r|r.type.name == "EventTrigger")
			.reject(r|r.type.name.endsWith("Condition"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		\subsubsection{Direct References}
				
		\begin{modeldocList}
		«FOREACH references.select(r|!r.containment)
				.reject(r|r.type.name == "EventTrigger")
				.reject(r|r.type.name.endsWith("Condition"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|!r.containment)
			.reject(r|r.type.name == "EventTrigger")
			.reject(r|r.type.name.endsWith("Condition"))
			.reject(r|r.type.name.endsWith("Operation"))
			.isEmpty»
		\subsubsection{Inherited References}
		
		«FOREACH getInheritedReferences(this).select(r|!r.containment)
				.reject(r|r.type.name == "EventTrigger")
				.reject(r|r.type.name.endsWith("Condition"))
				.reject(r|r.type.name.endsWith("Operation"))
				.sortBy(a|a.name) AS ref SEPARATOR "; "»\modeldocName{«ref.name»} (from «EXPAND modelLink FOR ref.containingType»)«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexEvents FOR modeldoc::EMFClass»
	«IF !references.select(r|r.type.name == "EventTrigger").isEmpty»
		\subsubsection{Direct Events}
				
		\begin{modeldocList}
		«FOREACH references.select(r|r.type.name == "EventTrigger").sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.type.name == "EventTrigger").isEmpty»
		\subsubsection{Inherited Events}
		
		«FOREACH getInheritedReferences(this).select(r|r.type.name == "EventTrigger").sortBy(a|a.name) AS ref SEPARATOR "; "»\modeldocName{«ref.name»} (from «EXPAND modelLink FOR ref.containingType»)«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexConditions FOR modeldoc::EMFClass»
	«IF !references.select(r|r.type.name.endsWith("Condition")).isEmpty»
		\subsubsection{Direct Conditions}
				
		\begin{modeldocList}
		«FOREACH references.select(r|r.type.name.endsWith("Condition")).sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.type.name.endsWith("Condition")).isEmpty»
		\subsubsection{Inherited Conditions}
		
		«FOREACH getInheritedReferences(this).select(r|r.type.name.endsWith("Condition")).sortBy(a|a.name) AS ref SEPARATOR "; "»\modeldocName{«ref.name»} (from «EXPAND modelLink FOR ref.containingType»)«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE latexOperations FOR modeldoc::EMFClass»
	«IF !references.select(r|r.type.name.endsWith("Operation")).isEmpty»
		\subsubsection{Direct Operations}
				
		\begin{modeldocList}
		«FOREACH references.select(r|r.type.name.endsWith("Operation")).sortBy(a|a.name) AS ref»
		  \item \modeldocName{«ref.name»} : «EXPAND bounds(ref.lowerBound, ref.upperBound)» «EXPAND modelLink FOR ref.type»
			«IF ref.tagline != null»
			  \begin{modeldocList}
				  \item	«EXPAND javadocElementToLatex FOR ref.tagline»
			  \end{modeldocList}
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
	
	«IF !getInheritedReferences(this).select(r|r.type.name.endsWith("Operation")).isEmpty»
		\subsubsection{Inherited Operations}
		
		«FOREACH getInheritedReferences(this).select(r|r.type.name.endsWith("Operation")).sortBy(a|a.name) AS ref SEPARATOR "; "»\modeldocName{«ref.name»} (from «EXPAND modelLink FOR ref.containingType»)«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE bounds(int lowerBound, int upperBound) FOR emf::EObject»
	«IF upperBound != 0 || lowerBound != 1»
  		«IF lowerBound == 1 && upperBound == 1»
  			«REM»ignore 1..1«ENDREM»
  		«ELSEIF upperBound == lowerBound»
  			«lowerBound»
  		«ELSEIF upperBound == -1»
  			[«lowerBound»..*]
  		«ELSE»
  			[«lowerBound»..«upperBound»]
  		«ENDIF»
  	«ENDIF»
«ENDDEFINE»

«DEFINE modelLink FOR modeldoc::EMFClass-»
«IF this==null»\textbf{TODO} \code{null} class«ELSE»\modelLink{«humanise(name)»}«ENDIF»«ENDDEFINE» 

«DEFINE javadocElementToLatex FOR modeldoc::Reference»
	\textbf{TODO} Unknown javadoc '«this»'
«ENDDEFINE»

«DEFINE javadocElementToLatex FOR modeldoc::JavadocTagElement»«IF name == "@inference" || name == "@operational" || name == "@implementation" || name == "@example"-»
«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«EXPAND javadocSemanticsElementToLatex FOR fragments.first()-»
«EXPAND javadocElementToLatex FOREACH fragments.withoutFirst()-»
«ELSEIF name == "@model" || name == "@link"-»
«EXPAND javadocModelElementToLatex FOREACH fragments-»
«ELSE-»
«EXPAND javadocElementToLatex FOREACH fragments-»
«ENDIF-»«ENDDEFINE»

«DEFINE javadocElementToLatex FOR modeldoc::JavadocTextElement-»
«IF !(value.startsWith(",") || value.startsWith(".") || value.startsWith("?"))»«" "»«ENDIF»«value-»
«ENDDEFINE»

«REM»the formatting is ugly, but we sadly can't have _any_ whitespace«ENDREM»
«DEFINE javadocModelElementToLatex FOR modeldoc::JavadocTextElement-»
«" "»«IF value.contains(".")-»
«value-»«REM»the value contains an illegal character; it can't link to a model element«ENDREM»
«ELSE-»
«IF value.trim().contains(" ")-»
«LET value.trim().split(" ") AS bits-»
«IF bits.first().contains("#")-»
«LET bits.first().trim().split("#") AS hashBits-»
<a href="«hashBits.first()».html#«hashBits.withoutFirst().first()»">
«ENDLET-»
«ELSE-»
<a href="«bits.first()».html">
«ENDIF-»
«FOREACH bits.withoutFirst().withoutLast() AS s»«s» «ENDFOREACH»«bits.last()»</a>«ENDLET-»
«ELSE-»
«IF value.trim().contains("#")-»
«LET value.trim().split("#") AS hashBits-»
<a href="«hashBits.first()».html#«hashBits.withoutFirst().first()»">«hashBits.withoutFirst().first()»</a>
«ENDLET-» 
«ELSE-»
\modelLink{«humanise(value)»}
«ENDIF-»
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«DEFINE javadocSemanticsElementToLatex FOR modeldoc::JavadocTextElement»
	«FOREACH value.trim().split(" ").withoutFirst() AS s»«s» «ENDFOREACH»
«ENDDEFINE»
«DEFINE javadocSemanticsElementToLatex FOR modeldoc::JavadocFragment»
	<span class="error">(unknown semantic starting tag '«this»')</span>
«ENDDEFINE»

/* no special meaning; just render it like normal */
«DEFINE javadocModelElementToLatex FOR modeldoc::JavadocFragment»
	«EXPAND javadocElementToLatex» 
«ENDDEFINE»
