#created on: 4/11/2008
package org.openiaml.model.drools

#list any import classes here.
import org.eclipse.emf.ecore.*;
import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.domain.*;
import ca.ecliptical.emf.xpath.*;
import java.util.*;

#declare any global variables here
global EcoreCreateElementsHelper handler;

# insertion queue
import org.openiaml.model.drools.*;
global DroolsInsertionQueue queue;

rule "Create a default primary key for DomainObjects which do not have one"

	when
		object : DomainObject ( )
		not (da : DomainAttribute ( eContainer == object, primaryKey == true ) )
	
	then
		// create a new one
		DomainAttribute da2 = handler.generatedDomainAttribute(object, object);
		handler.setName(da2, "generated primary key");
		handler.setValue(da2, ModelPackage.eINSTANCE.getDomainAttribute_PrimaryKey(), true);
		queue.add(da2, drools);

end 

rule "Domain objects that extend each other will also copy over attributes, connected by ExtendsWires"
	when
		sourceObject : DomainObject( )
		sourceAttribute : DomainAttribute ( eContainer == sourceObject )
		
		targetObject : DomainObject ( this != sourceObject )
		
		ext : ExtendsWire ( from == targetObject, to == sourceObject )
		
		not ( DomainAttribute ( eContainer == targetObject, name == sourceAttribute.name )) 
	
	then
		DomainAttribute copy = handler.generatedDomainAttribute(ext, targetObject);
		handler.setName(copy, sourceAttribute.getName());
		handler.setValue(copy, ModelPackage.eINSTANCE.getDomainAttribute_PrimaryKey(), sourceAttribute.isPrimaryKey());
		queue.add(copy, drools);
		
		// extends wire to maintain relationship
		ExtendsWire ext2 = handler.generatedExtendsWire(ext, sourceAttribute, copy, sourceAttribute);
		queue.add(ext2, drools);

end

