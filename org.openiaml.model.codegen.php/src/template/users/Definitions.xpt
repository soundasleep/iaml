«IMPORT iaml»

/**
 * Method definitions for access control handlers.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Expand out all domain object instances.
 */
«DEFINE accessControlHandlerDefinitions(Boolean php) FOR model::scopes::Session»
	«IF php»
		«EXPAND checkAccessDefinition FOREACH elements.typeSelect(model::components::AccessControlHandler)»
	«ELSE»
		/* no client-side access control handler definitions for Session */
	«ENDIF»
«ENDDEFINE»
«DEFINE accessControlHandlerDefinitions(Boolean php) FOR model::visual::Frame»
	«IF php»
		«EXPAND checkAccessDefinition FOREACH elements.typeSelect(model::components::AccessControlHandler)»
	«ELSE»
		/* no client-side access control handler definitions for Frame */
	«ENDIF»
«ENDDEFINE»

/**
 * Definition of the access_control_permissions_check_*() method.
 * Expected to be in PHP.
 */
«DEFINE checkAccessDefinition FOR model::components::AccessControlHandler»
	/**
	 * Definition of access control handler '«name»'
	 */
	function access_control_permissions_check_«safeNameString(id)»() {
		«REM»find the desired UserInstance to check against«ENDREM»
		«REM»there should be exactly one incoming parameter wire with a UserInstance«ENDREM»
		«LET inParameterEdges.from.typeSelect(model::domain::DomainIterator).select(i|!i.outSelects.to.outSchemas.to.typeSelect(model::users::Role).isEmpty) AS iterators»
			«IF iterators.isEmpty»
				«throwException("No incoming DomainIterators for AccessControlHandler " + this)»
			«ENDIF»
			«FOREACH iterators AS it»
				«EXPAND checkAccessDefinitionUser(it)»
			«ENDFOREACH»
		«ENDLET»
	}
«ENDDEFINE»

/**
 * We now have a UserInstance on which to validate against
 */
«DEFINE checkAccessDefinitionUser(model::domain::DomainIterator user) FOR model::components::AccessControlHandler»
	$iterator = DomainIterator_«safeName(user)»::getInstance();
	if ($iterator->isEmpty()) {
		// there are no results; bail
		throw new IamlRuntimeException("Unexpected empty UserInstance '«user.name»'; has the user logged in?");
	}
	
	«FOREACH outRequiresEdges.to.typeSelect(model::users::Role) AS targetRole»
		// for each source
		«FOREACH user.outSelects.to AS userStore»
		// get the root user iterator
		$attribute = DomainAttribute_UserRoot_ID::getInstance();
		$root_user_id = $iterator->getAttributeInstance($attribute)->getValue();
		
		if ($root_user_id === null) {
			throw new IamlRuntimeException("User Instance did not have a root ID " . $attribute->toString());
		}

		// a separate query iterator
		$query_iterator = HasRole_«safeName(targetRole)»_«safeName(userStore)»::getInstance($root_user_id); 
		if ($query_iterator->isEmpty()) {
			// no such role exists
			$failure['«safeName(targetRole)»'] = new IamlRuntimeException("Source instance '" . $iterator->toString() . "' could not be translated into '«targetRole.name»'");
		} else {
			// role exists fine
			$failure['«safeName(targetRole)»'] = null;
		}
		«ENDFOREACH»
	«ENDFOREACH»
	
	/* check permissions */
	«FOREACH outRequiresEdges.to.typeSelect(model::users::Permission) AS targetPermission»
		/* permission '«targetPermission.name»' */
		if (!$iterator->getAttributeInstance(Permission_«safeName(targetPermission)»::getInstance())->getValue()) {
			$failure['«safeName(targetPermission)»'] = new IamlRuntimeException("User of type '«user.name»' did not have permission '«targetPermission.name»'");
		} else {
			$failure['«safeName(targetPermission)»'] = null;
		}
	«ENDFOREACH»
	
	/* combine with any constraint wires */
	«LET outRequiresEdges.outConstraintEdges AS c1»
	«LET outRequiresEdges.inConstraintEdges AS c2»
	«LET c1.toSet().union(c2) AS constraints»
		«FOREACH constraints AS constraint»
			// constraint wire '«constraint»'
			«LET ((model::wires::RequiresEdge) constraint.from).to AS constraintFrom»
			«LET ((model::wires::RequiresEdge) constraint.to).to AS constraintTo»
			«IF constraint.type==model::wires::ConstraintTypes::OR»
				if ($failure['«safeName(constraintFrom)»'] == null ||
						$failure['«safeName(constraintTo)»'] == null) {
					// OR is successful
					$failure['«safeName(constraintFrom)»'] = null;
					$failure['«safeName(constraintTo)»'] = null;
				}
			«ELSEIF constraint.type==model::wires::ConstraintTypes::XOR»
				if ($failure['«safeName(constraintFrom)»'] == null xor
						$failure['«safeName(constraintTo)»'] == null) {
					// XOR is successful
					$failure['«safeName(constraintFrom)»'] = null;
					$failure['«safeName(constraintTo)»'] = null;
				}
			«ELSE»
				// ignore ANDs; this is the default 
			«ENDIF»
			«ENDLET»
			«ENDLET»
		«ENDFOREACH»
	«ENDLET»
	«ENDLET»
	«ENDLET»
	
	// for the check to be successful, there must be no 'null's left in the failures
	log_message("Access control check results: " . print_r($failure, true));
	foreach ($failure as $key => $exception) {
		if ($exception !== null) {
			throw $exception;
		}	
	}
	
	/* check is successful */
	return true;
«ENDDEFINE»
