/* {template-warning} */
/**
 * We customise the creation of figures in the editor. In particular,
 * these figures automatically update "parent node" labels when
 * the nodes themselves change. This is achieved by adding
 * a NotificationListener to the ResourceSet.
 *
 * This template file is processed through AllReleaseTests to correctly
 * reflect all ParentNames: see issue 154.
 *
 * See: http://www.jevon.org/wiki/Adding_a_Custom_Label_in_GMF
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION xpt::diagram::Utils»

/**
 * We re-define the entire command, since we're creating a
 * new sub-class.
 */
«AROUND createNodeShape(gmfgen::GenNode node) FOR gmfgen::InnerClassViewmap-»
	«REM»only expand for classes which we can support«ENDREM»
	«REM»
		ALL classes now have 'Stereotype' labels, so we need to extend ALL labels.
		«IF {.template-classname-list.}»
	«ENDREM»
	«IF true»
		«EXPAND xpt::Common::generatedMemberComment("Jevon modification: we extend createNodeShape to use our extended class.")»
		protected org.eclipse.draw2d.IFigure createNodeShape() {
			«className» figure = new Extended«className»();
			«IF node.childNodes->size() > 0 and node.getLayoutType() = gmfgen::ViewmapLayoutType::XY_LAYOUT-»
	 		figure.setUseLocalCoordinates(true);
			«ENDIF-»
	 		return primaryShape = figure;
		}
		
		«EXPAND impl::diagram::editparts::NodeEditPart::getPrimaryShapeMethod FOR className-»
		
		«EXPAND xpt::Common::generatedMemberComment("Extends the normal generated Figure class with one that can handle notification events, to render changes in the model.\n\nUnfortunately, GMF generates the Viewmap as part of the .gmfgen directly, so we cannot modify the generated code here; we have to extend it in this way. Its not ideal.")»
		public class Extended«className» extends «className» {
			
			«EXPAND xpt::Common::generatedMemberComment»
			private org.eclipse.emf.ecore.EObject resolvedObject;
			
			«EXPAND xpt::Common::generatedMemberComment»
			public Extended«className»() {
				// initialise parent as normal
				super();
				
				// find the parent object
				resolvedObject = resolveSemanticElement();
				
				// refresh any parent labels
				refreshLabels();
				
				// add a notification listener
				// based on http://dev.eclipse.org/newslists/news.eclipse.modeling.gmf/msg12297.html
		        org.eclipse.emf.transaction.NotificationFilter nf = org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(
			        	org.openiaml.model.model.ModelPackage.eINSTANCE.getNamedElement_Name()
			        ).or(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(
			        	org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getENamedElement_Name()
			        ));
		        org.eclipse.emf.transaction.ResourceSetListener rsl = new org.eclipse.emf.transaction.ResourceSetListenerImpl(nf) {
					«EXPAND xpt::Common::generatedMemberComment»		
					@Override
					public void resourceSetChanged(org.eclipse.emf.transaction.ResourceSetChangeEvent event) {
						refreshLabels();
					}
		        };
		        
		        getEditingDomain().addResourceSetListener(rsl);
			}
			
			«EXPAND xpt::Common::generatedMemberComment»
			public void refreshLabels() {
				if (resolvedObject != null) {
					// labels from parent
					if (resolvedObject.eContainer() != null) {
						org.eclipse.emf.ecore.EObject parent = resolvedObject.eContainer();
						
						// permit parent labels from ENamedElements as well
						String parentName = null;
						if (parent instanceof org.openiaml.model.model.NamedElement) {
							parentName = "Container: " + ((org.openiaml.model.model.NamedElement) parent).getName();
						} else if (parent instanceof org.eclipse.emf.ecore.ENamedElement) {
							parentName = "Container: " + ((org.eclipse.emf.ecore.ENamedElement) parent).getName();
						}
						
						String containmentName = resolvedObject.eContainingFeature() == null ? "" : resolvedObject.eContainingFeature().getName();
						
						«REM»generated by template«ENDREM»
						/* parent features */
						{template-parents}
						
						/* containment features */
						{template-containments}
					}
			
					// other labels from the current object

					/* type features */
					{template-types}
					
					/* eType features */
					{template-etypes}
					
					/* stereotype figures */
					{template-stereotypes}
				}
			}
		
		}
	«ELSE»
		«REM»continue with normal shape«ENDREM»
		«targetDef.proceed()»
	«ENDIF»
«ENDAROUND»

«DEFINE getTypeName(String fqn, String name) FOR gmfgen::InnerClassViewmap-»
	// we actually want the type name
	String typeName = "???";
	if (resolvedObject instanceof «fqn») {
		«fqn» actual = («fqn») resolvedObject;
		
		if (actual.getType() == null) {
			typeName = "Any";
		} else {
			typeName = actual.getType().getName();
		}
	}
	
	getFigure«name»TypeFigure().setText("Type: " + typeName);
«ENDDEFINE»

«DEFINE getETypeName(String fqn, String name) FOR gmfgen::InnerClassViewmap-»
	// we actually want the type name
	String typeName = "???";
	if (resolvedObject instanceof «fqn») {
		«fqn» actual = («fqn») resolvedObject;
		
		if (actual.getEType() == null) {
			typeName = "Any";
		} else {
			typeName = actual.getEType().getName();
		}
	}
	
	getFigure«name»ETypeFigure().setText("Type: " + typeName);
«ENDDEFINE»
