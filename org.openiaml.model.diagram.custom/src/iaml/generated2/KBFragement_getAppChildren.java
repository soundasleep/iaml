package iaml.generated2;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Tue Oct 14 18:47:45 NZDT 2008
 */
@SuppressWarnings("unchecked")
class KBFragement_getAppChildren {
    /**
     * Method generated for query /app_children[out,out]
     * @return an iterator for instances of InternetApplication_Children
    */
    public static ResultSet<InternetApplication_Children> getAppChildren() {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<InternetApplication_Children> _result = new ResultSet(KBFragement_getAppChildren.getAppChildren(
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /app_children[out,out]
     * @return an iterator for instances of InternetApplication_Children
    */
    static ResourceIterator<InternetApplication_Children> getAppChildren(
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<InternetApplication_Children> result = new IteratorChain<InternetApplication_Children>(2) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // facts2 nz.org.take.ExternalFactStore@17e121c
                    case 0:
                        return getAppChildren_0(_derivation.reset(
                                _derivationlevel));

                    // rule1  IF /name([app],test) THEN /app_children([app],[page])
                    case 1:
                        return getAppChildren_1(_derivation.reset(
                                _derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // facts2 nz.org.take.ExternalFactStore@17e121c
                    case 0:
                        return "facts2";

                    // rule1  IF /name([app],test) THEN /app_children([app],[page])
                    case 1:
                        return "rule1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /app_children[out,out]
     * @return an iterator for instances of InternetApplication_Children
    */
    private static ResourceIterator<InternetApplication_Children> getAppChildren_0(
        final DerivationController _derivation) {
        _derivation.log("facts2", DerivationController.EXTERNAL_FACT_SET,
            DerivationController.NIL, DerivationController.NIL);

        return FactStores.facts2.fetch(null, null);
    }

    /**
     * Method generated for query /app_children[out,out]
     * @return an iterator for instances of InternetApplication_Children
    */
    private static ResourceIterator<InternetApplication_Children> getAppChildren_1(
        final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE,
            DerivationController.NIL, DerivationController.NIL);

        // Variable bindings in rule:  IF /name([app],test) THEN /app_children([app],[page])
        class bindingsInRule1 {
            // Property generated for term  "[page]"
            org.openiaml.model.model.visual.Page p1;

            // Property generated for term  "[app]"
            org.openiaml.model.model.InternetApplication p2;

            // Property generated for term  "test"
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = Constants.page;
        bindings.p2 = Constants.app;
        bindings.p3 = "test";

        // code for prereq /name([app],test)
        final ResourceIterator<NamedElement_Name> iterator1 = KBFragement_getName.getName(Constants.app,
                "test", _derivation.increaseDepth());

        // code for prereq /app_children([app],[page])
        final ResourceIterator<InternetApplication_Children> iterator2 = new NestedIterator<NamedElement_Name, InternetApplication_Children>(iterator1) {
                public ResourceIterator<InternetApplication_Children> getNextIterator(
                    NamedElement_Name object) {
                    bindings.p2 = (org.openiaml.model.model.InternetApplication) Constants.app;
                    bindings.p3 = "test";

                    return new SingletonIterator(new InternetApplication_Children(
                            bindings.p2, bindings.p1));
                }
            };

        return iterator2;
    }
}
