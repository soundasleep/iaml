«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/**
 * Render a Frame in an application of RSS 2.0.
 * All of the required content has already been included in PHP.
 * 
 * <p>We come into this template already being in PHP mode, so we have
 * to first escape out of it.
 */
«DEFINE renderFrameAsRSS20 FOR model::visual::Frame-»

/**
 * Firefox doesn't recognise application/rss+xml as a generic XML type:
 * see https://bugzilla.mozilla.org/show_bug.cgi?id=155730
 */
header("Content-Type: application/xml");

?>
<?xml version="1.0" encoding="utf-8"?>
«REM»TODO should we have a RSS namespace?«ENDREM»
<rss version="2.0">
	<channel>
		<title>«escapeXmlString(frameTitle())»</title>
		<link><?php echo escape_xml_string(get_baseurl()); ?></link>
		<description>Automatically generated feed for &apos;«escapeXmlString(frameTitle())»&apos;</description>
		<lastBuildDate><?php echo escape_xml_string(
			«REM»Tue, 10 Jun 2008 09:41:01 GMT«ENDREM»
			date('D, d M Y H:i:s T')); ?></lastBuildDate>
		<docs>http://blogs.law.harvard.edu/tech/rss</docs>
		<generator>Internet Application Modelling Language «escapeXmlString(iamlVersion())»</generator>
		<ttl>5</ttl>
		
		«REM»now, we can expand the items on the page«ENDREM»
		«EXPAND getFeedItems(this) FOREACH children.typeSelect(model::VisibleThing)»

	</channel>
</rss>
«ENDDEFINE»

«DEFINE getFeedItems(model::visual::Frame frame) FOR model::VisibleThing»
	«throwException("Cannot get feed item for VisibleThing: " + this)»
«ENDDEFINE»

/**
 * @implementation Frame
 *		If an {@model Frame#render RSS Frame} contains a {@model InputForm} with two
 *		{@model Button}s named 'next' and 'reset', and a {@model Label} named 'results count',
 *		this {@model InputForm} will be navigated over to create the items in the feed.
 */
«DEFINE getFeedItems(model::visual::Frame frame) FOR model::visual::InputForm»
	«LET children.typeSelect(model::visual::Button).select(b|b.name.toLowerCase() == "next") AS nextButton»
	«LET children.typeSelect(model::visual::Label).select(b|b.name.toLowerCase() == "results") AS resultsLabel»
	«LET children.typeSelect(model::visual::Button).select(b|b.name.toLowerCase() == "first") AS resetButton»
	«IF !(nextButton.isEmpty || resultsLabel.isEmpty || resetButton.isEmpty)»
		<?php
		/* this form has navigation button and results; we need to navigate over the results. */
		
		// first, reset ('First' button)
		{
			«EXPAND template::visual::EventHandlers::visibleThingClickEvents(frame, true) FOR resetButton.first()»
		}
		
		// get the number of results to iterate over ('Results' label)
		$results = null;
		«EXPAND template::visual::Render::getFieldValue(frame, "results") FOR resultsLabel.first()»
		
		if ($results === null) {
			throw new IamlRuntimeException("'Results' label could not be retrieved");
		}
		
		// now iterate over the result set, clicking 'Next' each time
		for ($i = 0; $i < $results; $i++) {
		?>
	«ENDIF»

	<item>
		<?php
		$rss_value = null;
		«EXPAND getProperty(frame, null, "title", "rss_value") FOR this-»
		if ($rss_value != null) { ?>
			<title><?php echo escape_xml_string($rss_value); ?></title>
		<?php } ?>
		
		<?php
		$rss_value = null;
		«EXPAND getProperty(frame, null, "link", "rss_value") FOR this-»
		if ($rss_value != null) { ?> 
			<link><?php echo escape_xml_string($rss_value); ?></link>
			<guid isPermaLink="true"><?php echo escape_xml_string($rss_value); ?></guid>
		<?php } ?>
		
		<?php
		$rss_value = null;
		«EXPAND getProperty(frame, null, "description", "rss_value") FOR this-»
		if ($rss_value != null) { ?> 
			<description><?php echo escape_xml_string($rss_value); ?></description>
		<?php } ?>
		
		<?php
		$rss_value = null;
		«EXPAND getProperty(frame, null, "updated", "rss_value") FOR this-»
		if ($rss_value != null) { ?> 
			<pubDate><?php echo escape_xml_string($rss_value); ?></pubDate>
		<?php } ?>
	</item>
		
	«IF !(nextButton.isEmpty || resultsLabel.isEmpty || resetButton.isEmpty)»
			<?php
			// click 'next'
			{
				«EXPAND template::visual::EventHandlers::visibleThingClickEvents(frame, true) FOR nextButton.first()»
			}
		}
		?>
	«ENDIF»
	«ENDLET»
	«ENDLET»
	«ENDLET»
«ENDDEFINE»

/**
 * Assumed to be in PHP mode.
 *
 * @param frame the current frame
 * @param direct the direct attribute, or <code>null</code>
 * @param propertyName the name of the property to select; this will first search for
 *			contained {@model Property Properties}, then contained {@model VisibleThing}s.
 * @param argName the variable to save the result into; this must not be modified
 *			if there is no value
 * @implementation Frame
 *		An RSS 2.0 {@model Frame} will search for <code>&lt;title&gt;</code>, ... properties
 *		with the following precedence: direct attribute; contained named {@model Property}; then value
 *		of contained named {@model VisibleThing}, all case insensitive.
 */
«DEFINE getProperty(model::visual::Frame frame, String direct, String propertyName, String argName) FOR model::VisibleThing-»
	«IF direct != null-»
		$«argName» = "«escapePhpString(direct)-»";
	«ELSE-»
		«IF !properties.select(p|p.name.toLowerCase() == propertyName).isEmpty-»
			$«argName» = «EXPAND template::operations::Parameters::callParameterValue(true, false) FOR properties.selectFirst(p|p.name.toLowerCase() == propertyName)»;
		«ELSE-»
			«IF !children.select(p|p.name.toLowerCase() == propertyName).isEmpty-»
				$value = null;
				«EXPAND template::visual::Render::getFieldValue(frame, "value") FOR children.selectFirst(p|p.name.toLowerCase() == propertyName)»
				if ($value !== null) {
					$«argName» = $value;
				}
			«ELSE-»
				/* unknown */
			«ENDIF-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

