#created on: 4/11/2008
package org.openiaml.model.drools.rules.email

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.domain.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

/**
 * @inference Email An {@model Email} contains a {@model Property property} named
 *		'to', if no existing {@model Property} or {@model StaticValue} exists.
 */
rule "Create 'to' property for Email"
	when
		f : Email ( to != null )
		not ( Property ( eContainer == f, name == "to" ))
		not ( StaticValue ( eContainer == f, name == "to" ))
		
		eval ( handler.veto( f ))
			
	then
		Property p = handler.generatedProperty(f, f);
		handler.setName(p, "to");
		if (f.getTo() != null) {
			handler.setDefault(p, f.getTo());
		}
		queue.add(p, drools);
		
end

/**
 * @inference Email An {@model Email} contains a {@model Property property} named
 *		'toName', if no existing {@model Property} or {@model StaticValue} exists.
 */
rule "Create 'toName' property for Email"
	when
		f : Email ( toName != null )
		not ( Property ( eContainer == f, name == "toName" ))
		not ( StaticValue ( eContainer == f, name == "toName" ))
		
		eval ( handler.veto( f ))
			
	then
		Property p = handler.generatedProperty(f, f);
		handler.setName(p, "toName");
		if (f.getToName() != null) {
			handler.setDefault(p, f.getToName());
		}
		queue.add(p, drools);
		
end

/**
 * @inference Email An {@model Email} contains a {@model Property property} named
 *		'from', if no existing {@model Property} or {@model StaticValue} exists.
 */
rule "Create 'from' property for Email"
	when
		f : Email ( from != null )
		not ( Property ( eContainer == f, name == "from" ))
		not ( StaticValue ( eContainer == f, name == "from" ))
		
		eval ( handler.veto( f ))
			
	then
		Property p = handler.generatedProperty(f, f);
		handler.setName(p, "from");
		if (f.getFrom() != null) {
			handler.setDefault(p, f.getFrom());
		}
		queue.add(p, drools);
		
end

/**
 * @inference Email An {@model Email} contains a {@model Property property} named
 *		'fromName', if no existing {@model Property} or {@model StaticValue} exists.
 */
rule "Create 'fromName' property for Email"
	when
		f : Email ( fromName != null )
		not ( Property ( eContainer == f, name == "fromName" ))
		not ( StaticValue ( eContainer == f, name == "fromName" ))
		
		eval ( handler.veto( f ))
			
	then
		Property p = handler.generatedProperty(f, f);
		handler.setName(p, "fromName");
		if (f.getFromName() != null) {
			handler.setDefault(p, f.getFromName());
		}
		queue.add(p, drools);
		
end

/**
 * @inference Email An {@model Email} contains a {@model Property property} named
 *		'subject', if no existing {@model Property} or {@model StaticValue} exists.
 */
rule "Create 'subject' property for Email"
	when
		f : Email ( subject != null )
		not ( Property ( eContainer == f, name == "subject" ))
		not ( StaticValue ( eContainer == f, name == "subject" ))
		
		eval ( handler.veto( f ))
			
	then
		Property p = handler.generatedProperty(f, f);
		handler.setName(p, "subject");
		if (f.getSubject() != null) {
			handler.setDefault(p, f.getSubject());
		}
		queue.add(p, drools);
		
end
