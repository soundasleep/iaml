
module simple2rdf;
create OUT : rdf from IN : simple, ECORE : ecore;

helper def: namespaces: Map(String, String) =
	Map {
		('simple', 'http://openiaml.org/simple#'),
		('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'),
	 	('rdfs', 'http://www.w3.org/2000/01/rdf-schema#'),
	 	('owl', 'http://www.w3.org/2002/07/owl#'),
		('xsd', 'http://www.w3.org/2001/XMLSchema#')
	}->union( -- doesn't seem to do anything yet
		simple!EPackage.allInstancesFrom('IN')->iterate(it; 
			res: Map(String, String) = Map{} |
				res->including(it.name, it.getURI())
		)
	);

-- convert any EObject into a representative URI unique to that object, 'http://example.org/model#model_512'
-- I would prefer to use simple!EObject here, but this doesn't match simple!InternetApplication,
-- although simple!NamedElement does match
helper context OclAny def: getElementID() :
	String = self.eClass().getEPackage().getNsURI() + '#model_' +
		if simple!EObject.allInstancesFrom('IN')->includes(self) 
		then simple!EObject.allInstancesFrom('IN')->asSequence()->indexOf(self)->toString()
		else 'unknown'
		endif;

-- [http://wiki.eclipse.org/ATL/User_Guide#ATL_imperative_code]
-- helper def: counter : Integer = 0;
-- in imperative code: thisModule.counter <- thisModule.counter + 1;

entrypoint rule rdfGraph() {
	to
		r : rdf!RDFGraph (
			namespaces <- thisModule.namespaces.getKeys()->collect(e | thisModule.addNamespaces(e))
		)
	
	do {
		thisModule.graph <- r;
	}
}

lazy rule addNamespaces {
	from
		s : String
		
	to
		o : rdf!Namespace (
			prefix <- s,
			URI <- thisModule.namespaces.get(s)
		)
}

rule InternetApplication {
	from
		i : simple!EObject,
		-- e : ecore!EClass ( e.isInstance(i) )
		-- the above doesn't work, because the two EClasses are actually different
		-- references; EClassImpl.isSuperTypeOf uses 'someClass == this'
		e : ecore!EClass,
		p : ecore!EPackage
		
		 ( e.name = i.eClass().name and
		 	e.getEPackage().getNsURI() = p.getNsURI() )
	
	to
		subject : rdf!Resource (
			URI <- i.getElementID(),
			graph <- thisModule.graph
		),
		t : rdf!Triple (
			subject <- subject,
			predicate <- predicate,
			object <- object,
			graph <- thisModule.graph
		),
		predicate : rdf!Property (
			URI <- 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
			graph <- thisModule.graph
		),
		object : rdf!Resource (
			URI <- p.getNsURI() + '#' + e.name,
			graph <- thisModule.graph
		)
	
}

rule EReference {
	from 
		source : simple!EObject,
		target : simple!EObject,
		
		source_class : ecore!EClass,
		
		feature : ecore!EStructuralFeature
		
		(
			if 
			
			source_class.name = source.eClass().name and
			
			source_class.eAllStructuralFeatures.contains ( feature ) then
			
			-- we can't use eGet() with a feature either, because the local
			-- featureId is different from the target featureId.
			-- (the check is if (myFeature == parameterFeature) { return featureID; })
							
			-- hack to prevent source.eGet() being evaluated when it is not
			-- a valid EFeature
			
			-- 'source.eClass().getEAllStructuralFeatures().contains(feature)' doesn't
			-- work, because the Feature is in a different source model
			
			-- if source.eClass().getEAllStructuralFeatures().exists( f | f.name = feature.name and f.featureID = feature.featureID  )
			
			--if source.eClass().getEAllStructuralFeatures().debug() <> source.eClass().getEAllStructuralFeatures().contains(feature)
			--then
				-- 'set->any(f | f)' syntax isn't supported in 'let'
				-- let myFeature : OclAny = source_class.eAllStructuralFeatures.any( f | f.name = feature.name and f.getFeatureID() = feature.getFeatureID() )
				-- in
			
				if feature.isMany() then
					if source.eGet(source.eClass().getEAllStructuralFeatures()->any( f | f.name = feature.name and f.getFeatureID() = feature.getFeatureID() )).contains(target)
					then true
					else false
					endif
				else
					if source.eGet(source.eClass().getEAllStructuralFeatures()->any( f | f.name = feature.name and f.getFeatureID() = feature.getFeatureID() )) = target
					then true
					else false
					endif
				endif
			else
				false
			endif
		)
	
	to
		subject : rdf!Resource (
			URI <- source.getElementID(),
			graph <- thisModule.graph
		),	
		predicate : rdf!Property (
			URI <- source_class.getEPackage().getNsURI() + '#' + feature.name,
			graph <- thisModule.graph
		),
		object : rdf!Resource (
			URI <- target.getElementID(),
			graph <- thisModule.graph			
		),
		t : rdf!Triple (
			subject <- subject,
			predicate <- predicate,
			object <- object,
			graph <- thisModule.graph
		)
		
}


-- "Note that a source model element of an ATL transformation should not be matched by more than one ATL matched rule"

rule PageName {
	from
		p : simple!Page
		
	to
	
		-- dataTypeURI : DataType
		-- DataType extends URIReference
		-- URIReference extends Node, URIElement
		-- Node (graph : Graph, objectOf : Triple)
		-- URIElement (URI : string)
	
		dataType : rdf!Datatype (
			URI <- 'http://www.w3.org/2001/XMLSchema#string',
			graph <- thisModule.graph
		),
		subject : rdf!Resource (
			URI <- p.getElementID(),
			graph <- thisModule.graph
		),
		predicate : rdf!Property (
			URI <- 'http://openiaml.org/simple#name',
			graph <- thisModule.graph
		),
		object : rdf!TypedLiteral (
			lexicalForm <- p.name,
			datatypeURI <- dataType,
			graph <- thisModule.graph
		),
		
		t : rdf!Triple (
			subject <- subject,
			predicate <- predicate,
			object <- object,
			graph <- thisModule.graph
		)
		
}

rule TestEcore {
	from
		e : ecore!EClass
	
	to
		subject : rdf!Resource (
			URI <- 'http://openiaml.org/simple#' + e.name,
			graph <- thisModule.graph
		),
		t : rdf!Triple (
			subject <- subject,
			predicate <- predicate,
			object <- object,
			graph <- thisModule.graph
		),
		predicate : rdf!Property (
			URI <- 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
			graph <- thisModule.graph
		),
		object : rdf!Resource (
			URI <- 'http://openiaml.org/simple#EClass',
			graph <- thisModule.graph
		)
		
}


