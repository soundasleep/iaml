#created on: 4/11/2008
package org.openiaml.verification.drools.rules.secure;

#list any import classes here.
import org.openiaml.verification.drools.*;

import org.openiaml.model.model.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;
import org.openiaml.verification.model.validation.*;
import org.eclipse.emf.ecore.EObject;

global org.openiaml.verification.model.validation.ValidationFactory factory;
global org.openiaml.verification.drools.VerifyHandler verify;

rule "Page is secure that should be secure"
	when
		session : Session ( )
		page1 : Frame ( eContainer == session )
		handler : LoginHandler ( eContainer == session )
		SecurePage ( page == page1 )
		not ( IsSecure ( page == page1 ))
	
	then
		IsSecure i = factory.createIsSecure();
		i.setPage(page1);
		insert(i);	
	
end

rule "Should be secure"
	when
		session : Session ( )
		page1 : Frame ( eContainer == session )
		handler : LoginHandler ( eContainer == session )
		not ( ShouldBeSecure ( page == page1 ))
	
	then
		ShouldBeSecure s = factory.createShouldBeSecure();
		s.setPage(page1);
		insert(s);

end

rule "Page is secure"
	when
		page1 : Frame ( )
		event : EventTrigger ( eContainer == page1, name == "access" )
		op : Operation ( )
		SecureOperation ( operation == op )
		run : ActionEdge ( from == event, to == op )
		not ( SecurePage ( page == page1 ))
		
	then
		SecurePage s = factory.createSecurePage();
		s.setPage(page1);
		insert(s);
end

rule "Operation is secure"
	when
		op : CompositeOperation ( )
		s : StartNode ( eContainer == op )
		c : CancelNode ( eContainer == op )
		SecurePath ( from == s, to == c )
		not (SecureOperation ( operation == op ))
	
	then
		SecureOperation sop = factory.createSecureOperation();
		sop.setOperation(op);
		insert(sop);

end

rule "Define secure nodes"
	when
		o : DecisionNode ( )
		not (SecureNode ( node == o ))
	
	then
		SecureNode node = factory.createSecureNode();
		node.setNode(o);
		insert(node);

end

rule "Execution path"
	when
		a : ExecutionEdgesSource ( )
		b : ExecutionEdgeDestination ( eval(a != b) )
		edge : ExecutionEdge ( from == a, to == b )
		not (ExecutionPath ( from == a, to == b) )
	
	then
		ExecutionPath path = factory.createExecutionPath();
		path.setFrom(a);
		path.setTo(b);
		insert(path);

end

rule "Execution path TC"
	when
		a : ExecutionEdgesSource ( )
		b : EObject ( eval(b != a) )
		c : ExecutionEdgeDestination ( eval(b != c && c != a) ) 
		p1 : ExecutionPath ( from == a, to == b )
		p2 : ExecutionPath ( from == b, to == c )
		not ( ExecutionPath ( from == a, to == c ))
		
	then
		ExecutionPath path = factory.createExecutionPath();
		path.setFrom(a);
		path.setTo(c);
		insert(path);
	
end

rule "Secure Path"
	when
		a : ExecutionEdgesSource ( )
		b : EObject ( eval(b != a) )
		n : ExecutionEdgeDestination ( eval(n != a && n != b) )
		node : SecureNode ( node == n )
		p1 : ExecutionPath ( from == a, to == n)
		p2 : ExecutionPath ( from == n, to == b)
		not ( SecurePath ( from == a, to == b ))
		
	then
		SecurePath path = factory.createSecurePath();
		path.setFrom(a);
		path.setTo(b);
		insert(path);

end

rule "Validation check"
	when
		page1 : Frame ( )
		shouldBe : ShouldBeSecure ( page == page1 )
		not (IsSecure ( page == page1 ))
		not (Violation ( reason == "Secured page is not secure", source == shouldBe ))
		
	then
		Violation v = factory.createViolation();
		v.setReason("Secured page is not secure");
		v.setSource(shouldBe);
		verify.failed(v);
		insert(v);

end

rule "Validation check (retract)"
	when
		page1 : Frame ( )
		shouldBe : ShouldBeSecure ( page == page1 )
		violation : Violation ( reason == "Secured page is not secure", source == shouldBe )
		IsSecure ( page == page1 );
		
	then
		verify.retract(violation);
		retract(violation);	

end


