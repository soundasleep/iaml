«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

/* default = nothing */
«DEFINE expandFrame FOR model::ApplicationElement-»
«ENDDEFINE»

/**
 * @implementation Gate,Scope
 *		{@model Gate}s are of a lower priority in execution than {@model EventTrigger}s.
 *		That is, {@model Scope#onAccess} will execute before any {@model Gate}s are executed.
 */
«DEFINE expandFrame FOR model::visual::Frame-»
	«FILE "output/"+safeNameString(id)+".php"-»
<?php
/* generated frame "«name-»" */
«EXPAND template::Template::commonHeader("", "Frame: " + id) FOR getRoot()»

«REM»TODO should this be safeNameString(id), as per JS below?«ENDREM»
define("CURRENT_PAGE", "«safeName()»");
function get_frame_id() {
	return CURRENT_PAGE;
}

«EXPAND Common::commonPHPIncludes FOR getRoot()-»

// is this frame the result of a remote operation call; i.e. do we need
// to catch redirects to pass along to the client?
if (require_get("redirect_on_client", "")) {
	define('REDIRECT_ON_CLIENT', true);
}

// a default fail handler for this frame?
«IF getFailHandler(this) != null»
	function frame_fail_handler($e) {
		«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(this)»
		die;
	}
	set_exception_handler('frame_fail_handler');
«ENDIF»

// a default fail handler for this session?
«IF containingSession() != null && getFailHandler(containingSession()) != null»
	function session_fail_handler($e) {
		«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(containingSession())»
		die;
	}
	set_exception_handler('session_fail_handler');
«ENDIF»

// initialise default values for any fields
«EXPAND initialiseDefaultValues FOREACH children»

// run any event triggers for this session
«IF containingSession() != null»
	// init
	if (!has_session("session_init", false)) {
		$_SESSION["session_init"] = true; /* this MUST execute before we start any events, or else we can easily call ourselves and get stuck in an infinite loop */

	«REM»any fail/exception handlers?«ENDREM»
	«IF containingSession().onInit != null»
		«IF getFailHandler(containingSession()) != null»
			try {
		«ENDIF»
		«EXPAND template::events::Session::runSessionEvents('init') FOR containingSession().onInit-»
		«IF getFailHandler(containingSession()) != null»
			} catch (IamlRuntimeException $e) {
				// only expand the first fail handler
				«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(containingSession())»
			}
		«ENDIF»
	«ENDIF»
	}

	// access
	«IF containingSession().onAccess != null»
		«IF getFailHandler(containingSession()) != null»
			try {
		«ENDIF»
		«EXPAND template::events::Session::runSessionEvents('access') FOR containingSession().onAccess-»
		«IF getFailHandler(containingSession()) != null»
			} catch (IamlRuntimeException $e) {
				// only expand the first fail handler
				«EXPAND template::operations::Failure::failWire(true) FOR getFailHandler(containingSession())»
			}
		«ENDIF»
	«ENDIF»
«ENDIF»

// run any event triggers for this frame
// exceptions are now covered by the exception handlers above
«EXPAND template::events::Frame::runFrameEvents('init') FOREACH {onInit}-»

// all 'onAccess' events in this frame, and all children
«EXPAND getAllOnAccessEvents»

// run any entry gates connected to the containing scope(s)
«EXPAND template::scopes::EntryGate::runEntryGate FOREACH getFrameEntryGates(this)-»

// is access to this frame prevented by any other exit gate?
«EXPAND template::scopes::ExitGate::runExitGate FOREACH getAllExitGates(this)-»

// expand any AccessControlHandlers in the frame
«EXPAND template::users::Definitions::accessControlHandlerDefinitions(true) FOR this-»

«IF containingSession() != null»
	// expand any AccessControlHandlers in the session
	«EXPAND template::users::Definitions::accessControlHandlerDefinitions(true) FOR containingSession()-»
«ENDIF»

// allow remote execution of operations
if (require_get("operation", "")) {
	// TODO may be a security problem
	$operation_name = "do_" . require_get("operation");
	$arg0 = require_get("arg0");
	$arg1 = require_get("arg1");
			
	// any running functions? (prevent infinite loops)
	register_running_functions();

	log_message("«name».php: Remote operation $operation_name('$arg0', '$arg1')");
	$operation_name($arg0, $arg1);
	log_message("«name».php: Remote operation $operation_name('$arg0', '$arg1') complete");

	echo "ok";
	die;
}

log_message("«id».php: User browsing started");

log_message("«id».php: Session data: " . print_r($_SESSION, true));

«REM»
	we now switch to a different renderer, based on the given frame type
«ENDREM»

«IF render.toString() == "HTML"»
	«EXPAND template::renders::FrameHtml::renderFrameAsHTML»
«ELSEIF render.toString() == "RSS20"»
	«EXPAND template::renders::FrameRss20::renderFrameAsRSS20»
«ELSE»
	«throwException("Unexpected render target: " + render)»
«ENDIF»
<?php
log_message("«name».php: User browsing finished");
?>
	«ENDFILE»
«ENDDEFINE»

/**
 * Execute all 'onAccess' events for this frame and all children.
 * @implementation Frame
 *		When a {@model Frame} is loaded, all {@model Accessible#onAccess} {@model EventTrigger events}
 *		for the frame and its {@model Frame#children}, recursively, are executed.
 */
«DEFINE getAllOnAccessEvents FOR model::VisibleThing»
	«IF onAccess != null»
		// onAccess for '«safeNameString(name)»'
		«EXPAND template::events::EventCall::callEvent(true) FOR onAccess»
		«EXPAND getAllOnAccessEvents FOREACH children»
	«ENDIF»
«ENDDEFINE»

«DEFINE getAllOnAccessEvents FOR model::visual::Frame»
	«IF onAccess != null»
		// onAccess for '«safeNameString(name)»'
		«EXPAND template::events::EventCall::callEvent(true) FOR onAccess»
		«EXPAND getAllOnAccessEvents FOREACH children»
	«ENDIF»
«ENDDEFINE»

/* default values that we should set before we access this frame */
«DEFINE initialiseDefaultValues FOR model::VisibleThing»
	«EXPAND initialiseDefaultValues FOREACH children»
«ENDDEFINE»

«DEFINE initialiseDefaultValues FOR model::visual::InputTextField»
	/* text field "«this.name-»" */
	«IF fieldValue != null»
		«EXPAND initialiseDefaultValueProperty FOR fieldValue»
	«ENDIF»
	«EXPAND initialiseDefaultValues FOREACH children»
«ENDDEFINE»

«DEFINE initialiseDefaultValueProperty FOR model::Property»
	«IF defaultValue != null && defaultValue.length > 0»
		initialize_application_value_default("«safeName()-»",
			"«escapePhpString(defaultValue)-»");		«REM»TODO encode«ENDREM»	
	«ENDIF»
«ENDDEFINE»
