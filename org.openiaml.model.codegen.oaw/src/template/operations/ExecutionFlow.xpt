«IMPORT iaml»

/**
 * The flow of execution within an operation.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * TODO unresolved: How to handle multiple outExecutions within PHP and JS.
 * 
 * Option: Start new threads, though this could be challenging for Javascript, and it
 * will also introduce concurrency issues.  
 */
«DEFINE executionFlow(model::visual::Page container, Boolean php) FOR model::operations::StartNode-»
	// flow starts here
	«FOREACH outExecutions AS e-»
		«EXPAND executionFlowStep(container, php) FOR e.to-»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE executionFlow(model::visual::Page container, Boolean php) FOR model::ActivityNode-»
	// nothing for an activity node
«ENDDEFINE»

/**
 * The individual steps within a flow.
 */
 
/* an edge that is the end (both StartNode and FinishNode also fall into this) */
«DEFINE executionFlowStep(model::visual::Page container, Boolean php) FOR model::ExecutionEdgeDestination-»
	// do nothing «this-»
«ENDDEFINE»

«DEFINE executionFlowStep(model::visual::Page container, Boolean php) FOR model::operations::CancelNode-»
	«IF exceptionText.length > 0»
		«IF php»
		throw new IamlRuntimeException("«exceptionText»");
		«ELSE»
		throw new IamlJavascriptException("«exceptionText»");
		«ENDIF»
	«ELSE»
		// ignored cancel node "«this»"
	«ENDIF»
«ENDDEFINE»

/* a chained operation: carry on */
«DEFINE executionFlowStep(model::visual::Page container, Boolean php) FOR model::ChainedOperation-»
	// chained operation «name-»
	«EXPAND Contents::operationContents(container, php) FOR this-»
	«FOREACH outExecutions AS e-»
		«EXPAND executionFlowStep(container, php) FOR e.to-»
	«ENDFOREACH»
	
	// continue chained operations
	«EXPAND continueChainedOperations(php) FOR this»
«ENDDEFINE»

/* a decision operation: expandOperationContents will continue the execution flow */
«DEFINE executionFlowStep(model::visual::Page container, Boolean php) FOR model::operations::DecisionOperation-»
	// decision operation «name-»
	«EXPAND Contents::operationContents(container, php) FOR this-»

	// continue chained operations
	«EXPAND continueChainedOperations(php) FOR this»
«ENDDEFINE»

/**
 * Continue operations chained onto the current one.
 * TODO more documentation required. When are chained conditions used?
 */
«DEFINE continueChainedOperations(Boolean php) FOR model::ChainedOperation-»
	«EXPAND continueChainedOperations(php) FOREACH outEdges»
«ENDDEFINE»

«DEFINE continueChainedOperations(Boolean php) FOR model::WireEdge»
	«EXPAND exception FOR throwException("Cannot continue a chained operation for " + this)»
«ENDDEFINE»

«DEFINE continueChainedOperations(Boolean php) FOR model::wires::NavigateWire»
	«IF name != "fail"»
		«IF php»
			«IF to.metaType.isAssignableFrom(model::visual::Page)»
			/* prevent infinite loops on the current page */
			if ("«((model::visual::Page) to).id»" != CURRENT_PAGE) {
			«ELSE»
			if (true) {
			«ENDIF»
				// navigate to another page
				$url = "«safeName(to)».php";
				log_message("Redirecting to '$url'");
				header("Location: $url");
				die;
			}
		«ELSE»
			// navigate to another page
			var url = "«safeName(to)».php";
			debug("Redirecting to '" + url + "'");
			window.location = url;
		«ENDIF»
	«ELSE»
		// ignoring fail wire
	«ENDIF»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
