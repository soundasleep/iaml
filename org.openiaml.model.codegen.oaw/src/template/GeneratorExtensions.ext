import iaml;

extension metamodel::Extensions reexport;

pageTitle(model::InternetApplication this) :
	if name == null || name == "" then "(untitled application)" else name.toFirstUpper();

pageTitle(model::visual::Page this) :
	if name == null || name == "" then id else name;

formName(model::visual::InputForm this) :
	if (name == null || name == "") then "(untitled form)" else name;
	
textFieldName(model::visual::InputTextField this) :
	if (name == null || name == "") then "(untitled field)" else name;
	
safeName(model::NamedElement this) :
	safeName(id);

safeName(String s) :
	s.replaceAll("[^A-Za-z0-9]", "_");

safeName(emf::EObject this) :
	"unexpected eobject " + this;

operationName(model::WireEdgeDestination this) : 
	"impossible";

operationName(model::Operation this) :
	safeName(this);
	
/* is this operation contained in the current page? */
model::visual::Page containingPage(model::visual::Page element) :
	element;
	
model::visual::Page containingPage(model::NamedElement element) :
	containingPage(element.eContainer);

/* default for any EObject */
model::visual::Page containingPage(emf::EObject element) :
	null;

onCurrentPage(model::WireEdgesSource pageElement, model::WireEdgeDestination target) :
	containingPage(pageElement) != null && 
	containingPage(pageElement) == containingPage(target);

/**
 * Get all the operations that may be referenced in a container. In particular:
 * - Any operations in the page/container
 * - Any operations in the elements contained in this page/container
 * - Any operations contained in the direct parent scope (if any)
 */
allContainerOperations(model::ApplicationElementContainer this) :
	operations.addAll( children.allContainerOperations().flatten() ).addAll( possibleParentOperations(eContainer) ) ;

allContainerOperations(model::ApplicationElement this) :
	operations;

/* for a page that is part of a session/scope */
possibleParentOperations(model::scopes::Session this ) :
	operations;

possibleParentOperations(emf::EObject this ) :
	{};

/* get the start node for an operation */
startNode(model::CompositeOperation this) :
	nodes.selectFirst( node | node.metaType.isAssignableFrom(model::operations::StartNode) );

/* get the next execution flow for a decision operation that has passed */
passedExectionFlow(model::operations::DecisionOperation this) :
	outExecutions.selectFirst( flow | !flow.to.metaType.isAssignableFrom(model::operations::CancelNode) );

failedExectionFlow(model::operations::DecisionOperation this) :
	outExecutions.selectFirst( flow | flow.to.metaType.isAssignableFrom(model::operations::CancelNode) );

/** does this operation have a "fail" edge? */
getFailEdge(model::CompositeOperation this) :
	outEdges.selectFirst( e | e.isFailEdge() ) ;

isFailEdge(model::WireEdge this ) :
	false;
	
isFailEdge(model::wires::CompositeWire this ) :
	name == "fail" ;
	