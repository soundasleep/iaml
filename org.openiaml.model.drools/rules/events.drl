#created on: 4/11/2008
package org.openiaml.model.drools.rules.events

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.domain.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

# @inference Button A {@model Button} contains an {@model EventTrigger} named 'click'. 
rule "Create 'click' event trigger for button"
	when
		f : Button( )
		not (event : EventTrigger( f.onClick == event ))
				
		eval ( handler.veto( f ))
			
	then

		EventTrigger event = handler.generatedEventTriggerOnClick(f, f);
		queue.add(event, drools);
		
end

# @inference Editable,InputTextField,DomainAttribute An {@model Editable} thing contains an {@model EventTrigger} named 'edit'. 
rule "Create 'edit' event trigger for Editable things"
	when
		f : Editable( )
		g : GeneratesElements ( eval(f == g) )
		not (event : EventTrigger( f.onChange == event ))
				
		eval ( handler.veto( g ))
			
	then
		EventTrigger event = handler.generatedEventTriggerOnChange(g, f);
		queue.add(event, drools);
		
end

# @inference Accessible,InputTextField An {@model Accessible} thing contains an {@model EventTrigger} named 'access'.
rule "Create 'access' event trigger for Accessible things"
	when
		f : Accessible( )
		g : GeneratesElements ( eval(f == g) )
		not (event : EventTrigger( f.onAccess == event ))
				
		eval ( handler.veto( g ))
			
	then
		handler.veto(g);
		EventTrigger event = handler.generatedEventTriggerOnAccess(g, f);
		queue.add(event, drools);
		
end
