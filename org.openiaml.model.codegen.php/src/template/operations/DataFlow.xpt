«IMPORT iaml»

/**
 * The flow of data within an operation.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Data sources
 */
«DEFINE dataSource(Boolean php) FOR model::DataFlowEdgesSource»
	«throwException("Unknown data flow edge source for dataSource: " + this)»
«ENDDEFINE»

/**
 * Inline arithmetic.
 */
«DEFINE dataSource(Boolean php) FOR model::operations::Arithmetic»
	«IF operationType.toString() == "ADD"»
		«IF php»
			«REM»we can just use PHP's operators; they force + to work only on numbers«ENDREM»
			«EXPAND dataSource(php) FOREACH inFlows.from SEPARATOR " + "»
		«ELSE»
			«REM»in Javascript, we have to translate them all into floats directly«ENDREM»
			«EXPAND convertToFloat FOREACH inFlows.from SEPARATOR " + "»
		«ENDIF»
	«ELSEIF operationType.toString() == "SUBTRACT"»
		«IF php»
			«REM»we can just use PHP's operators; they force + to work only on numbers«ENDREM»
			«EXPAND dataSource(php) FOREACH inFlows.from SEPARATOR " - "»
		«ELSE»
			«REM»in Javascript, we have to translate them all into floats directly«ENDREM»
			«EXPAND convertToFloat FOREACH inFlows.from SEPARATOR " - "»
		«ENDIF»
	«ELSEIF operationType.toString() == "MULTIPLY"»
		«IF php»
			«REM»we can just use PHP's operators; they force + to work only on numbers«ENDREM»
			«EXPAND dataSource(php) FOREACH inFlows.from SEPARATOR " * "»
		«ELSE»
			«REM»in Javascript, we have to translate them all into floats directly«ENDREM»
			«EXPAND convertToFloat FOREACH inFlows.from SEPARATOR " * "»
		«ENDIF»
	«ELSEIF operationType.toString() == "DIVIDE"»
		«IF php»
			«REM»we can just use PHP's operators; they force + to work only on numbers«ENDREM»
			«EXPAND dataSource(php) FOREACH inFlows.from SEPARATOR " / "»
		«ELSE»
			«REM»in Javascript, we have to translate them all into floats directly«ENDREM»
			convert_to_nan(«EXPAND convertToFloat FOREACH inFlows.from SEPARATOR " / "»)
		«ENDIF»
	«ELSE»
		«throwException("Unknown arithmetic: " + this)»
	«ENDIF»
«ENDDEFINE»

// TODO need to wrap value in some sort of encoding algorithm
«DEFINE dataSource(Boolean php) FOR model::StaticValue»
	"«value-»" /* static value "«safeName()-»" */ 
«ENDDEFINE»

«DEFINE dataSource(Boolean php) FOR model::Parameter»
	«IF php»
	$«safeName()»
	«ELSE»
	«safeName()-»
	«ENDIF»
«ENDDEFINE»

«DEFINE dataSource(Boolean php) FOR model::TemporaryVariable»
	«IF php»
	$temp_«safeName()»
	«ELSE»
	temp_«safeName()-»
	«ENDIF»
«ENDDEFINE»

/**
 * A cast value.
 */
«DEFINE dataSource(Boolean php) FOR model::operations::CastNode»
	do_cast(
		«IF inFlows.size != 1»
			«throwException("Incorrect number of arguments for cast source:" + inFlows.size)»
		«ENDIF»
		«EXPAND DataFlow::dataSource(php) FOREACH inFlows.from-»,
		
		«LET outFlows.select(o | isCastDestination(o.to)) AS targets»
			«IF targets.size != 1»
				«throwException("Too many cast targets for castNode " + this + ": " + targets.size)»
			«ENDIF»
			«EXPAND DataTypes::getDataType(php) FOREACH targets.to-»
		«ENDLET»
	)
«ENDDEFINE»

/**
 * A data source from an Property.
 *
 * Not sure if this implementation completely works; operations should
 * specify incoming data as parameters, and not reference properties directly.
 *
 * In particular, the <code>null</code> parameter will probably cause
 * problems later...
 */
«DEFINE dataSource(Boolean php) FOR model::Property»
	«EXPAND template::operations::Parameters::callParameterValue(php, false) FOR this»
«ENDDEFINE»

/**
 * Data targets
 */
«DEFINE dataTarget(Boolean php) FOR model::DataFlowEdgeDestination»
	«throwException("Unknown data flow edge target for dataTarget: " + this)»
«ENDDEFINE»

«DEFINE dataTarget(Boolean php) FOR model::Property»	
	«EXPAND dataTargetContainer(php, this) FOR eContainer»
«ENDDEFINE»

«DEFINE dataTargetContainer(Boolean php, model::Property property) FOR emf::EObject»
	«throwException("Unknown property container: " + this)»
«ENDDEFINE»
«DEFINE dataTargetContainer(Boolean php, model::Property property) FOR model::visual::InputTextField»
	document.getElementById('«safeNameString(id)»').value
«ENDDEFINE»
«DEFINE dataTargetContainer(Boolean php, model::Property property) FOR model::visual::Button»
	document.getElementById('«safeNameString(id)»').value
«ENDDEFINE»
«DEFINE dataTargetContainer(Boolean php, model::Property property) FOR model::visual::Label»
	document.getElementById('«safeNameString(id)»<?php echo «EXPAND template::visual::Label::getIteratorListIndex»; ?>').innerHTML
«ENDDEFINE»

/**
 * Quick helper code to translate a value into a floating point number, to force
 * Javascript to use number arithmetic on it.
 *
 * Uses JS parseFloatOrZero() from Runtime JS.
 */
«DEFINE convertToFloat FOR model::DataFlowEdgesSource»
	parse_float_or_zero(«EXPAND dataSource(false) FOR this»)
«ENDDEFINE»

/**
 * Should any additional methods be called after setting a particular property?
 */
«DEFINE dataTargetOnChange(Boolean php) FOR model::DataFlowEdgeDestination»
	«throwException("Unknown data flow edge target for dataTargetOnChange: " + this)»
«ENDDEFINE»

«DEFINE dataTargetOnChange(Boolean php) FOR model::Property»	
	«EXPAND dataTargetOnChangeContainer(php, this) FOR eContainer»
«ENDDEFINE»

«DEFINE dataTargetOnChangeContainer(Boolean php, model::Property property) FOR emf::EObject»
	«REM»by default, does nothing«ENDREM»
«ENDDEFINE»

/**
 * Data sources - are the sources set? Only supports Property.
 *
 * @implementation DecisionCondition The 'is set?' {@model DecisionCondition} 
 *	only supports incoming {@model Property ApplicationElementProperties}
 *	as {@model DataFlowEdge parameters}.   
 */
«DEFINE isSet(Boolean php) FOR model::DataFlowEdgesSource»
	«throwException("Unknown data flow edge source for isSet: " + this)»
«ENDDEFINE»

«DEFINE isSet(Boolean php) FOR model::Property»
	«EXPAND template::operations::Parameters::isSetParameter(php) FOR this»
«ENDDEFINE»
