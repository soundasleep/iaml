«IMPORT iaml»

/**
 * Methods for modifying the current iterator when browsing through object instances.
 * All of this code is expected to execute on the server.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * @implementation DomainIterator
 *		The current offset of browsing {@model DomainIterator instances} is stored
 *		in the containing {@model Session} if there is one, otherwise globally.
 * @implementation DomainIterator
 *		{@model DomainIterator#empty} will return <code>true</code> even if
 *		the current arguments are not even set; i.e. it will fail silently.
 */
«DEFINE iterateDefinitions FOR model::domain::DomainIterator-»
	/**
	 * Cycle through all attributes and call onChange. Will fail if it
	 * is out of bounds.
	 */
	function call_all_attribute_change_events_«safeName()-»() {
		«IF currentInstance == null»
			// current instance is null
		«ELSE»
			«FOREACH currentInstance.featureInstances.typeSelect(domain::DomainAttributeInstance) AS a»
			«IF a.onChange != null»
				«REM»
					we don't check to see that it is valid, because we want it
					to fail. if you don't want the change to fail, you should use
					the runtime 'hasNext/hasPrevious/empty' operations.
				«ENDREM» 
				«EXPAND template::events::EventCall::callEvent(true) FOR a.onChange»
			«ENDIF»
			«ENDFOREACH»
		«ENDIF»
	}
	
	$current_offset_«safeName()» = 0;
	
	/**
	 * Get the current instance cursor offset.
	 */
	function get_current_offset_«safeName()»() {
		«IF containingSession(this) == null»
			return get_application_value("instance_«safeName()-»_offset", 0);
		«ELSE»
			return require_session("«safeName(containingSession())-»_instance_«safeName()-»_offset", 0);
		«ENDIF»
	}
	
	/**
	 * Set the current instance cursor offset.
	 */
	function set_current_offset_«safeName()»($n) {
		«IF containingSession(this) == null»
			set_application_value("instance_«safeName()-»_offset", $n);
		«ELSE»
			$_SESSION["«safeName(containingSession())-»_instance_«safeName()-»_offset"] = $n;
		«ENDIF»
		call_all_attribute_change_events_«safeName()-»();
	}
	
	/**
	 * Increment the current instance cursor offset. Will fail if it
	 * is out of bounds.
	 */
	function object_instance_next_«safeName()»() {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->next();
		call_all_attribute_change_events_«safeName()-»();
	} 

	/**
	 * Decrement the current instance cursor offset. Will fail if it
	 * is out of bounds.
	 */
	function object_instance_previous_«safeName()»() {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->previous();
		call_all_attribute_change_events_«safeName()-»();
	} 
	
	/**
	 * Reset the current instance cursor offset. Will fail if it
	 * is out of bounds.
	 */
	function object_instance_reset_«safeName()»() {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->reset();
		call_all_attribute_change_events_«safeName()-»();
	} 

	/**
	 * Increment the current instance cursor offset by the given
	 * number of results. Will fail if it is out of bounds.
	 */
	function object_instance_skip_«safeName()»($n) {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->skip($n);
		call_all_attribute_change_events_«safeName()-»();
	} 
	
	/**
	 * Set the cursor to the given value. Will fail if it is out of bounds.
	 */
	function object_instance_jump_«safeName()»($n) {
		$iterator = DomainIterator_«safeName()»::getInstance();
		$iterator->jump($n);
		call_all_attribute_change_events_«safeName()-»();
	} 
	
	/**
	 * Can we call 'next' without causing an error?
	 */
	function can_object_instance_next_«safeName()»() {
		$iterator = DomainIterator_«safeName()»::getInstance();
		return $iterator->hasNext();
	}
	
	/**
	 * Can we call 'previous' without causing an error?
	 */
	function can_object_instance_previous_«safeName()»() {
		$iterator = DomainIterator_«safeName()»::getInstance();
		return $iterator->hasPrevious();
	}
	
	/**
	 * Is the current result set empty?
	 */
	function is_object_instance_empty_«safeName()»() {
		return !has_object_instance_«safeName()»();
	}

«ENDDEFINE»

/**
 * @implementation DomainAttributeInstance
 *		The current offset of browsing {@model DomainAttributeInstance instances} is stored
 *		in the containing {@model Session} if there is one, otherwise globally.
 */
«DEFINE iterateDefinitions FOR domain::DomainAttributeInstance-»
	/**
	 * Cycle through all attributes and call onChange. Will fail if it
	 * is out of bounds.
	 */
	function call_all_attribute_change_events_«safeName()-»() {
		«IF onChange != null»
			«REM»
				we don't check to see that it is valid, because we want it
				to fail. if you don't want the change to fail, you should use
				the runtime 'hasNext/hasPrevious/empty' operations.
			«ENDREM» 
			«EXPAND template::events::EventCall::callEvent(true) FOR onChange»
		«ENDIF»
	}
	
	$current_offset_«safeName()» = 0;
	
	/**
	 * Get the current instance cursor offset.
	 */
	function get_current_offset_«safeName()»() {
		«IF containingSession(this) == null»
			return get_application_value("instance_«safeName()-»_offset", 0);
		«ELSE»
			return require_session("«safeName(containingSession())-»_instance_«safeName()-»_offset", 0);
		«ENDIF»
	}
	
	/**
	 * Set the current instance cursor offset.
	 */
	function set_current_offset_«safeName()»($n) {
		«IF containingSession(this) == null»
			set_application_value("instance_«safeName()-»_offset", $n);
		«ELSE»
			$_SESSION["«safeName(containingSession())-»_instance_«safeName()-»_offset"] = $n;
		«ENDIF»
		call_all_attribute_change_events_«safeName()-»();
	}

«ENDDEFINE»
