«IMPORT iaml»

/**
 * The flow of execution within an operation.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * TODO unresolved: How to handle multiple outExecutions within PHP and JS.
 * 
 * Option: Start new threads, though this could be challenging for Javascript, and it
 * will also introduce concurrency issues.
 *
 * @param operation is the current operation flow from an operation? if false, it is from a condition.
 * @implementation StartNode,ExecutionEdge 
 *		If a {@model StartNode} has more than one {@model ExecutionEdge} coming out of it, they will be executed sequentially.  
 */
«DEFINE executionFlow(Boolean operation, Boolean php) FOR model::operations::StartNode-»
	«EXPAND executionFlowInternal(operation, php, outExecutions) FOR this»
«ENDDEFINE»

«DEFINE executionFlowInternal(Boolean operation, Boolean php, List[model::operations::ExecutionEdge] edges) FOR model::operations::ExecutionEdgesSource-»
	// flow starts here
	«REM»
	/**
	 * Since Javascript does not support GOTO, we must emulate this manually.
	 * We also implement this in PHP to unify the approach.
	 * 
	 * TODO Ideally we would take the execution graph and translate it sensibly
	 * into a correct structure of blocks, but this remains future work.
	 */
	// we emulate goto using an infinite loop of switch(pos)
	«ENDREM»
	«REM»initialise stack«ENDREM»
	«IF php»
		$call_stack_«safeName()» = new CallStack();
		$completed_«safeName()» = false;
	«ELSE»
		var call_stack_«safeName()» = new CallStack();
		var completed_«safeName()» = false;
	«ENDIF»
	
	«REM»all of the initial outgoing executions are inserted onto the stack initially«ENDREM»
	«FOREACH edges AS e»
		«EXPAND addStack(this, php) FOR e»
	«ENDFOREACH»
	
	«REM»loop over stack until it is complete«ENDREM»
	«IF php»
		while (!$completed_«safeName()») {
			$current_node_«safeName()» = $call_stack_«safeName()»->pop();
			switch ($current_node_«safeName()») {
	«ELSE»
		while (!completed_«safeName()») {
			var current_node_«safeName()» = call_stack_«safeName()».pop();
			switch (current_node_«safeName()») {
	«ENDIF»
	
			«FOREACH allDestinations(this, {}) AS dest»
				case "«safeName(dest)»":
					«EXPAND executionFlowStep(operation, this, php) FOR dest»
					break;
			«ENDFOREACH»
			
				default:
					«IF php»
						throw new IamlRuntimeException("Unexpected state: " . $current_node);
					«ELSE»
						throw new IamlJavascriptException("Unexpected state: " + current_node);
					«ENDIF»
				}
			}
	«REM»
	// all destinations 2:
	/*
	 * «allDestinations(this, {})»
	 */
	«ENDREM»
«ENDDEFINE»

«DEFINE executionFlow(Boolean operation, Boolean php) FOR model::ActivityNode-»
	// nothing for an activity node
«ENDDEFINE»

/**
 * Converts an ExecutionEdge into an operation on the call stack.
 */
«DEFINE addStack(model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::ExecutionEdge»
	«IF php»$call_stack_«safeName(start)»->push«ELSE»call_stack_«safeName(start)».push«ENDIF»
	("«safeName(to)-»");
«ENDDEFINE»

«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR emf::EObject-»
	/* disabled */
	«REM»
	// all destinations 1:
	/*
	 * «allDestinations(this, {})»
	 */
	«ENDREM»
«ENDDEFINE»

/**
 * The individual steps within a flow.
 */
«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::ExecutionEdgeDestination-»
	«throwException("Unknown operation contents node: " + this)»
«ENDDEFINE»

«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::CancelNode-»
	«IF operation»
		«REM»operations will throw exceptions at CancelNodes«ENDREM»
		«IF exceptionText.length > 0»
			«IF php»
			throw new IamlRuntimeException("«exceptionText»");
			«ELSE»
			throw new IamlJavascriptException("«exceptionText»");
			«ENDIF»
		«ELSE»
			// ignored cancel node "«this»" since it did not have an exception text
		«ENDIF»
	«ELSE»
		«REM»conditions will return false at CancelNodes«ENDREM»
		return false;
	«ENDIF»
«ENDDEFINE»

«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::StartNode-»
	«throwException("Should never have the executionFlowStep start at a StartNode: use executionFlow.")»
«ENDDEFINE»

«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::FinishNode-»
	// operation finished successfully
	«IF operation»
		«REM»operations will continue at FinishNodes (to let threads finish)«ENDREM»
		«IF php»
			$completed_«safeName(start)» = true;
		«ELSE»
			completed_«safeName(start)» = true;
		«ENDIF»
	«ELSE»
		«REM»conditions will return true at FinishNodes (TODO threads don't need to finish?)«ENDREM»
		return true;
	«ENDIF»
«ENDDEFINE»

/**
 * We implement split nodes lazily; each branch is executed in sequence.
 *
 * Each split node will continue execution as normal until it reaches a
 * JoinNode, then it will stop.
 *
 * The second part of this template will iterate down the first split
 * path until it finds a JoinNode; we define this as the end of the split,
 * and continue execution from there.
 *
 * This assumes that all splits and joins occur with the same edges, etc. 
 *
 * TODO: What about recursive split/joins? 
 * TODO: What about multi level split/joins? e.g.
 *       |-> b ->|-> f ->|
 *   a ->|-> c ->|       |-> g
 *       |-> d ----> e ->|
 */ 
# @implementation SplitNode,JoinNode Currently execution split is implemented in a single threaded way; each {@model ExecutionEdge execution flow} is executed sequentially until all flows are complete. 
«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::SplitNode-»
	/* a split node */
	
	«REM»
		disable function_queue until we get to the end.
		this is necessary, otherwise all split functions in
		here will call the same function_queue multiple times.
	
		one side effect of this is that any splitted "set" operations
		will only get to the first "set" operation before
		the function queue (which may be a redirect to another frame)
		executes, so the other "set" operations would not complete.	
	«ENDREM»
	«IF !php»
		«REM»
		// disable function queue over split
		var function_queue_split_«safeName()» = function_queue;
		var function_queue_queued_split_«safeName()» = function_queue_queued;
		function_queue = function() { };
		function_queue_queued = false;
		«ENDREM»

		/* we wrap up the function queue in N layers, so we
		 can progressively unwrap it as it is executed */
		
		var function_queue_wrapped_«safeName()» = function_queue;
		var function_queue_wrapped_«safeName()»_count = «outExecutions.size»;
		
		function_queue = function() {
			function_queue_wrapped_«safeName()»_count--;
			
			if (function_queue_wrapped_«safeName()»_count == 0) {
				function_queue_wrapped_«safeName()»();	// execute it
			} else if (function_queue_wrapped_«safeName()»_count < 0) {
				throw new IamlJavascriptException("Ran out of function queue wrapping: «this»");
			} else {
				// expected
			}
		}
	«ENDIF»
	
		
	«REM»
		we emulate split nodes by adding additional layers of
		call stacks, in a similar way to StartNode, for each
		outgoing edge
	«ENDREM»
	«FOREACH outExecutions AS e-»
		«EXPAND executionFlowInternal(operation, php, {e}) FOR this» 
	«ENDFOREACH»

	«REM»
		find the target join node for this split node; this is
		where execution will continue (and set the next step
		in the call stack)
	«ENDREM»
	// final join node = «findFinalJoinNode(this)»
	«IF findFinalJoinNode(this) != null»
		«REM»
		«EXPAND executionFlowStep(operation, start, php) FOR findFinalJoinNode(this)»
		«ENDREM»
		
		«REM»continue«ENDREM»
		«FOREACH findFinalJoinNode(this).outExecutions AS e-»
			«EXPAND ExecutionFlow::addStack(start, php) FOR e»
		«ENDFOREACH»
	«ELSE»
		«throwException("No join node found for split node '" + this + "'")»
	«ENDIF»
	
	«REM»
	«IF !php»
		// restore function queue after split
		function_queue = function_queue_split_«safeName()»;
		function_queue_queued = false;
	«ENDIF»
	«ENDREM»

«ENDDEFINE»

«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::JoinNode-»
	// split finished successfully
	«IF php»
		$completed_«safeName(start)» = true;
	«ELSE»
		completed_«safeName(start)» = true;
	«ENDIF»
«ENDDEFINE»

/* a SetNode */
«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::SetNode-»
	«EXPAND Contents::setOperation(start, php) FOR this»
	
	«REM»Contents::operationContents() will expand outgoing executions as necessary«ENDREM»
«ENDDEFINE»

/* a primitive operation: carry on */
«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::BuiltinOperation-»
	// primitive operation "«name-»"
	«EXPAND Contents::operationContents(start, php) FOR this-»
	
	«REM»Contents::operationContents() will expand outgoing executions as necessary«ENDREM»
	
	// continue chained operations
	«EXPAND continueChainedOperations(php) FOR this»
«ENDDEFINE»

/**
 * A decision node: consult the incoming ConditionEdges.
 * TODO can we remove this template? It doesn't seem to do anything useful.
 */
«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::DecisionNode-»
	// decision node
	«EXPAND Contents::operationContents(start, php)»
«ENDDEFINE»

/**
 * An operation call: expand for any parameters.
 *
 * @implementation OperationCallNode The result from a {@model OperationCallNode} can be used to 
 *    execute conditional {@model ExecutionEdge execution paths}.
 * @implementation OperationCallNode If a {@model OperationCallNode} does not have any explicit pass/fail
 *    {@model ExecutionEdge ExecutionEdges} defined, then the result value is ignored.
 */
«DEFINE executionFlowStep(Boolean operation, model::operations::ExecutionEdgesSource start, Boolean php) FOR model::operations::OperationCallNode-»
	// virtual operation call "«name-»"

	«REM»
		if we are in javascript, and 
		if the remote operation to call is part of a DomainObject, then
		we need to call it remotely. this is because the JS might be
		out-of-date.
		
		PROBLEM: if we call it remotely, we have to halt execution 
		until the call resumes (since the condition needs to return 'true' or
		'false' as it is inline).
		
		TODO one solution (possibly the best) is to have a polling connection open
		to the server, which sends back results of these necessary synchronous calls
		while they happen. in that way, instead of always blocking, we can get the most
		recent result from the server. (blocking can still happen.)
		
		i.e.:

		1. client script is loaded, with the initial value of 'new_value_exists?'
		2. client script opens up pull ajax, listening for events
		   [...]
		3. event happens on server
		4. server notifies client of new result of 'new_value_exists?'
		5. client updates local cache of 'new_value_exists?' to result
		   [...]
		6. client needs to get result of 'new_value_exists?'
		7. the cached value is used 
	
		issue 180: there are no longer any types of Operations that return values
		(only conditions); so this code is not needed here.
		
	«ENDREM»
	
	«REM»We assume '$result' will be set as the result of this operation call.«ENDREM»
	«EXPAND OperationCall::callOperation(php, false) FOREACH listeners.sortBy(e|-e.priority)-»
	
	«IF getFailFlows().isEmpty || getPassFlows().isEmpty»
		/* No conditional flows; it was just an operation call */
		«FOREACH getFailFlows() AS e-»
			«EXPAND addStack(start, php) FOR e»
		«ENDFOREACH»
		«FOREACH getPassFlows() AS e-»
			«EXPAND addStack(start, php) FOR e»
		«ENDFOREACH»
	«ELSE»		
		/* Condition flow for virtual operation '«name»' */
		if (!«IF php»$result«ELSE»result«ENDIF») {
			«REM»continue expanding following conditions (if any)«ENDREM»
			«FOREACH getFailFlows() AS e-»
				«EXPAND addStack(start, php) FOR e»
			«ENDFOREACH»
		} else {
			«REM»continue expanding following conditions (if any)«ENDREM»
			«FOREACH getPassFlows() AS e-»
				«EXPAND addStack(start, php) FOR e»
			«ENDFOREACH»
		}
	«ENDIF»
«ENDDEFINE»

/**
 * Continue operations chained onto the current one.
 *
 * @implementation BuiltinOperation,ExecutionEdge 
 * 		After a {@model BuiltinOperation} has completed, all outgoing {@model ActionEdge}s 
 *		are executed in oirder of {@model ActionEdge#priority}.
 */
«DEFINE continueChainedOperations(Boolean php) FOR model::BuiltinOperation-»
	«EXPAND continueChainedOperations(php) FOREACH listeners.sortBy(e|-e.priority)»
«ENDDEFINE»

«DEFINE continueChainedOperations(Boolean php) FOR model::ECARule»
	«IF name == "fail"»
		// ignoring fail wire
	«ELSE»
		«EXPAND template::operations::OperationCall::callOperationContents(php, false)»
	«ENDIF»
«ENDDEFINE»
