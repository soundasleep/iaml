«IMPORT iaml»

/**
 * Visually rendering a map point, usually within a map.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * @implementation MapPoint
 *		If a {@model MapPoint} is not contained within a {@model Map}, then
 *		a single temporary Map implementation will still be generated to contain
 *		the map point.
 */
«DEFINE renderMapPoint(model::visual::Frame currentFrame) FOR model::visual::MapPoint-»
	«IF eContainer == null || !model::visual::Map.isInstance(eContainer)»
		«REM»since this MapPoint isn't contained within a Map, we output
		a single map to wrap around it«ENDREM»
		«EXPAND Map::renderMapSolo(currentFrame)»
	«ELSE»
		«EXPAND continueMapPointRender(currentFrame)»
	«ENDIF»
«ENDDEFINE»

/**
 * @implementation MapPoint
 *		The rendered {@model Changeable#fieldValue value} of a {@model MapPoint}
 *		is selected from the following order: the set {@model Changeable#fieldValue}; outgoing
 *		{@model SyncWire}s; incoming {@model SyncWire}s; or incoming {@model SetWire}s.
 */
«DEFINE continueMapPointRender(model::visual::Frame currentFrame) FOR model::visual::MapPoint-»
	«REM»print out any required scripting for the point«ENDREM»
	<?php
		$id = "«safeNameString(id)-»";
		$parent_id = «IF getParentMap() == null»
			"point_«safeNameString(id)-»"
		«ELSE»
			"«safeNameString(getParentMap().id)-»"
		«ENDIF»
		;
	
		switch (MAP_HANDLER) {
			case "googlemaps":
				echo_google_map_point_script($id, $parent_id);
				break;
			
			case "mock":
				echo_mock_map_point_script($id, $parent_id);
				break;
			
			default:
				throw new IamlRuntimeException("Map handler '" + MAP_HANDLER + "' unexpected");
		}
		?>

	«REM»output name«ENDREM»
	<label
		id="<?php echo $id; ?>_label" 
		for="<?php echo $id; ?>"
		class="iaml_point_label mappoint_«safeNameString(name)»">«escapeHtmlString(name)»</label>

	<div
		id="<?php echo $id; ?>" 
		style="display: none;"
		«EXPAND Render::getVisibilityInlineCode(currentFrame)»
		«EXPAND EventHandlers::getInlineClickJavascript(currentFrame)»	
		> 
		
		<?php
		
		switch (MAP_HANDLER) {
			case "googlemaps":
				echo_google_map_point($id, $parent_id);
				break;
			
			case "mock":
				echo_mock_map_point($id, $parent_id);
				break;
			
			default:
				throw new IamlRuntimeException("Map handler '" + MAP_HANDLER + "' unexpected");
		}
		?>
		
		<?php 
		
		$point_visible = false;
		$point_address = null; 

		«IF fieldValue != null»
			// check fieldValue property
			if (!$point_visible) {
				«EXPAND staticInitialMapPointValue(currentFrame) FOR fieldValue»
			}
		«ENDIF»
			
		if (!$point_visible) {
			«EXPAND mapPoint_getInitialValuesSyncWire(currentFrame) FOREACH outWires.typeSelect(model::wires::SyncWire)» 			 
		}		
		if (!$point_visible) {
			«EXPAND mapPoint_getInitialValuesSyncWire(currentFrame) FOREACH inWires.typeSelect(model::wires::SyncWire)»
		} 
		if (!$point_visible) {
			«EXPAND mapPoint_getInitialValuesSetWire(currentFrame) FOREACH inWires.typeSelect(model::wires::SetWire)»
		}

		?>

		«REM»
			show/hide the map point at runtime (client-side)
		«ENDREM»
		<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			addOnloadFunction( function() {
				<?php if ($point_visible) { ?>
					show_map_point_<?php echo $id; ?>();
					set_map_point_<?php echo $id; ?>("<?php echo htmlspecialchars($point_address); ?>");
				<?php } else { ?>
					hide_map_point_<?php echo $id; ?>();
				<?php } ?>
			} );
		/* ]]> */
		</script> 
	
		«REM»for storing and accessing the value programatically at runtime«ENDREM»
		<input type="hidden" 
			id="map_point_<?php echo $id; ?>_value" 
			value="<?php if ($point_visible) echo htmlspecialchars($point_address); ?>" />
		
		«REM»expand all children«ENDREM»
		«EXPAND Render::renderVisual(currentFrame) FOREACH children.sortBy(c|c.renderOrder)-»
	</div>
	
	«EXPAND EventHandlers::getScriptClickDefinition(currentFrame)»
	
	«IF onAccess != null»
	<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			«REM»any on-access events?«ENDREM»
			addOnloadFunction( function() {
				// expand all onAccess
				«EXPAND template::events::EventCall::callEvent(false) FOR onAccess-»
			} );
		/* ]]> */
	</script> 
	«ENDIF»
«ENDDEFINE»

/**
 * For rendering a Map that only has a fieldValue, and no contained MapPoints.
 * TODO refactor into continueMapPointRender somehow.
 */
«DEFINE renderMapFieldValue(model::visual::Frame currentFrame) FOR model::visual::Map»
	«REM»print out any required scripting for the point«ENDREM»
	<?php
		$id = "map_«safeNameString(id)-»";
		$parent_id = "«safeNameString(id)-»";
	
		switch (MAP_HANDLER) {
			case "googlemaps":
				echo_google_map_point_script($id, $parent_id);
				break;
			
			case "mock":
				echo_mock_map_point_script($id, $parent_id);
				break;
			
			default:
				throw new IamlRuntimeException("Map handler '" + MAP_HANDLER + "' unexpected");
		}
		?>

	«REM»output name«ENDREM»
	<label
		id="<?php echo $id; ?>_label" 
		for="<?php echo $id; ?>"
		class="iaml_point_label">«escapeHtmlString(name)»</label>

	<div
		id="<?php echo $id; ?>" 
		style="display: none;"
		> 
		
		<?php
		
		switch (MAP_HANDLER) {
			case "googlemaps":
				echo_google_map_point($id, $parent_id);
				break;
			
			case "mock":
				echo_mock_map_point($id, $parent_id);
				break;
			
			default:
				throw new IamlRuntimeException("Map handler '" + MAP_HANDLER + "' unexpected");
		}
		?>
		
		<?php 
		
		$point_visible = false;
		$point_address = null; 
	
		«IF fieldValue != null»
			// check fieldValue property
			if (!$point_visible) {
				«EXPAND staticInitialMapPointValue(currentFrame) FOR fieldValue»
			}
		«ENDIF»

		?>

		«REM»for storing and accessing the value programatically at runtime«ENDREM»
		<input type="hidden" 
			id="map_single_«safeNameString(id)-»_value" 
			value="<?php if ($point_visible) echo htmlspecialchars($point_address); ?>" />

		«REM»
			show/hide the map point at runtime (client-side)
		«ENDREM»
		<script language="Javascript" type="application/javascript">
		/* <![CDATA[ */
			addOnloadFunction( function() {
				<?php if ($point_visible) { ?>
					show_map_point_<?php echo $id; ?>();
					set_map_point_<?php echo $id; ?>("<?php echo htmlspecialchars($point_address); ?>");
				<?php } else { ?>
					hide_map_point_<?php echo $id; ?>();
				<?php } ?>
			} );
		/* ]]> */
		</script>
	</div>
«ENDDEFINE»

/* we have a property to provide [in PHP] */
«DEFINE staticInitialMapPointValue(model::visual::Frame currentFrame) FOR model::Property»
	«IF containingSession(this) == null»
		«REM»contained in a Frame or InternetApplication: a static value«ENDREM»
		if (get_application_value("«safeNameString(id)»", null) !== null || /* or a default value is set */ "«escapeString(defaultValue)»") {
			$value = get_application_value("«safeNameString(id)»", "«escapeString(defaultValue)»");
			$point_address = $value;
			$point_visible = true;
		}		
	«ELSE»
		«REM»contained in a Session: a session value«ENDREM»
		if (has_session("«safeName(containingSession(this))»_«safeNameString(id)»", null) !== null || /* or a default value is set */ "«escapeString(defaultValue)»") {
			$value = require_session("«safeName(containingSession(this))»_«safeNameString(id)»", "«escapeString(defaultValue)»");
			$point_address = $value;
			$point_visible = true;
		}		
	«ENDIF»
«ENDDEFINE»

/**
 * @implementation SyncWire,MapPoint
 *		If a {@model MapPoint} is connected to a {@model SyncWire}, then the
 * 		value obtained from the {@model SyncWire} will be used to initially populate the
 *		{@model MapPoint} if the value is empty.
 */
«DEFINE mapPoint_getInitialValuesSyncWire(model::visual::Frame currentFrame) FOR model::wires::SyncWire»
	«EXPAND mapPoint_staticInitialValue(currentFrame) FOR from»
	«EXPAND mapPoint_staticInitialValue(currentFrame) FOR to»
«ENDDEFINE»

/* if it connects to a SetWire that is an Property, use this
   property as the value */
«DEFINE mapPoint_getInitialValuesSetWire(model::visual::Frame currentFrame) FOR model::wires::SetWire»
	«EXPAND mapPoint_staticInitialValue(currentFrame) FOR from»
«ENDDEFINE»

/* ignore these sources */
«DEFINE mapPoint_staticInitialValue(model::visual::Frame currentFrame) FOR model::WireSource»
«ENDDEFINE»
«DEFINE mapPoint_staticInitialValue(model::visual::Frame currentFrame) FOR model::WireDestination»
«ENDDEFINE»

/* we have a property to provide [in PHP] */
«DEFINE mapPoint_staticInitialValue(model::visual::Frame currentFrame) FOR model::Property»
	«IF containingSession(this) == null»
		«REM»contained in a Frame or InternetApplication: a static value«ENDREM»
		if (get_application_value("«safeNameString(id)»", null) !== null) {
			$value = get_application_value("«safeNameString(id)»", "«escapeString(defaultValue)»");
			$point_address = $value;
			$point_visible = true;
		}
	«ELSE»
		«REM»contained in a Session: a session value«ENDREM»
		if (has_session("«safeName(containingSession(this))»_«safeNameString(id)»", null) !== null) {
			$value = require_session("«safeName(containingSession(this))»_«safeNameString(id)»", "«escapeString(defaultValue)»");
			$point_address = $value;
			$point_visible = true;
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE mapPoint_staticInitialValue(model::visual::Frame currentFrame) FOR model::VisibleThing»
	«REM»VisibleThings simply refer to the containing fieldValue implicitly«ENDREM»
	«EXPAND mapPoint_staticInitialValue(currentFrame) FOR fieldValue»
«ENDDEFINE»

«DEFINE mapPoint_staticInitialValue(model::visual::Frame currentFrame) FOR model::DomainAttributeInstance»
	«REM»from a domain attribute instance.«ENDREM»
	if (has_attribute_instance_«safeName()»()) {
		$value = htmlspecialchars(get_attribute_instance_«safeName()»());
		$point_address = $value;
		$point_visible = true;
	}
«ENDDEFINE»

«DEFINE mapPoint_staticInitialValue(model::visual::Frame currentFrame) FOR model::QueryParameter»
	«REM»from the query«ENDREM»
	if («EXPAND template::operations::Parameters::callParameterValueExists(true)») {
		$value = «EXPAND template::operations::Parameters::callParameterValue(true, false)»;
		$point_address = $value;
		$point_visible = true;
	}
«ENDDEFINE»
