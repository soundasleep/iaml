#created on: 4/11/2008
package org.openiaml.model.drools.rules.sessions

#list any import classes here.
import org.openiaml.model.drools.*;

import org.openiaml.model.inference.*;
import org.openiaml.model.model.*;
import org.openiaml.model.model.impl.*;
import org.openiaml.model.model.wires.*;
import org.openiaml.model.model.visual.*;
import org.openiaml.model.model.operations.*;
import org.openiaml.model.model.scopes.*;
import org.openiaml.model.model.components.*;

#declare any global variables here
global OverridableCreateElementsHelper handler;
global DroolsInsertionQueue queue;
global DroolsHelperFunctions functions;

/**
 * @inference Scope
 *    A {@model Scope} contains an 'onInit' {@model EventTrigger}.
 */
rule "Create 'init' event for Sessions"
	when
		session : Scope( overridden == false )
		not (event : EventTrigger( eContainer == session, session.onInit == event ))
		
	then
		EventTrigger event = handler.generatedEventTriggerOnInit(session, session);
		queue.add(event, drools);
	
end

/**
 * If a Session contains an Operation, but not a Frame, then the target Operation
 * can never be called. Consequently, we add a new Frame to all empty Sessions
 * to permit these Operations to be called.
 *
 * <p>TODO This should NOT be put as part of the inference rules, but rather the
 * code generation logic - however, this is a quicker hack ;)
 */
rule "Create an empty Frame for an empty Session, for Operation callbacks"
	when
		session : Session( overridden == false )
		not ( Frame ( eContainer == session) )

	then
		Frame frame = handler.generatedFrame(session, session);
		handler.setName(frame, "Empty frame for session");		
		queue.add(frame, drools);
	
end
