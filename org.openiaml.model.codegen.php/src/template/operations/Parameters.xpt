«IMPORT iaml»

/**
 * Parameters for operations.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Parameter definitions within the signature of an operation/method.
 */
«DEFINE signatures(Boolean php) FOR model::Parameter-»
	«IF php»
		$«safeName()-»
	«ELSE»
		«safeName()-»
	«ENDIF»
«ENDDEFINE»

/**
 * Parameters as part of an operation call.
 *
 * @param addKeys add associative array keys to PHP parameters
 */
«DEFINE callParameter(Boolean php, model::WireEdge wire, Boolean inStoreDb, Boolean addKeys, model::visual::Frame currentFrame) FOR model::wires::ParameterEdge»
	«IF addKeys && php»
		«REM»add associative keys for named parameter wires«ENDREM»
		«IF name != null && name.length > 0»
			"«safeNameString(name)»" =>
		«ENDIF» 
	«ENDIF»
	«EXPAND callParameterValue(php, wire, inStoreDb, currentFrame) FOR from»
«ENDDEFINE»

/**
 * Does the given parameter exist? Return 'true' or 'false'. Expected to be in PHP mode.
 */
«DEFINE callParameterExists(model::visual::Frame currentFrame) FOR model::wires::ParameterEdge»
	«EXPAND callParameterValueExists(currentFrame) FOR from»
«ENDDEFINE»

/**
 * The sources of parameters for parameter calls, i.e.
 * fetch the runtime value of the parameter.
 */
«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::wires::ParameterEdgesSource»
	«EXPAND exception FOR throwException("Unknown parameter wire source: " + this)»
«ENDDEFINE»

/**
 * TODO can we remove 'wire' parameter and replace it with 'currentFrame'?
 */
«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::ApplicationElementProperty»
	«IF php»
		«IF inStoreDb»
			$arg0 /* we assume the value is already in $arg0; see store_db.php::expandDomainAttributeEvents */
		«ELSE»
			«REM»
				values stored in sessions will not always be called 'fieldValue';
				perhaps fieldValue is only those stored as part of InputTextFields, etc.
			«ENDREM»
			«IF model::DomainAttributeInstance.isInstance(eContainer)»
				«REM»from a DomainAttributeInstance«ENDREM»
				«EXPAND RemoteParameter::remoteValue(php, false, wire, this) FOR this.eContainer-»
			«ELSEIF containingSession(this) != null»
				/* a property from our session */
				require_session("«safeName(containingSession(this))»_«safeName()-»"
				«IF defaultValue != null»
					, "«defaultValue»"
				«ENDIF»
				)
			«ELSE»
				get_application_value("«safeName()-»", 
					«IF defaultValue != null»
						"«defaultValue»"
					«ELSE»
						null
					«ENDIF»
				)		
			«ENDIF»
		«ENDIF»
	«ELSE»
		«IF inStoreDb»
			value
		«ELSE»
			/* wire = «wire», from = «wire.from», to = «wire.to» */
			«IF name == "fieldValue"»
				«REM»where is this value stored? is it available on the current frame?«ENDREM»
				«IF model::DomainAttributeInstance.isInstance(eContainer)»
					«REM»from a DomainAttributeInstance«ENDREM»
					«EXPAND RemoteParameter::remoteValue(php, false, wire, this) FOR this.eContainer-»
				«ELSEIF onCurrentFrame(wire.from, this)»
					«EXPAND dataSourceOnFrame FOR eContainer»
				«ELSEIF onCurrentFrame(currentFrame, this)» 
					«EXPAND dataSourceOnFrame FOR eContainer»
				«ELSEIF model::visual::InputTextField.isInstance(eContainer) || model::visual::Label.isInstance(eContainer)»
					«REM»this is a text field stored outside of the current frame«ENDREM»
					/* if you _don't_ want an operation to use a cached value of a remote Input Text Field, place the operation _outside_ of its containing frame. */
					<?php if («EXPAND isSetParameter(true, currentFrame) FOR this») { ?>
						"<?php echo «EXPAND callParameterValue(true, wire, inStoreDb, currentFrame) FOR this»; ?>"
					<?php } else { ?>
						/* throw exception */
						throwJavascriptException("Cached server-side variable '«name»' did not exist")
					<?php } ?>
				«ELSE»
					«REM»
						it's not on the current frame. it could be anywhere!
						but we want it NOW, so we can't just ask the 
						server. we have to find out where it is.
					«ENDREM»			
					«EXPAND RemoteParameter::remoteValue(php, false, wire, this) FOR this.eContainer-»
				«ENDIF»
			«ELSE»
				get_application_element_property("«safeName()-»")
			«ENDIF»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

/** Loading a current value from the currently loaded frame (i.e. client-side) */
«DEFINE dataSourceOnFrame FOR emf::EObject»
	«EXPAND exception FOR throwException("Unknown data source on current frame: " + this)»
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::InputTextField»
	document.getElementById('«safeName()»').value
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::Button»
	document.getElementById('«safeName()»').value
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::Label»
	document.getElementById('«safeName()»').innerHTML
«ENDDEFINE»

/**
 * If we have a Parameter from a TextField, we should use its 'fieldValue' property instead.
 */
«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::visual::InputTextField»
	«IF php»
		/* implicitly from InputTextField */
		«EXPAND callParameterValue(php, wire, inStoreDb, currentFrame) FOR properties.select( e | e.name == "fieldValue" ).first()-»
	«ELSE»
		«IF getFieldValue(this) != null»
			«EXPAND callParameterValue(php, wire, false, currentFrame) FOR getFieldValue(this)»
		«ELSE»
			«EXPAND exception FOR throwException("No 'fieldValue' property found in the InputTextField '" + this + "', which is being used as a Parameter source.")»
		«ENDIF» 
	«ENDIF»
«ENDDEFINE»

«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::StaticValue»
	"«value-»" /* static value "«name-»" */
«ENDDEFINE»

«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::DynamicApplicationElementSet»
	/* dynamic element set "«name-»" */
	get_dynamic_elements_«safeName()-»()
«ENDDEFINE»

«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::visual::Frame»
	/* Frame "«name-»" */
	new Visual_Frame("«id-»", "«name-»")
«ENDDEFINE»

«REM»new Users_Role("«id-»", "«name-»")«ENDREM»
«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::users::Role»
	/* Role "«name-»" */
	'«safeName()-»'
«ENDDEFINE»

«REM»new Users_Permission("«id-»", "«name-»")«ENDREM»
«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::users::Permission»
	/* Permission "«name-»" */
	'«safeName()-»'
«ENDDEFINE»

/**
 * A value specified as part of the URI, e.g. ?key=value
 */
«DEFINE callParameterValue(Boolean php, model::WireEdge wire, Boolean inStoreDb, model::visual::Frame currentFrame) FOR model::QueryParameter»
	«IF php»
		require_get("«name»"«IF defaultValue != null», "«defaultValue»"«ENDIF»)
	«ELSE»
		"<?php echo «EXPAND callParameterValue(true, wire, inStoreDb, currentFrame) FOR this»; ?>"
	«ENDIF»
«ENDDEFINE»

/**
 * Is the given property set?
 */
«DEFINE isSetParameter(Boolean php, model::visual::Frame currentFrame) FOR model::ApplicationElementProperty»
	«IF php»
		«REM»
			values stored in sessions will not always be called 'fieldValue';
			perhaps fieldValue is only those stored as part of InputTextFields, etc.
		«ENDREM»
		«IF model::DomainAttributeInstance.isInstance(eContainer)»
			«REM»from a DomainAttributeInstance«ENDREM»
			«EXPAND RemoteParameter::remoteValueIsSet(php, this) FOR this.eContainer-»
		«ELSEIF containingSession(this) != null»
			/* a property from our session */
			has_session("«safeName(containingSession(this))»_«safeName()-»")
		«ELSE»
			(get_application_value("«safeName()-»", null) != null)
		«ENDIF»
	«ELSE»
		«IF name == "fieldValue"»
			«REM»where is this value stored? is it available on the current frame?«ENDREM»
			«IF model::DomainAttributeInstance.isInstance(eContainer)»
				«REM»from a DomainAttributeInstance«ENDREM»
				«EXPAND RemoteParameter::remoteValueIsSet(php, this) FOR this.eContainer-»
			«ELSEIF model::visual::InputTextField.isInstance(eContainer) || model::visual::Label.isInstance(eContainer)»
				«REM»this is a text field stored outside of the current frame«ENDREM»
				/* if you _don't_ want an operation to use a cached value of a remote Input Text Field/Label, place the operation _outside_ of its containing frame. */
				<?php echo («EXPAND isSetParameter(true, currentFrame) FOR this») ? "true" : "false"; ?>
			«ELSE»
				«EXPAND RemoteParameter::remoteValueIsSet(php, this) FOR this.eContainer-»
			«ENDIF»
		«ELSE»
			has_application_element_property("«safeName()-»")
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

/*
 * Exists calls.
 */

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::wires::ParameterEdgesSource»
	«EXPAND exception FOR throwException("Unknown parameter wire source: " + this)»
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::ApplicationElementProperty»
	true
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::visual::InputTextField»
	true
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::StaticValue»
	true
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::DynamicApplicationElementSet»
	true
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::visual::Frame»
	true
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::users::Role»
	true
«ENDDEFINE»

«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::users::Permission»
	true
«ENDDEFINE»

/**
 * A value specified as part of the URI, e.g. ?key=value
 */
«DEFINE callParameterValueExists(model::visual::Frame currentFrame) FOR model::QueryParameter»
	«IF defaultValue == null»
		(require_get("«name»", null) !== null)
	«ELSE»
		true
	«ENDIF»
«ENDDEFINE»


«DEFINE exception FOR Object»
«ENDDEFINE»
