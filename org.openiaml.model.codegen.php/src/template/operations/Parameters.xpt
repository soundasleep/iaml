«IMPORT iaml»

/**
 * Parameters for operations.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Parameter definitions within the signature of an operation/method.
 */
«DEFINE signatures(Boolean php) FOR model::operations::ActivityParameter-»
	/* «name» */
	«IF php»
		$«safeName()-»
	«ELSE»
		«safeName()-»
	«ENDIF»
«ENDDEFINE»

/**
 * Parameters as part of an operation call.
 *
 * @param addKeys add associative array keys to PHP parameters
 */
«DEFINE callParameter(Boolean php, Boolean inStoreDb, Boolean addKeys) FOR model::Parameter»
	«IF addKeys && php»
		«REM»add associative keys for named parameter wires«ENDREM»
		«IF name != null && name.length > 0»
			"«safeNameString(name)»" =>
		«ENDIF»
	«ELSE»
		/* «name» */
	«ENDIF»
	«EXPAND callParameterValue(php, inStoreDb) FOR parameterValue»
«ENDDEFINE»

/**
 * Does the given parameter exist? Return 'true' or 'false'. Expected to be in PHP mode.
 */
«DEFINE callParameterExists(Boolean php) FOR model::Parameter»
	«EXPAND callParameterValueExists(php) FOR parameterValue»
«ENDDEFINE»

/**
 * The sources of parameters for parameter calls, i.e.
 * fetch the runtime value of the parameter.
 */
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::wires::ParameterEdgesSource»
	«throwException("Unknown parameter wire source: " + this)»
«ENDDEFINE»

/**
 * @implementation Changeable,Parameter
 *		If a {@model Changeable} is used as the {@model ParameterEdgesSource source} of a {@model Parameter},
 *		the {@model Changeable#fieldValue} of the {@model Changeable} is used as the value. 
 */
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::Changeable»
	«IF fieldValue == null»
		«throwException("Changeable '" + this + "' does not have a fieldValue")»
	«ENDIF»	
	«EXPAND callParameterValue(php, inStoreDb) FOR fieldValue»
«ENDDEFINE»

/**
 * TODO can we remove 'wire' parameter and replace it with 'currentFrame'?
 *
 * @implementation Session
 *		The <i>storage semantics</i> for an {@model Session} follow the
 *		semantics of a normal Web session.
 * @implementation Scope
 *		If a {@model Scope} is not contained by a {@model Session}, then
 *		the <i>storage semantics</i> for that {@model Scope} are globally
 *		accessible; otherwise, they follow the semantics of the {@model Session}.
 */
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::Value»
	«IF php»
		«IF inStoreDb»
			$arg0 /* we assume the value is already in $arg0 */
		«ELSE»
			«REM»
				values stored in sessions will not always be called 'fieldValue';
				perhaps fieldValue is only those stored as part of InputTextFields, etc.
			«ENDREM»
			«IF model::domain::DomainAttributeInstance.isInstance(eContainer)»
				«REM»from a DomainAttributeInstance«ENDREM»
				«EXPAND RemoteParameter::remoteValue(php, false, this) FOR this.eContainer-»
			«ELSEIF isDomainIteratorResults()»
				/* from the DomainIterator */
				get_instance_count_«safeName(eContainer)»()
			«ELSEIF isDomainIteratorCurrentPointer()»
				/* from the DomainIterator */
				get_instance_current_pointer_«safeName(eContainer)»()
			«ELSEIF containingSession(this) != null»
				/* a property from our session */
				require_session("«safeName(containingSession(this))»_«safeName()-»"
				«IF defaultValue != null»
					, "«defaultValue»"
				«ENDIF»
				)
			«ELSE»
				get_application_value("«safeName()-»", 
					«IF defaultValue != null»
						"«defaultValue»"
					«ELSE»
						null
					«ENDIF»
				)		
			«ENDIF»
		«ENDIF»
	«ELSE»
		«IF inStoreDb»
			value
		«ELSE»
			«IF model::Changeable.isInstance(eContainer) && ((model::Changeable) eContainer).fieldValue == this»
				«REM»where is this value stored? is it available on the current frame?«ENDREM»
				«IF model::domain::DomainAttributeInstance.isInstance(eContainer)»
					«REM»from a DomainAttributeInstance«ENDREM»
					«EXPAND RemoteParameter::remoteValue(php, false, this) FOR this.eContainer-»
				«ELSE»
					«REM»this is an inline call, thus the ternary operator«ENDREM»
					(on_current_frame(get_frame_id(), "«safeName()»") ?
						«EXPAND dataSourceOnFrame FOR eContainer»
					: (
						«IF model::visual::InputTextField.isInstance(eContainer) 
								|| model::visual::Label.isInstance(eContainer) 
								|| model::visual::Map.isInstance(eContainer)
								|| model::visual::MapPoint.isInstance(eContainer)»
							«REM»this is a text field stored outside of the current frame«ENDREM»
							/* if you _don't_ want an operation to use a cached value of a remote Input Text Field, place the operation _outside_ of its containing frame. */
							<?php if («EXPAND isSetParameter(true) FOR this») { ?>
								"<?php echo «EXPAND callParameterValue(true, inStoreDb) FOR this»; ?>"
							<?php } else { ?>
								/* throw exception */
								throwJavascriptException("Cached server-side variable '«name»' did not exist")
							<?php } ?>
						«ELSE»
							«REM»
								it's not on the current frame. it could be anywhere!
								but we want it NOW, so we can't just ask the 
								server. we have to find out where it is.
							«ENDREM»			
							«EXPAND RemoteParameter::remoteValue(php, false, this) FOR this.eContainer-»
						«ENDIF»
					))
				«ENDIF»
			«ELSEIF model::visual::InputTextField.isInstance(eContainer) && ((model::visual::InputTextField) eContainer).currentInput == this»
				/* the current client-side value, defaulting to fieldValue if it's not accessible */
					«REM»this is an inline call, thus the ternary operator«ENDREM»
					(on_current_frame(get_frame_id(), "«safeName()»") ?
						«EXPAND dataSourceOnFrame FOR eContainer»
					: (
						«REM»this is a text field stored outside of the current frame«ENDREM»
						/* if you _don't_ want an operation to use a cached value of a remote Input Text Field, place the operation _outside_ of its containing frame. */
						<?php if («EXPAND isSetParameter(true) FOR this») { ?>
							"<?php echo «EXPAND callParameterValue(true, inStoreDb) FOR this»; ?>"
						<?php } else { ?>
							/* throw exception */
							throwJavascriptException("Cached server-side variable '«name»' did not exist")
						<?php } ?>
					))
			«ELSEIF getClientSideCacheProperties(getRoot()).contains(this)»
				/* a cached property value */
				get_instance_property_«safeName()»()
			«ELSE»
				/* this will probably fail: how are we supposed to get arbitrarily defined Properties on the client-side? */ 
				get_application_element_property("«safeName()-»")
			«ENDIF»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

/** 
 * Loading a current value from the currently loaded frame (i.e. client-side).
 * All assumed to be client-side.
 */
«DEFINE dataSourceOnFrame FOR emf::EObject»
	throw_new_IamlJavascriptException("Unknown data source: «this»")
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::InputTextField»
	document.getElementById('«safeName()»').value
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::Button»
	document.getElementById('«safeName()»').value
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::Label»
	document.getElementById('«safeName()»<?php echo «EXPAND template::visual::Label::getIteratorListIndex»; ?>').innerHTML
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::MapPoint»
	document.getElementById('map_point_«safeNameString(id)»_value').value
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::visual::Map»
	document.getElementById('map_single_«safeNameString(id)»_value').value
«ENDDEFINE»
«DEFINE dataSourceOnFrame FOR model::domain::DomainAttributeInstance»
	<?php /* DomainAttributeInstances are cached */ echo htmlspecialchars(get_attribute_instance_«safeName()»()); ?>
«ENDDEFINE»

«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::visual::Frame»
	/* Frame "«name-»" */
	new Visual_Frame("«id-»", "«name-»")
«ENDDEFINE»

«REM»new Users_Role("«id-»", "«name-»")«ENDREM»
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::users::Role»
	/* Role "«name-»" */
	'«safeName()-»'
«ENDDEFINE»

«REM»new Users_Permission("«id-»", "«name-»")«ENDREM»
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::users::Permission»
	/* Permission "«name-»" */
	'«safeName()-»'
«ENDDEFINE»

/**
 * A value specified as part of the URI, e.g. ?key=value
 */
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::QueryParameter»
	«IF php»
		require_get("«safeNameString(name)»"«IF defaultValue != null», "«escapePhpString(defaultValue)»"«ENDIF»)
	«ELSE»
		"<?php echo «EXPAND callParameterValue(true, inStoreDb) FOR this»; ?>"
	«ENDIF»
«ENDDEFINE»

/**
 * Temporary Variables are only accessible within an Operation or Condition, so
 * we assume they have already been set.
 *
 * TODO We could use DataFlow::dataSource() for allowing ANY OperationalModelling
 * element to become a ParameterEdgeSource.
 */
«DEFINE callParameterValue(Boolean php, Boolean inStoreDb) FOR model::operations::TemporaryVariable»
	«EXPAND DataFlow::dataSource(php)»
«ENDDEFINE»

/**
 * Is the given property set?
 */
«DEFINE isSetParameter(Boolean php) FOR model::Value»
	«IF php»
		«REM»
			values stored in sessions will not always be called 'fieldValue';
			perhaps fieldValue is only those stored as part of InputTextFields, etc.
		«ENDREM»
		«IF readOnly»
			/* read only Properties are always set */
			true
		«ELSEIF model::domain::DomainAttributeInstance.isInstance(eContainer)»
			«REM»from a DomainAttributeInstance«ENDREM»
			«EXPAND RemoteParameter::remoteValueIsSet(php, this) FOR (model::domain::DomainAttributeInstance) eContainer-»
		«ELSEIF isDomainIteratorResults()»
			/* DomainIterator results count is always available */
			true			
		«ELSEIF containingSession(this) != null»
			/* a property from our session */
			(has_session("«safeName(containingSession(this))»_«safeName()-»", null) !== null)
		«ELSE»
			(get_application_value("«safeName()-»", null) !== null)
		«ENDIF»
	«ELSE»
		«IF readOnly»
			/* read only Properties are always set */
			true
		«ELSEIF name == "fieldValue" || name == "currentInput"»
			«REM»where is this value stored? is it available on the current frame?«ENDREM»
			«IF model::domain::DomainAttributeInstance.isInstance(eContainer)»
				«REM»from a DomainAttributeInstance«ENDREM»
				«EXPAND RemoteParameter::remoteValueIsSet(php, this) FOR (model::domain::DomainAttributeInstance) eContainer-»
			«ELSEIF model::VisibleThing.isInstance(eContainer)»
				«REM»this is an inline call, thus the ternary operator«ENDREM»
				(on_current_frame(get_frame_id(), "«safeName()»") ?	
					«REM»TODO XXX a text field.value is always equal to '', even if it hasn't been set!«ENDREM»	
					(typeof («EXPAND dataSourceOnFrame FOR eContainer») !== "undefined"
					&& «EXPAND dataSourceOnFrame FOR eContainer» !== "") 
					: (
						«REM»this is a text field stored outside of the current frame«ENDREM»
						/* if you _don't_ want an operation to use a cached value of a remote Input Text Field/Label, place the operation _outside_ of its containing frame. */
						<?php echo («EXPAND isSetParameter(true) FOR this») ? "true" : "false"; ?> )
					)
			«ELSE»
				«throwException("Unknown remote is set eContainer: " + eContainer + " for " + this)»
			«ENDIF»
		«ELSE»
			has_application_element_property("«safeName()-»")
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

/*
 * Exists calls.
 */

«DEFINE callParameterValueExists(Boolean php) FOR model::wires::ParameterEdgesSource»
	«throwException("Unknown parameter wire source: " + this)»
«ENDDEFINE»

«DEFINE callParameterValueExists(Boolean php) FOR model::domain::DomainAttributeInstance»
	«IF php»
		has_attribute_instance_«safeName()»()
	«ELSE»
		<?php /* DomainAttributeInstances are cached */ echo has_attribute_instance_«safeName()»() ? "true" : "false"; ?>
	«ENDIF»
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::Value»
	true
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::visual::InputTextField»
	true
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::visual::Map»
	true
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::visual::MapPoint»
	true
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::visual::Frame»
	true
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::users::Role»
	true
«ENDDEFINE»
«DEFINE callParameterValueExists(Boolean php) FOR model::users::Permission»
	true
«ENDDEFINE»

/**
 * A value specified as part of the URI, e.g. ?key=value
 */
«DEFINE callParameterValueExists(Boolean php) FOR model::QueryParameter»
	«IF !php»
		<?php echo 
	«ENDIF»
	«IF defaultValue == null»
		(require_get("«safeNameString(name)»", null) !== null)
	«ELSE»
		true
	«ENDIF»
	«IF !php»
		? "true" : "false"; ?>
	«ENDIF»	
«ENDDEFINE»

/**
 * Getting definitions for types.
 */
«DEFINE getTypeURI FOR ecore::EClassifier»
	«throwException("getTypeURI has not yet been implemented for EClassifier")»
«ENDDEFINE»

«DEFINE getTypeURI FOR model::EXSDDataType-»
'«escapePhpString(definition.uRI)-»'«ENDDEFINE»
