«IMPORT iaml»

/**
 * Condition definitions.
 */
«EXTENSION template::GeneratorExtensions»

«DEFINE conditionDefinitionFiles(Boolean php) FOR model::InternetApplication»
	«IF php»
	«FILE "output/all_conditions.php"»
		<?php				
			«EXPAND template::Template::phpCheck»
			
			// a list of all operations required
			«FOREACH getAllConditions() AS o»
				require_once(ROOT_PATH . "conditions/«safeName(o)».php");
			«ENDFOREACH»
	«ENDFILE»
	«ENDIF»

	«FOREACH getAllConditions() AS c»
		«IF php»
			«FILE "output/conditions/" + safeName(c) + ".php"»
			<?php				
				«EXPAND template::Template::phpCheck»
				
				«EXPAND conditionDefinition(php) FOR c» 
			«ENDFILE»
		«ELSE»
			«FILE "output/conditions/" + safeName(c) + "_js.php"»
			<?php
				/**
				 * This condition needs to be executed by PHP first, to allow
				 * server-side variables (such as values from databases) to be included.
				 */

				«EXPAND template::Template::commonHeader("../", "Condition: " + c.id + " (js)")»
				
				// references to other conditions, operations
				«EXPAND template::Common::commonPHPIncludes FOR getRoot()-»
				
				«EXPAND template::Template::typeJavascript»
			?>
				«EXPAND conditionDefinition(php) FOR c» 
			«ENDFILE»
		«ENDIF»
	«ENDFOREACH» 
«ENDDEFINE»

«DEFINE conditionIncludes(Boolean php) FOR model::InternetApplication-»
	«IF php»
		require_once(ROOT_PATH . "all_conditions.php");
	«ELSE»
		«EXPAND conditionInclude(php) FOREACH getAllConditions()-»
	«ENDIF»
«ENDDEFINE»

/* operation includes */
«DEFINE conditionInclude(Boolean php) FOR model::Condition-»
	«IF php»
		require_once(ROOT_PATH . "conditions/«safeName()».php");
	«ELSE»
		<script language="Javascript" type="application/javascript" src="conditions/«safeName()»_js.php"></script>
	«ENDIF»
«ENDDEFINE»

/* expand out the conditions for the frame */
/* this includes Frame and Session */
«DEFINE conditionDefinition(Boolean php) FOR model::Condition-»
	«throwException("Cannot expand an abstract Condition: " + this)»
«ENDDEFINE»

«DEFINE conditionDefinition(Boolean php) FOR model::PrimitiveCondition»
	/** primitive condition "«name»" */
	function condition_«safeName()»() {
		«REM»here we would expand out the data flow of the condition, etc«ENDREM»
		«IF model::DomainObjectInstance.isInstance(eContainer)»
			«IF php»
			return «EXPAND template::domain::DomainInstance::domainInstanceCondition(php, (model::DomainObjectInstance) eContainer)»;
			«ELSE»
			return cached_result_«safeName()»();
			«ENDIF»
		«ELSE»
			«throwException("Unknown primitive condition: '" + name + "'")»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE conditionDefinition(Boolean php) FOR model::CompositeCondition»
	/** composite condition "«name»" */
	function condition_«safeName()»(«EXPAND template::operations::Parameters::signatures(php) FOREACH parameters SEPARATOR ", "-») {
		«REM»here we would expand out the data flow of the condition, etc«ENDREM»
				
		«EXPAND ConditionFlow::conditionFlow(php) FOR startNodeCondition()-»

		return false;
	}
«ENDDEFINE»
