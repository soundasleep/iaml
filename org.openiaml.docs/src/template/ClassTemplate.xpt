«IMPORT modeldoc»

«EXTENSION metamodel::Extensions»

«DEFINE class(modeldoc::ModelDocumentation root) FOR modeldoc::EMFClass»
	«FILE "output/" + fileName()»
		«EXPAND Template::header(name, "summary")»

		<div class="navigation">
		<a href="index.html">&lt; Back to list</a>
		</div>
		
		<div class="intro">
		<h1>
		<span class="«IF abstract»abstract «ENDIF»«IF interface»interface «ENDIF»">
		«EXPAND Template::getIcon»
		«name»
		</span>
		
		«REM»get all extensions«ENDREM»
		«IF !supertypes.isEmpty»
		<small class="supertypes">
		extends
		«EXPAND supertypes FOREACH supertypes.sortBy(t|t.name) SEPARATOR ", "»
		</small>
		«ENDIF»
		</h1>
		
		<div id="tagline">
		«EXPAND ClassTemplate::javadocElement FOR tagline»
		</div>
		
		«IF !additionalDocumentation.isEmpty»
			<div id="description">
			«FOREACH additionalDocumentation AS description»
				«EXPAND javadocElement FOR description.description» «EXPAND linkReference FOR description.reference»
			«ENDFOREACH»
			</div>
		«ENDIF»
		
		«IF !subtypes.isEmpty»
		<p>
		<div id="subtypes">
			Direct subtypes:
			<div class="subtype_list">
			«EXPAND supertypes FOREACH subtypes.sortBy(t|t.name) SEPARATOR ", "»
			</div>
		</div>
		</p>
		«ENDIF»
		</div>
		
		«IF !examples.isEmpty»
		<div id="examples" class="semantic_block">
			<h2>Examples</h2>
			
			<ul>
			«EXPAND example FOREACH examples»
			</ul>
		</div>
		«ENDIF»
		
		«IF !implementationNotes.isEmpty»
		<div id="implementation" class="semantic_block">
			<h2>Implementation Notes</h2>
			
			<ul>
			«EXPAND implementationNote FOREACH implementationNotes»
			</ul>
		</div>
		«ENDIF»
		
		<div id="operational" class="semantic_block">
			<h2>Operational Semantics</h2>
			
			«IF operationalSemantics.union(getInheritedOperationalSemantics(this)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND operationalSemantics(true) FOREACH operationalSemantics»
				«EXPAND operationalSemantics(false) FOREACH getInheritedOperationalSemantics(this).sortBy( c | c.containingClass.name )»
				</ul>
			«ENDIF»
		</div>
		
		<div id="inference" class="semantic_block">
			<h2>Inference Semantics</h2>
			
			«IF inferenceSemantics.union(getInheritedInferenceSemantics(this)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND inferenceSemantics(true) FOREACH inferenceSemantics»
				«EXPAND inferenceSemantics(false) FOREACH getInheritedInferenceSemantics(this).sortBy( c | c.containingClass.name )»
				</ul>
			«ENDIF»
		</div>
		
		<div id="constraints" class="semantic_block">
			<h2>Constraints</h2>
			
			«IF constraints.union(getInheritedConstraints(this)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND constraint(true) FOREACH constraints.sortBy(c|c.constraint)»
				«EXPAND constraint(false) FOREACH getInheritedConstraints(this).sortBy(c|c.constraint)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="attributes_direct" class="semantic_block">
			<h2>Direct Attributes</h2>
			
			«IF attributes.isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND attribute(true) FOREACH attributes.sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>

		<div id="attributes_inherited" class="semantic_block">
			<h2>Inherited Attributes</h2>
			
			«IF getInheritedAttributes(this).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND attribute(false) FOREACH getInheritedAttributes(this).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="containments_direct" class="semantic_block">
			<h2>Direct Containments</h2>
			
			«IF references.select(r|r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(true) FOREACH references.select(r|r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>

		<div id="containments_inherited" class="semantic_block">
			<h2>Inherited Containments</h2>
			
			«IF getInheritedReferences(this).select(r|r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(false) FOREACH getInheritedReferences(this).select(r|r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="references_direct" class="semantic_block">
			<h2>Direct References</h2>
			
			«IF references.select(r|!r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(true) FOREACH references.select(r|!r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>

		<div id="references_inherited" class="semantic_block">
			<h2>Inherited References</h2>
			
			«IF getInheritedReferences(this).select(r|!r.containment).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND reference(false) FOREACH getInheritedReferences(this).select(r|!r.containment).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="extensions_inherited" class="semantic_block">
			<h2>Direct Extensions</h2>
			
			«IF extensions.isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND extension(true) FOREACH extensions.sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		<div id="extensions_inherited" class="semantic_block">
			<h2>Inherited Extensions</h2>
			
			«IF getInheritedExtensions(this).reject(e|extensions.name.contains(e.name)).isEmpty»
				<div class="none">(none)</div>
			«ELSE»
				<ul>
				«EXPAND extension(false) FOREACH getInheritedExtensions(this).reject(e|extensions.name.contains(e.name)).sortBy(a|a.name)»
				</ul>
			«ENDIF»
		</div>
		
		«EXPAND Template::footer»
	«ENDFILE»
«ENDDEFINE»

«DEFINE supertypes FOR modeldoc::EMFClass-»<span class="class_link"><a href="«fileName()»" class="«IF abstract»abstract «ENDIF»«IF interface»interface «ENDIF»">«EXPAND Template::getIcon»</a> <a href="«fileName()»" class="«IF abstract»abstract «ENDIF»«IF interface»interface «ENDIF»">«name»</a></span>«ENDDEFINE»

«DEFINE example FOR modeldoc::Example»
	<li>
		«EXPAND linkReference FOR exampleModel»
		:
		«EXPAND javadocElement FOR description»

		«EXPAND linkReference FOR reference»
	</li>
«ENDDEFINE»

«DEFINE operationalSemantics(Boolean local) FOR modeldoc::OperationalSemantic»
	<li>
		«EXPAND javadocElement FOR description» «EXPAND linkReference FOR reference»
		«IF !local»
		[from «EXPAND supertypes FOR containingClass»]
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE inferenceSemantics(Boolean local) FOR modeldoc::InferenceSemantic»
	<li>
		«EXPAND javadocElement FOR description» «EXPAND linkReference FOR reference»
		«IF !local»
		[from «EXPAND supertypes FOR containingClass»]
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE implementationNote FOR modeldoc::ImplementationNote»
	<li>
		«EXPAND javadocElement FOR description» «EXPAND linkReference FOR reference»
	</li>
«ENDDEFINE»

«DEFINE constraint(Boolean local) FOR modeldoc::Constraint»
	<li class="constraint">
		«IF type == modeldoc::ConstraintType::WARNING»
			<span class="warning">
		«ELSE»
			<span class="error">
		«ENDIF»
		«message»
		«EXPAND linkReference FOR reference»
		«IF !local»
		[from «EXPAND supertypes FOR containingClass»]
		«ENDIF»
		</span>
	</li>
«ENDDEFINE»

«DEFINE attribute(Boolean local) FOR modeldoc::EMFAttribute»
	<li>
		«IF local»
		«name»
		«ELSE»
		<a href="«fileName(containingType)»">«name»</a>
		«ENDIF»
		:
		«type»
		«IF lowerBound == 0»
		(optional)
		«ELSEIF defaultLiteral != null && defaultLiteral.length > 0»
		(default: «defaultLiteral»)
		«ELSE»
		(<b>required</b>)
		«ENDIF»
	</li>
«ENDDEFINE»

«DEFINE reference(Boolean local) FOR modeldoc::EMFReference»
	<li>
		«IF local»
		«name»
		«ELSE»
		<a href="«fileName(containingType)»">«name»</a>
		«ENDIF»
		:
		«IF lowerBound == upperBound»
		[«lowerBound»]
		«ELSE»
		[«lowerBound»...«IF upperBound==-1»*«ELSE»«upperBound»«ENDIF»]
		«ENDIF»
		«EXPAND supertypes FOR type»
	</li>
«ENDDEFINE»

«DEFINE extension(Boolean local) FOR modeldoc::ModelExtension»
	<li>
		«IF local»
		«value»
		«ELSE»
		<a href="«fileName(containingClass)»">«value»</a>
		«ENDIF»
		
		«EXPAND linkReference FOR reference»
	</li>
«ENDDEFINE»

«DEFINE javadocElement FOR modeldoc::Reference»
	<span class="error">Unknown javadoc '«this»'</span>
«ENDDEFINE»

«DEFINE javadocElement FOR modeldoc::JavadocTagElement»<span class="javadocTag">«IF name == "@inference" || name == "@operational" || name == "@implementation" || name == "@example"-»
«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«EXPAND javadocSemanticsElement FOR fragments.first()-»
«EXPAND javadocElement FOREACH fragments.withoutFirst()-» 
«ELSEIF name == "@model" || name == "@link"-»
«EXPAND javadocModelElement FOREACH fragments-»
«ELSE-»
«EXPAND javadocElement FOREACH fragments-»
«ENDIF-»</span>«ENDDEFINE»

«DEFINE javadocElement FOR modeldoc::JavadocTextElement-»
«value-»
«ENDDEFINE»

«DEFINE javadocModelElement FOR modeldoc::JavadocTextElement-»
«IF value.contains(".") || value.contains("#")-»
«value-»«REM»the value contains an illegal character; it can't link to a model element«ENDREM»
«ELSE-»
«IF value.trim().contains(" ")-»
«LET value.trim().split(" ") AS bits-»<a href="«bits.first()».html">«FOREACH bits.withoutFirst().withoutLast() AS s»«s» «ENDFOREACH»«bits.last()»</a>«ENDLET-»
«ELSE-»<a href="«value».html">«value»</a>«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«REM»need to remove the first text in the tag (referring to the model elements to tag)«ENDREM»
«DEFINE javadocSemanticsElement FOR modeldoc::JavadocTextElement»
	«FOREACH value.trim().split(" ").withoutFirst() AS s»«s» «ENDFOREACH»
«ENDDEFINE»
«DEFINE javadocSemanticsElement FOR modeldoc::JavadocFragment»
	<span class="error">(unknown semantic starting tag '«this»')</span>
«ENDDEFINE»

/* no special meaning; just render it like normal */
«DEFINE javadocModelElement FOR modeldoc::JavadocFragment»
	«EXPAND javadocElement» 
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::Reference»
	<span class="error">Unknown reference '«this»'</span>
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::JavaMethod»
	[<a href="«EXPAND browseSource»«javaClass.plugin»/src/«getPackage(javaClass.package)»/«javaClass.name».java#«line»">«name»()</a>]
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::JavaClass»
	[<a href="«EXPAND browseSource»«plugin»/src/«getPackage(package)»/«name».java">«name»</a>]
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::DroolsRule»
	[<a href="«EXPAND browseSource»«package.plugin»/«getPackage(package.package)»/«package.name».drl#«line»">«name»</a>]
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::Template»
	[<a href="«EXPAND browseSource»«templateFile.plugin»/«getPackage(templateFile.package)»/«templateFile.name».xpt#«line»">«name»</a>]
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::FileLineReference»
	[<a href="«EXPAND browseSource»«file.plugin»/«getPackage(file.package)»/«file.name»#«line»">«file.name»</a>]
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::FileReference»
	[<a href="«EXPAND browseSource»«plugin»/«getPackage(package)»/«name»">«name»</a>]
«ENDDEFINE»

«DEFINE linkReference FOR modeldoc::ModelReference»
	[<a href="«EXPAND viewSource»«plugin»/src/«getPackage(package)»/«name»/«name».html">«name».iaml</a>
	(<a href="«EXPAND viewSource»«plugin»/src/«getPackage(package)»/«name».iaml">source</a>)]
«ENDDEFINE»

«DEFINE browseSource FOR emf::EObject-»http://code.google.com/p/iaml/source/browse/trunk/«ENDDEFINE»

«DEFINE viewSource FOR emf::EObject-»http://iaml.googlecode.com/svn/trunk/«ENDDEFINE»

/** 
 * a hack way to create backtrace-able errors
 * based on http://www.openarchitectureware.org/forum/viewtopic.php?showtopic=5540  
 */
«DEFINE exception FOR Object»
«ENDDEFINE»
