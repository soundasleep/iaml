/**
 * [issue 47]
 * Modify the XXXCanonicalEditPolicy for the diagram to properly
 * render contained shortcuts; in particular, replaces
 * refreshSemantic() methods.
 *
 * [issue 57]
 * Phantom nodes can no longer be drag/dropped onto the editor; we 
 * allow this again by adding logic to preventDragDrop(Request) to
 * allow the drag/drop of nodes that can be rendered visually in 
 * our current view.
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::diagram::updater::Utils»

/**
 * Used to return EMPTY_LIST.
 */
«AROUND getSemanticConnectionsList FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get a list of all EObjects in the current diagram that need to be made into Edges. In particular this will go outside simply direct containment.")»
	protected java.util.List getSemanticConnectionsList() {
		org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
		java.util.List result = new java.util.LinkedList();
		for (java.util.Iterator it = «editorGen.diagramUpdater.getDiagramUpdaterQualifiedClassName()».getAllChildrenEdges(viewObject)
				.iterator(); it.hasNext();) {
			result.add(((org.eclipse.emf.ecore.EObject) it.next()));
		}
		return result;
	}
«ENDAROUND»

/**
 * Used to return null.
 */
«AROUND getSourceElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] We need to override this method to get the correct EObject.")»
	protected org.eclipse.emf.ecore.EObject getSourceElement(org.eclipse.emf.ecore.EObject relationship) {
		// NOTE: model-specific
		if (relationship instanceof org.openiaml.model.model.WireEdge) {
			return ((org.openiaml.model.model.WireEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.ExecutionEdge) {
			return ((org.openiaml.model.model.ExecutionEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.DataFlowEdge) {
			return ((org.openiaml.model.model.DataFlowEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ParameterEdge) {
			return ((org.openiaml.model.model.wires.ParameterEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ExtendsEdge) {
			return ((org.openiaml.model.model.wires.ExtendsEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ProvidesEdge) {
			return ((org.openiaml.model.model.wires.ProvidesEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.wires.RequiresEdge) {
			return ((org.openiaml.model.model.wires.RequiresEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ConstraintEdge) {
			return ((org.openiaml.model.model.wires.ConstraintEdge) relationship).getFrom();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ConditionEdge) {
			return ((org.openiaml.model.model.wires.ConditionEdge) relationship).getFrom();
		}
		
		// if we get this far, there may be a relationship type that
		// we're not checking for
		String errorMessage = "Could not resolve source element for relationship element '" + relationship + "'";
		org.eclipse.gmf.runtime.common.core.util.Log.error(org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin.getInstance(), 
				org.eclipse.core.runtime.IStatus.WARNING, 
				errorMessage,
				new java.lang.RuntimeException(errorMessage));
		return null;
	}
«ENDAROUND»

/**
 * Used to return null.
 */
«AROUND getTargetElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] We need to override this method to get the correct EObject.")»
	protected org.eclipse.emf.ecore.EObject getTargetElement(org.eclipse.emf.ecore.EObject relationship) {
		// NOTE: model-specific
		if (relationship instanceof org.openiaml.model.model.WireEdge) {
			return ((org.openiaml.model.model.WireEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.ExecutionEdge) {
			return ((org.openiaml.model.model.ExecutionEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.DataFlowEdge) {
			return ((org.openiaml.model.model.DataFlowEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ParameterEdge) {
			return ((org.openiaml.model.model.wires.ParameterEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ExtendsEdge) {
			return ((org.openiaml.model.model.wires.ExtendsEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ProvidesEdge) {
			return ((org.openiaml.model.model.wires.ProvidesEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.wires.RequiresEdge) {
			return ((org.openiaml.model.model.wires.RequiresEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ConstraintEdge) {
			return ((org.openiaml.model.model.wires.ConstraintEdge) relationship).getTo();
		}
		if (relationship instanceof org.openiaml.model.model.wires.ConditionEdge) {
			return ((org.openiaml.model.model.wires.ConditionEdge) relationship).getTo();
		}
		
		// if we get this far, there may be a relationship type that
		// we're not checking for
		String errorMessage = "Could not resolve source element for relationship element '" + relationship + "'";
		org.eclipse.gmf.runtime.common.core.util.Log.error(org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin.getInstance(), 
				org.eclipse.core.runtime.IStatus.WARNING, 
				errorMessage,
				new java.lang.RuntimeException(errorMessage));
		return null;
	}
«ENDAROUND»

«AROUND additions FOR gmfgen::GenDiagram»
	«targetDef.proceed()»
	
	«EXPAND xpt::Common::generatedMemberComment(
		"Jevon: [issue 57] If we remove the direct containment, we can no longer drag/drop shortcuts into the editor.\n\n" +
		"This extension allows us to drag/drop elements that are still able to be rendered directly."
	)»
	@Override
	protected boolean preventDropElement(Object dropElement) {
		if (dropElement instanceof org.eclipse.emf.ecore.EObject) {
			org.eclipse.emf.ecore.EObject resolved = (org.eclipse.emf.ecore.EObject) dropElement;
			
			if («EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(getDiagram(), resolved) != -1) {
				return false;	// can create this node in this diagram
			}
		}
		
		return super.preventDropElement(dropElement);
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] We add additional logic to findEditPartForElement. The original method would dive straight into the ancestor of the view, even though in this case, host() returns the container of the actual EditPart we might be looking for. Otherwise it asks the parent method for the right result.\n\n@return an editpart; <tt>null</tt> if non could be found.")»
	protected org.eclipse.gef.EditPart findEditPartForElement(org.eclipse.emf.ecore.EObject element, org.eclipse.emf.ecore.EObject context,
			java.util.List parts) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart host = (org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart) getHost();
		for (Object ep : host.getConnections()) {
			org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart cep = (org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart) ep;
			if (element.equals(cep.resolveSemanticElement())) {
				// we found the edit part already
				return cep;
			}
		}

		// otherwise, consult the parent
		return super.findEditPartForElement(element, context, parts);
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] If we are trying to create a connection to an Edge, this method will return false, because the edge.getParent() = the root diagram window, not the XXXEditPart that were actually after.\n\nSo, we add some special logic to an otherwise direct copy, to assume we _can_ create connections between ConnectionEditParts, even if they dont have a CanonicalEditPolicy. \n\n @see CanonicalConnectionEditPolicy#canCreateConnection(EditPart, EditPart)")»
	protected boolean canCreateConnection(org.eclipse.gef.EditPart sep, org.eclipse.gef.EditPart tep,
			org.eclipse.emf.ecore.EObject connection) {
		if (sep != null && sep.isActive() && tep != null && tep.isActive()) {

			org.eclipse.gmf.runtime.notation.View src = (org.eclipse.gmf.runtime.notation.View) sep.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
			org.eclipse.gmf.runtime.notation.View tgt = (org.eclipse.gmf.runtime.notation.View) tep.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
			if (src != null && tgt != null) {

				return ((sep instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart) || sep.getParent()
						.getEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CANONICAL_ROLE) != null)
						&& ((tep instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart) || tep
								.getParent().getEditPolicy(
										org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CANONICAL_ROLE) != null);
			}
		}
		return false;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] We create our own method to create connection views, so we can wrap the elementAdapter with another layer - IElementTypeElementAdapter - which lets us supply IElementType information to the adapter. Otherwise adapter.getAdapter(IElementType.class) will always return null. Otherwise, this method is copied directly from createConnectionView. \n\n Creates a connection view facade element for the supplied semantic element. An empty string is used as the default factory hint. \n\n @see #createConnectionView(EObject, int) \n @see IElementTypeElementAdapter")»
	protected org.eclipse.gmf.runtime.notation.Edge myCreateConnectionView(org.eclipse.emf.ecore.EObject connection, int index) {
		org.eclipse.gef.EditPart sep = getSourceEditPartFor(connection);
		org.eclipse.gef.EditPart tep = getTargetEditPartFor(connection);
		if (!canCreateConnection(sep, tep, connection)) {
			return null;
		}

		org.eclipse.gmf.runtime.notation.View sView = (org.eclipse.gmf.runtime.notation.View) sep.getModel();
		org.eclipse.gmf.runtime.notation.View tView = (org.eclipse.gmf.runtime.notation.View) tep.getModel();
		org.eclipse.gmf.runtime.notation.Edge model = null;
		String factoryHint = getDefaultFactoryHint();
		
		/*
		 * Jevon: [issue 124] connections between shortcuts do not persist across Eclipse restart.
		 * 
		 * It seems this is because while Nodes may be successfully saved into an .iaml_diagram
		 * instance, Edges are not. The Edges do not correctly contain the correct
		 * semantic hint (e.g. "4002") so cannot be created.
		 *
		 * As a hack solution, if the factory hint is null, we get the factory hint
		 * (which appears to be synonymous with semantic hint) from the VisualIDRegistry,
		 * and use this.
		 *
		 * This is inspired by VisualIDRegistry.getNodeVisualID().
		 */
		if (factoryHint == null) {
			// Semantic hint is not specified. Can be a result of call from CanonicalEditPolicy.
			// In this situation there should be NO elementType, visualID will be determined
			// by VisualIDRegistry.getNodeVisualID() for domainElement.
			int visualID = «EXPAND xpt::editor::VisualIDRegistry::getLinkWithClassVisualIDMethodCall»(connection);
			if (visualID != -1) {
				factoryHint = String.valueOf(visualID);
			}
		}
		
		// Jevon change: use a different adapter so we can actually get IElementTypes
		org.eclipse.core.runtime.IAdaptable elementAdapter = new IElementTypeElementAdapter(connection,
				factoryHint);
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest ccr = getCreateConnectionViewRequest(
				elementAdapter, getFactoryHint(elementAdapter, factoryHint),
				index);

		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sep);
		getCreateViewCommand(ccr); // sep.getCommand(ccr); //prime the command
		ccr.setTargetEditPart(tep);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_END);
		org.eclipse.gef.commands.Command cmd = getCreateViewCommand(ccr); // tep.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			java.util.List viewAdapters = new java.util.ArrayList();
			viewAdapters.add(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(((org.eclipse.gmf.runtime.notation.View) host().getModel())
					.getDiagram()));
			viewAdapters.add(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(sView));
			viewAdapters.add(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(tView));

			org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeMutable(viewAdapters).execute();

			executeCommand(cmd);
			org.eclipse.core.runtime.IAdaptable adapter = (org.eclipse.core.runtime.IAdaptable) ccr.getNewObject();
			org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeMutable(adapter).execute();
			model = (org.eclipse.gmf.runtime.notation.Edge) adapter.getAdapter(org.eclipse.gmf.runtime.notation.Edge.class);
			if (model == null) {
				String eMsg = org.eclipse.osgi.util.NLS
						.bind(
								org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages.CanonicalEditPolicy_create_view_failed_ERROR_,
								connection);
				java.lang.IllegalStateException ise = new java.lang.IllegalStateException(eMsg);
				org.eclipse.gmf.runtime.common.core.util.Log.error(org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin.getInstance(), org.eclipse.core.runtime.IStatus.ERROR, eMsg,
						ise);
				throw ise;
			}
		}
		return model;
	}

	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] We wrap org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter to also adapt to IElementType.class requests, so we can actually create edges in our current editor. \n\n This is also copied from the other adapter that adapts it to String.class.")»
	public static class IElementTypeElementAdapter extends org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter {
		«EXPAND xpt::Common::generatedMemberComment»
		private String _hint;

		«EXPAND xpt::Common::generatedMemberComment»
		public IElementTypeElementAdapter(org.eclipse.emf.ecore.EObject element, String hint) {
			super(element);
			_hint = hint;
		}

		«EXPAND xpt::Common::generatedMemberComment("Adds both <code>String.class</tt> and <code>IElementType.class</tt> adaptablity.")»
		public Object getAdapter(Class adapter) {
			if (adapter.equals(String.class)) {
				return _hint;
			}
			// my hack: we just get the diagram editor to get the IElementType directly
			if (adapter.equals(org.eclipse.gmf.runtime.emf.type.core.IElementType.class)) {
				return «getElementTypesQualifiedClassName()»
						.getElementType(((org.eclipse.emf.ecore.EObject) getRealObject()).eClass());
			}
			return super.getAdapter(adapter);
		}
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Return a create connection view request. \n\n Copied directly, because the original method is private.")»
	private org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest getCreateConnectionViewRequest(
			org.eclipse.core.runtime.IAdaptable elementAdapter, String hint, int index) {
		return new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest(getConnectionViewDescriptor(
				elementAdapter, hint, index));
	}

	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Return a connection view descriptor. \n\n Copied directly, because the original method is private.")»	
	private org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor getConnectionViewDescriptor(
			org.eclipse.core.runtime.IAdaptable elementAdapter, String hint, int index) {
		return new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor(elementAdapter, hint, index, false,
				((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Even though the method \"should not be overridden\", we do so anyway.\n\n @see #refreshSemanticConnections()")»
	protected java.util.List myRefreshSemanticConnections() {

		// lets just get the edges (of type org.eclipse.emf.ecore.EObject)
		java.util.List connections = getSemanticConnectionsList();
		java.util.List toDelete = new java.util.ArrayList();

		// remove duplicate links that shouldn't be there
		for (Object obj : ((org.eclipse.gmf.runtime.notation.Diagram) ((org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart) host()).getModel())
				.getEdges()) {
			Object found = null;
			org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge) obj;
			for (Object connection : connections) {
				if (edge.getElement().equals(connection)) {
					// it's OK
					// this logic also make sure that if we have multiple edges for the same object,
					// then we will keep one and delete the rest
					found = connection;
					break;
				}
			}

			if (found != null) {
				connections.remove(found);
			}

			// if it wasnt found, we need to delete it
			if (found == null) {
				toDelete.add(edge);
			}

		}

		// delete these duplicate views
		deleteViews(toDelete.iterator());

		// remaining edges in 'connections' should be added to diagram

		// create a view for each remaining semantic element.
		java.util.List viewDescriptors = new java.util.ArrayList();
		java.util.Iterator semanticChildrenIT = connections.iterator();
		while (semanticChildrenIT.hasNext()) {
			org.eclipse.emf.ecore.EObject semanticChild = (org.eclipse.emf.ecore.EObject) semanticChildrenIT.next();
			//Edge viewChild = createConnectionView(semanticChild, ViewUtil.APPEND);
			org.eclipse.gmf.runtime.notation.Edge viewChild = myCreateConnectionView(semanticChild,
					org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND);
			if (viewChild != null) {
				viewDescriptors.add(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(viewChild));
			}
		}

		/*
		 * This doesn't seem to do anything.
		 */
		//makeViewsMutable(viewDescriptors);
		/*
		 * This doesn't seem to do anything either...
		 */
		// now refresh all the connection containers to update the editparts
		/*
		HashSet ends = new HashSet();
		ListIterator li = viewDescriptors.listIterator();
		while (li.hasNext()) {
			org.eclipse.core.runtime.IAdaptable adaptable = (org.eclipse.core.runtime.IAdaptable) li.next();
			org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge) adaptable.getAdapter(org.eclipse.gmf.runtime.notation.Edge.class);
			EditPart sourceEP = getEditPartFor(edge.getSource(), edge);
			if (sourceEP != null) {
				ends.add(sourceEP);
			}
			EditPart targetEP = getEditPartFor(edge.getTarget(), edge);
			if (targetEP != null) {
				ends.add(targetEP);
			}
		}*/

		/*
		 * Nor does this...
		 */
		/*
		for (java.util.Iterator iter = ends.iterator(); iter.hasNext();) {
			EditPart end = (EditPart) iter.next();
			end.refresh();
		}
		 */

		return viewDescriptors;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Cycle through the diagram to get rid of any duplicate edges, i.e. edges that refer to the same EObject.")»
	protected void removeDuplicateEdges() {
		java.util.List objectsFound = new java.util.ArrayList();
		java.util.List toDelete = new java.util.ArrayList();
		for (Object obj : ((org.eclipse.gmf.runtime.notation.Diagram) ((org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart) host()).getModel())
				.getEdges()) {
			Object found = null;
			org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge) obj;
			if (objectsFound.contains(edge.getElement())) {
				// we need to delete this edge
				toDelete.add(edge);
			} else {
				// it's a unique object
				objectsFound.add(edge.getElement());
			}

		}

		deleteViews(toDelete.iterator());
	}
		
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Copied directly, except we add a null check.\n\n@see CanonicalEditPolicy#makeViewsImmutable(java.util.List)")»
	protected void makeViewsImmutableWithNullCheck(java.util.List<org.eclipse.core.runtime.IAdaptable> createdViews) {
		if (createdViews != null && !createdViews.isEmpty()) {
			addListenersToContainersWithNullCheck(createdViews);
			
			java.util.List<org.eclipse.core.runtime.IAdaptable> viewAdapters = prepareAdapterList(createdViews);
			org.eclipse.gef.commands.Command immutable = org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeImmutable(viewAdapters);
			AsyncCommand ac = new AsyncCommand(immutable);
			ac.execute();
		}
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Copied from {@link CanonicalEditPolicy#addListenersToContainers()}, except this method prevents some NullPointerExceptions from being thrown.")»
	private void addListenersToContainersWithNullCheck(java.util.List<org.eclipse.core.runtime.IAdaptable> createdViews) {
		org.eclipse.emf.common.util.UniqueEList<org.eclipse.gmf.runtime.notation.View> list = new org.eclipse.emf.common.util.UniqueEList<org.eclipse.gmf.runtime.notation.View>();
		for(org.eclipse.core.runtime.IAdaptable obj : createdViews) {
			org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View)obj.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
			// Jevon change: add eContainer null check
			if (view != null && view.eContainer() != null) {				
				list.add((org.eclipse.gmf.runtime.notation.View)view.eContainer());
			}
		}
		
		for(org.eclipse.gmf.runtime.notation.View containerView : list) {
			addListenerFilter("NotationListener_Container_" + containerView.getClass().getName() + '@' + Integer.toHexString(containerView.hashCode()), //$NON-NLS-1$
				  this,
				  containerView,
				  org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getView_PersistedChildren());
		}
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] This method is copied directly from {@link CanonicalEditPolicy#prepareAdapterList(java.util.List)}, since the original method is marked private.")»
	private java.util.List<org.eclipse.core.runtime.IAdaptable> prepareAdapterList(java.util.List<org.eclipse.core.runtime.IAdaptable> createdViews) {
		java.util.List<org.eclipse.core.runtime.IAdaptable> viewAdapters = new java.util.ArrayList<org.eclipse.core.runtime.IAdaptable>();
		viewAdapters.add( host() );
		
		java.util.ListIterator<org.eclipse.core.runtime.IAdaptable> li = createdViews.listIterator();
		while (li.hasNext()) {
			org.eclipse.core.runtime.IAdaptable adapter = li.next();
			
			if (adapter != null) {
				if (!(adapter instanceof org.eclipse.core.runtime.IAdaptable) && adapter instanceof org.eclipse.emf.ecore.EObject) {
					viewAdapters.add(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.emf.ecore.EObject)adapter));
				} else {
					viewAdapters.add(adapter);
				}
			}
		}
		return viewAdapters;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Copied directly from CanonicalEditPolicy.\n\nRuns the supplied commands asyncronously.")»
	protected static class AsyncCommand extends org.eclipse.gef.commands.Command {
		private final org.eclipse.gef.commands.CompoundCommand _cc;

		«EXPAND xpt::Common::generatedMemberComment»
		public AsyncCommand(String label) {
			super(label);
			_cc = new org.eclipse.gef.commands.CompoundCommand(label);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public AsyncCommand(org.eclipse.gef.commands.Command cmd) {
			this(cmd.getLabel());
			add(cmd);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public AsyncCommand(org.eclipse.gmf.runtime.common.core.command.ICommand cmd) {
			this(cmd.getLabel());
			add(cmd);
		}

		«EXPAND xpt::Common::generatedMemberComment("Executes the command asynchronously.\nCalls {@link #doExecute}.")»
		public final void execute() {
			// do not use Display.getCurrent() this mthod could be invoked
			// on a non ui thread
			org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
				public void run() {
					AsyncCommand.this.doExecute();
				}
			});
		}

		«EXPAND xpt::Common::generatedMemberComment("Return the command to be executed asynchronously.")»
		protected final org.eclipse.gef.commands.CompoundCommand getCommand() {
			return _cc;
		}

		«EXPAND xpt::Common::generatedMemberComment("Executes the command.")»
		protected void doExecute() {
			getCommand().execute();
		}

		«EXPAND xpt::Common::generatedMemberComment("Add supplied command to the list of commands to be executed.")»
		public void add(org.eclipse.gmf.runtime.common.core.command.ICommand cmd) {
			_cc.add(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(cmd));
		}

		«EXPAND xpt::Common::generatedMemberComment("Add supplied command to the list of commands to be executed.")»
		public void add(org.eclipse.gef.commands.Command cmd) {
			_cc.add(cmd);
		}
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Extends {@link #refreshSemanticChildren()} to handle shortcuts too.\n\n@see #getShortcutChildrenList()")»
	protected final java.util.List myRefreshSemanticChildren() {

		// Don't try to refresh children if the semantic element
		// cannot be resolved.
		if (resolveSemanticElement() == null) {
			return new java.util.ArrayList();
		}

		//
		// current views
		java.util.List viewChildren = getViewChildren();
		java.util.List semanticChildren = new java.util.ArrayList(getSemanticChildrenList());
		java.util.List shortcutChildren = new java.util.ArrayList(getShortcutChildrenList());

		// both lists are of EObjects
		shortcutChildren.removeAll(semanticChildren);

		java.util.List allChildren = new java.util.ArrayList();
		allChildren.addAll(semanticChildren);
		allChildren.addAll(shortcutChildren);

		// this method changes [allChildren] by removing elements within it
		// i.e. it removes any views in the list that are already in the view
		java.util.List orphaned = cleanCanonicalSemanticChildren(viewChildren,
				allChildren);
		boolean changed = false;
		//
		// delete all the remaining oprphaned views
		if (!orphaned.isEmpty()) {
			changed = deleteViews(orphaned.iterator());
		}

		// so, we need to only select elements within the semanticChildren that are
		// also inside allChildren
		java.util.List newSemanticChildren = new java.util.ArrayList();
		for (Object o : semanticChildren) {
			if (allChildren.contains(o)) {
				newSemanticChildren.add(o);
			}
		}
		java.util.List newShortcutChildren = new java.util.ArrayList();
		for (Object o : shortcutChildren) {
			if (allChildren.contains(o)) {
				newShortcutChildren.add(o);
			}
		}

		//
		// create a view for each remaining semantic element.
		java.util.List createdViews = new java.util.ArrayList();
		if (!newSemanticChildren.isEmpty()) {
			createdViews = createViews(newSemanticChildren);

			for (int i = 0; i < createdViews.size(); i++) {
				org.eclipse.gmf.runtime.notation.View createdView = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) createdViews.get(i))
						.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
				if (createdView == null) {
					String eMsg = org.eclipse.osgi.util.NLS
							.bind(
									org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages.CanonicalEditPolicy_create_view_failed_ERROR_,
									newSemanticChildren.get(i));
					java.lang.IllegalStateException ise = new java.lang.IllegalStateException(eMsg);
					org.eclipse.gmf.runtime.common.core.util.Log.error(org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin.getInstance(), org.eclipse.core.runtime.IStatus.ERROR,
							eMsg, ise);
					throw ise;
				}
			}
		}

		// the same thing, but with shortcuts
		if (!newShortcutChildren.isEmpty()) {
			createdViews.addAll(createShortcutViews(newShortcutChildren));

			for (int i = 0; i < createdViews.size(); i++) {
				org.eclipse.gmf.runtime.notation.View createdView = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) createdViews.get(i))
						.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
				if (createdView == null) {
					String eMsg = org.eclipse.osgi.util.NLS
							.bind(
									org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages.CanonicalEditPolicy_create_view_failed_ERROR_
											+ " [shortcut children]",
									newShortcutChildren.get(i));
					java.lang.IllegalStateException ise = new java.lang.IllegalStateException(eMsg);
					org.eclipse.gmf.runtime.common.core.util.Log.error(org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin.getInstance(), org.eclipse.core.runtime.IStatus.ERROR,
							eMsg, ise);
					throw ise;
				}
			}
		}

		if (changed || createdViews.size() > 0)
			postProcessRefreshSemantic(createdViews);

		return createdViews;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get all of the shortcut children to add to this diagram.")»
	protected java.util.List getShortcutChildrenList() {
		org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
		java.util.List result = new java.util.LinkedList();
		for (java.util.Iterator it = «editorGen.diagramUpdater.getDiagramUpdaterQualifiedClassName()»
				.getAllShortcutElements(viewObject).iterator(); it
				.hasNext();) {
			result.add(((«getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName()») it.next()).getModelElement());
		}
		return result;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Like {@link #createViews(java.util.List)}, but creates Shortcut commands instead.\n\nCreates a <code>View</code> element for each of the supplied semantic elements.\n\n @return a list of {@link org.eclipse.core.runtime.IAdaptable} that adapt to {@link View}.")»
	protected final java.util.List createShortcutViews(java.util.List eObjects) {
		java.util.List descriptors = new java.util.ArrayList();
		java.util.Iterator elements = eObjects.iterator();
		while (elements.hasNext()) {
			org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) elements.next();
			if (element != null) {
				org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);
				descriptors.add(descriptor);
			}
		}

		if (!descriptors.isEmpty()) {
			//
			// create the request
			org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest request = getCreateViewRequest(descriptors);

			//
			// get the command and execute it.
			org.eclipse.gef.commands.Command cmd = getCreateViewShortcutsCommand(request, descriptors,
					host());
			if (cmd != null && cmd.canExecute()) {
				org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeMutable(
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(host().getNotationView())).execute();
				executeCommand(cmd);
				java.util.List adapters = (java.util.List) request.getNewObject();
				return adapters;
			}
		}
		return new java.util.ArrayList();
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] Get the command to create both the element, and the shortcut decorator, on the request. Copied from {@link #getCreateViewCommand(CreateRequest)}.")»
	protected org.eclipse.gef.commands.Command getCreateViewShortcutsCommand(org.eclipse.gef.requests.CreateRequest request,
			java.util.List<org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor> descriptors,
			org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart host) {
		org.eclipse.gef.commands.Command command = getCreateViewCommand(request);

		if (command != null) {
			command = command.chain(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(
					new CreateShortcutDecorationsCommand(
							// these parameters are guessed, but they work
							host.getEditingDomain(), host.getPrimaryView(),
							descriptors, «getEditPartQualifiedClassName()».MODEL_ID)));

		}

		return command;
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] A simple command to add a shortcut decoration.")»
	public class CreateShortcutDecorationsCommand extends
			org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand {

		«EXPAND xpt::Common::generatedMemberComment»
		private java.util.List<org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor> myDescriptors;
		
		«EXPAND xpt::Common::generatedMemberComment»
		private String modelId;

		«EXPAND xpt::Common::generatedMemberComment("@param modelEditPart the ID to use for the annotation, e.g. PageEditPart.MODEL_ID")»
		public CreateShortcutDecorationsCommand(
				org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain, org.eclipse.gmf.runtime.notation.View parentView,
				java.util.List<org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor> viewDescriptors,
				String modelId) {
			super(editingDomain,
					"Create Shortcuts", getWorkspaceFiles(parentView)); //$NON-NLS-1$
			myDescriptors = viewDescriptors;
			this.modelId = modelId;

		}

		«EXPAND xpt::Common::generatedMemberComment("@param modelEditPart the ID to use for the annotation, e.g. PageEditPart.MODEL_ID")»
		public CreateShortcutDecorationsCommand(
				org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain, org.eclipse.gmf.runtime.notation.View parentView,
				org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor viewDescriptor, String modelId) {
			this(editingDomain, parentView, Collections
					.singletonList(viewDescriptor), modelId);
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor,
				org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
			for (org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor nextDescriptor : myDescriptors) {
				org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) nextDescriptor.getAdapter(org.eclipse.gmf.runtime.notation.View.class);
				if (view != null && view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
					org.eclipse.emf.ecore.EAnnotation shortcutAnnotation = org.eclipse.emf.ecore.EcoreFactory.eINSTANCE
							.createEAnnotation();
					shortcutAnnotation.setSource("Shortcut"); //$NON-NLS-1$
					shortcutAnnotation.getDetails().put("modelID", modelId); //$NON-NLS-1$
					view.getEAnnotations().add(shortcutAnnotation);
				}
			}
			return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
		}
	}

«ENDAROUND»

«AROUND createConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] This method isnt called anymore, because its only called by {@link #refreshConnections()}.")»
	private java.util.Collection createConnections(java.util.Collection linkDescriptors,
			java.util.Map domain2NotationMap) {
		throw new java.lang.UnsupportedOperationException(
				"createConnections() is no longer supported");
	}
«ENDAROUND»

«AROUND refreshConnections FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] This method is no longer used.")»
	private java.util.Collection refreshConnections() {
		throw new java.lang.UnsupportedOperationException(
				"refreshConnections() is no longer used");
	}
«ENDAROUND»

«AROUND refreshSemantic FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Jevon: [issue 47] We override the fundamental method of refreshing the diagram - refreshSemantic() - so that we can select not only directly contained elements, but also those referenced in shortcuts.")»
	protected void refreshSemantic() {
		java.util.List createdViews = new java.util.LinkedList();

		/*
		 * I use my own method to select all the Nodes to render in the diagram.
		 * @see #refreshSemanticChildren()
		 */
		// createdViews.addAll(refreshSemanticChildren());
		createdViews.addAll(myRefreshSemanticChildren());
		java.util.List createdConnectionViews = new java.util.LinkedList();

		/*
		 * I use my own method to select all the Edges to render in the Diagram.
		 * @see #refreshSemanticConnections()
		 */
		// createdConnectionViews.addAll(refreshSemanticConnections());
		createdConnectionViews.addAll(myRefreshSemanticConnections());

		/*
		 * Using refreshConnections() will set some Edges eContainer=null, which then throws
		 * a NullPointerException in:
		 * 
		 * java.lang.NullPointerException
		 *  	at org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy.addListenersToContainers(CanonicalEditPolicy.java:1032)
		 *   	at org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy.makeViewsImmutable(CanonicalEditPolicy.java:1008)
		 *   
		 * Plus, I'm not sure this method is even necessary anymore... this is the only
		 * method that calls it.
		 */
		//createdConnectionViews.addAll(refreshConnections());
		if (createdViews.size() > 1) {
			// perform a layout of the container
			org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host()
					.getEditingDomain(), createdViews, host());
			executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
		}

		// get rid of any duplicate edges
		removeDuplicateEdges();

		createdViews.addAll(createdConnectionViews);

		// a hack: remove all 'null' elements in the list
		/*
		while (createdViews.contains(null)) {
			createdViews.remove(null);
		}*/

		/*
		 * The default makeViewsImmutable() can throw NullPointerExceptions; my modification
		 * adds a null check.
		 */
		//makeViewsImmutable(createdViews);
		makeViewsImmutableWithNullCheck(createdViews);

	}
«ENDAROUND»