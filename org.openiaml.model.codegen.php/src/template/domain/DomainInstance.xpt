«IMPORT iaml»

/**
 * Code behind DomainObjectInstances.
 *
 * TODO move AttributeInstance code into AttributeInstance.xpt
 * TODO rename to ObjectInstance.xpt
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Domain instance methods. (Copied from Javascript. TODO refactor with code above)
 */
«DEFINE domainInstanceCall(Boolean php, model::ECARule wire, model::domain::DomainIterator object) FOR model::WireDestination»
	«throwException("Unexpected domain attribute run instance wire destination: " + this)»
«ENDDEFINE»

«DEFINE domainInstanceCall(Boolean php, model::ECARule wire, model::domain::DomainIterator object) FOR model::Action»
	«throwException("Unexpected domain attribute run instance action destination: " + this)»
«ENDDEFINE»

/**
 * An operation defined by containing feature.
 */
«DEFINE domainInstanceCall(Boolean php, model::ECARule wire, model::domain::DomainIterator object) FOR model::Operation»
	«IF php»
		«IF object.previous == this»
			object_instance_previous_«safeNameString(object.id)»()
		«ELSEIF object.next == this»
			object_instance_next_«safeNameString(object.id)»()
		«ELSEIF object.reset == this»
			object_instance_reset_«safeNameString(object.id)»()
		«ELSEIF object.skip == this»
			«REM»TODO skip needs to have a parameter«ENDREM»
			object_instance_skip_«safeNameString(object.id)»(1)
		«ELSE»
			«REM»not a contained feature; define it by name«ENDREM»
			«EXPAND namedDomainInstanceCall(php, wire, object)» 
		«ENDIF»
	«ELSE»
		«IF object.previous == this»
			queued_instance_previous('«safeNameString(object.id)»')
		«ELSEIF object.next == this»
			queued_instance_next('«safeNameString(object.id)»')
		«ELSEIF object.reset == this»
			queued_instance_reset('«safeNameString(object.id)»')
		«ELSEIF object.skip == this»
			«REM»TODO skip needs to have a parameter«ENDREM»
			queued_instance_skip('«safeNameString(object.id)»', -1)
		«ELSE»
			«REM»not a contained feature; define it by name«ENDREM»
			«EXPAND namedDomainInstanceCall(php, wire, object)» 
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

/**
 * An operation defined by name.
 *
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'save'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'new'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'add role'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'add permission'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'remove role'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'remove permission'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'next'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'previous'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'reset'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'skip'. 
 * @implementation DomainIterator,PrimitiveOperation
 *		A {@model DomainIterator} has a {@model PrimitiveOperation} named 'jump'. 
 */
«DEFINE namedDomainInstanceCall(Boolean php, model::ECARule wire, model::domain::DomainIterator object) FOR model::Operation»
	«IF php»
		«IF name=="save"»
			save_queued_store_domain_object_«safeNameString(object.id)»()
		«ELSEIF name=="new"»
			new_domain_instance_«safeNameString(object.id)»()
		«ELSE»
			«REM»TODO shouldn't the other domain instance operations be listed here? probably a major bug«ENDREM»
			«throwException("No server-side code for domainInstanceCall operation '" + name + "'")»
		«ENDIF»
	«ELSE»
		/* domain object instance: wire = «wire», object = «object», this = «this» */
		«IF name=="save"»
			«REM»"save" operation for DomainAttribute«ENDREM»
			save_queued_store_domain_object('«safeNameString(object.id)»')
		«ELSEIF name=="new"»
			«REM»create a new instance of the given DomainObjectInstance«ENDREM»
			queued_new_domain_instance('«safeNameString(object.id)»')
		«ELSEIF name=="add role"»
			«LET wire.inParameterEdges AS paramWires»
				«IF paramWires.size != 1»
					«throwException("Expected exactly one incoming ParameterEdge for add_role, got: " + paramWires.size)»
				«ELSE»
					queued_add_role(«EXPAND template::operations::Parameters::callParameter(php, false, false) FOR paramWires.first()», '«safeNameString(object.id)-»')
				«ENDIF»
			«ENDLET»
		«ELSEIF name=="add permission"»
			«LET wire.inParameterEdges AS paramWires»
				«IF paramWires.size != 1»
					«throwException("Expected exactly one incoming ParameterEdge for add_permission, got: " + paramWires.size)»
				«ELSE»
					queued_add_permission(«EXPAND template::operations::Parameters::callParameter(php, false, false) FOR paramWires.first()», '«safeNameString(object.id)-»')
				«ENDIF»
			«ENDLET»
		«ELSEIF name=="remove role"»
			«LET wire.inParameterEdges AS paramWires»
				«IF paramWires.size != 1»
					«throwException("Expected exactly one incoming ParameterEdge for remove_role, got: " + paramWires.size)»
				«ELSE»
					queued_remove_role(«EXPAND template::operations::Parameters::callParameter(php, false, false) FOR paramWires.first()», '«safeNameString(object.id)-»')
				«ENDIF»
			«ENDLET»
		«ELSEIF name=="remove permission"»
			«LET wire.inParameterEdges AS paramWires»
				«IF paramWires.size != 1»
					«throwException("Expected exactly one incoming ParameterEdge for remove_permission, got: " + paramWires.size)»
				«ELSE»
					queued_remove_permission(«EXPAND template::operations::Parameters::callParameter(php, false, false) FOR paramWires.first()», '«safeNameString(object.id)-»')
				«ENDIF»
			«ENDLET»
		«ELSEIF name=="next"»
			queued_instance_next('«safeNameString(object.id)-»')
		«ELSEIF name=="previous"»
			queued_instance_previous('«safeNameString(object.id)-»')
		«ELSEIF name=="reset"»
			queued_instance_reset('«safeNameString(object.id)-»')
		«ELSEIF name=="skip"»
			«LET wire.inParameterEdges AS paramWires»
				«IF paramWires.size != 1»
					«throwException("Expected exactly one incoming ParameterEdge for skip, got: " + paramWires.size)»
				«ELSE»
					queued_instance_skip('«safeNameString(object.id)-»', «EXPAND template::operations::Parameters::callParameter(php, false, false) FOR paramWires.first()»)
				«ENDIF»
			«ENDLET»
		«ELSEIF name=="jump"»
			«LET wire.inParameterEdges AS paramWires»
				«IF paramWires.size != 1»
					«throwException("Expected exactly one incoming ParameterEdge for jump, got: " + paramWires.size)»
				«ELSE»
					queued_instance_jump('«safeNameString(object.id)-»', «EXPAND template::operations::Parameters::callParameter(php, false, false) FOR paramWires.first()»)
				«ENDIF»
			«ENDLET»
		«ELSE»
			«throwException("No client-side code for domainInstanceCall operation " + this)»
		«ENDIF»
	«ENDIF» 
«ENDDEFINE»

/**
 * A condition defined by containing feature.
 *
 * @implementation DomainIterator,PrimitiveCondition
 *		A {@model DomainIterator} has a {@model BuiltinProperty} named 'hasNext'. 
 * @implementation DomainIterator,PrimitiveCondition
 *		A {@model DomainIterator} has a {@model BuiltinProperty} named 'hasPrevious'. 
 * @implementation DomainIterator,PrimitiveCondition
 *		A {@model DomainIterator} has a {@model BuiltinProperty} named 'empty'. 
 * @implementation DomainIterator,PrimitiveCondition
 *		A {@model DomainIterator} has a {@model BuiltinProperty} named 'canSave'. 
 */
«DEFINE domainInstanceCondition(Boolean php, model::domain::DomainIterator instance) FOR model::BuiltinProperty»
	«IF php»
		«IF instance.hasNext == this»
			can_object_instance_next_«safeName(instance)»()
		«ELSEIF instance.hasPrevious == this»
			can_object_instance_previous_«safeName(instance)»()
		«ELSEIF instance.empty == this»
			is_object_instance_empty_«safeName(instance)»()
		«ELSEIF instance.canSave == this»
			can_object_instance_save_«safeName(instance)»()
		«ELSE»
			«throwException("Unknown primitive condition for DomainObjectInstance: " + this)»
		«ENDIF»
	«ELSE»
		<?php echo «EXPAND domainInstanceCondition(php, instance)» ? " true " : " false "; ?>
	«ENDIF»
«ENDDEFINE»
