/**
 * We want an easy way to refer to commands programatically.
 * This also allows us to remove the ".command" package export
 * requirement!
 *
 * It would be nice if this was in a separate file though, but
 * I'm not sure how to make GMF do this yet.
 */
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

/**
 * Define a different MessageFormatParser classname: our special one
 */
«AROUND parserQualifiedClassName(gmfgen::LabelTextAccessMethod method) FOR gmfgen::GenDiagram-»
	«IF gmfgen::LabelTextAccessMethod::NATIVE.literal == method.literal-»
		«EXPAND xpt::parsers::NativeParser::qualifiedClassName-»
	«ELSEIF gmfgen::LabelTextAccessMethod::PRINTF.literal == method.literal-»
		«EXPAND xpt::parsers::PrintfParser::qualifiedClassName-»
	«ELSEIF gmfgen::LabelTextAccessMethod::REGEXP.literal == method.literal-»
		«EXPAND xpt::parsers::RegexpParser::qualifiedClassName-»
	«ELSE-»
		ExtendedMessageFormatParser
	«ENDIF-»
«ENDAROUND»

/**
 * TODO replace the custom doc tags with the generatedMemberTemplate template
 * (I'm pretty sure you can add additional comments in it)
 */
«AROUND additions FOR gmfgen::GenDiagram-»
	/**
	 * A custom generated class to extend the MessageFormat parser.
	 *
	 * @see ExtendedMessageFormatParser#createViewProcessor
	 * @generated 
	 */
	protected class ExtendedMessageFormatParser extends «EXPAND xpt::parsers::MessageFormatParser::qualifiedClassName-»
	
	{
		public ExtendedMessageFormatParser(org.eclipse.emf.ecore.EAttribute[] features) {
			super(features);
		}
	
	  private static final String EXTENDED_FORMAT_KEY = ",formatters:";

	  /**
	   * Extend the MessageFormatParser to add additional formatters.  
	   * If the parser text is "format..." + EXTENDED_FORMAT_KEY + "0=fqn.Class,1=fqn.Class2" 
	   * it will add new instances of these fully qualified class names to the
	   * MessageFormat formatter.
	   *
	   * @see #EXTENDED_FORMAT_KEY
	   * @see java.text.MessageFormat#setFormat(int, java.text.Format)
	   * @generated
	   */
	  protected java.text.MessageFormat createAnyProcessor(String viewPattern) {
	    /**
	     * Jevon modification: add a ",formatters:0=full.Class,1=another.Class"
	     */
	    if (viewPattern.indexOf(EXTENDED_FORMAT_KEY) > 0) {
	      // we have a specialised one
	      String actualPattern = viewPattern.substring(0, viewPattern.indexOf(EXTENDED_FORMAT_KEY));
	      java.text.MessageFormat mf = new java.text.MessageFormat(actualPattern);
	      
	      // split up the patterns
	      String[] formatters = viewPattern.substring(viewPattern.indexOf(EXTENDED_FORMAT_KEY) + EXTENDED_FORMAT_KEY.length()).split(",");
	      
	      for (String format : formatters) {
	        String[] split = format.split("=", 2);
	        if (split.length != 2) {
	          throw new IllegalArgumentException("Extended formatter pattern '" + format + "' is invalid.");          
	        }
	        
	        int position = new Integer(split[0]); // could throw IllegalArgumentException if not properly formatted number
	        try {
	          mf.setFormat(position, (java.text.Format) Class.forName(split[1]).newInstance() );
	        } catch (Exception e) {
	          throw new IllegalArgumentException("Could not load class '" + split[1] + "': " + e.getMessage(), e);
	        }
	      }
	      
	      // return modified format
	      return mf;
	    }
	    
	    // default
	    return new java.text.MessageFormat(viewPattern);
	  }
	  
	  protected java.text.MessageFormat createViewProcessor(String viewPattern) {
	  	return createAnyProcessor(viewPattern);
	  }
	  protected java.text.MessageFormat createEditProcessor(String viewPattern) {
	  	return createAnyProcessor(viewPattern);
	  }
	  protected java.text.MessageFormat createEditorProcessor(String viewPattern) {
	  	return createAnyProcessor(viewPattern);
	  }
  
	}
«ENDAROUND»
