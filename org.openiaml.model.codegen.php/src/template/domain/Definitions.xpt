«IMPORT iaml»

/**
 * Method definitions for accessing Domain objects and attributes.
 */
«EXTENSION template::GeneratorExtensions»

/**
 * Expand out all domain object, instance and attribute
 * information for this InternetApplication.
 * 
 * Expected to be in PHP mode.
 */
«DEFINE domainDefinitions FOR model::InternetApplication»
	«EXPAND domainObjectDefinitions(true)»
	«EXPAND domainAttributeDefinitions(true)»
«ENDDEFINE»

/**
 * Expand out all domain object instances.
 */
«DEFINE domainObjectDefinitions(Boolean php) FOR model::InternetApplication»
	«IF php»
		require_once(ROOT_PATH . "domain/all_domain_objects.php");
	«ELSE»
		<!-- empty -->
	«ENDIF»
«ENDDEFINE»

«DEFINE allDomainObjectDefinitions FOR model::InternetApplication»
	«FILE "output/domain/all_domain_objects.php"»
		<?php
		«EXPAND template::Template::phpCheck»
		
		«EXPAND RemoteDefinitions::remoteDefinitions FOREACH getRoot().eAllContents.typeSelect(model::domain::DomainSource).select(s|s.type == model::domain::DomainStoreTypes::RSS2_0)»

		«EXPAND GetDefinitions::getDomainObject FOREACH getRoot().getAllDomainIterators()»
		«EXPAND StoreDefinitions::storeDomainObject FOREACH getRoot().getAllDomainIterators()»
		«EXPAND IterateDefinitions::iterateDefinitions FOREACH getRoot().getAllDomainIterators()»

		«EXPAND domainSchemaDefinition FOREACH getRoot().getAllDomainSchemas()»
		«EXPAND domainAttributeDefinition FOREACH getRoot().eAllContents.typeSelect(model::DomainAttribute)»
		«EXPAND domainSourceDefinition FOREACH getRoot().eAllContents.typeSelect(model::domain::DomainSource)»
		«FOREACH sources AS source»
			«FOREACH source.outSchemas.to AS schema»
				«FOREACH source.inSelects.from AS iterator»
					«EXPAND domainIteratorDefinition(schema, source) FOR iterator»
				«ENDFOREACH»
			«ENDFOREACH»
		«ENDFOREACH»
		
		/* role defintions */
		«EXPAND domainUserDefinition»
		
	«ENDFILE»
«ENDDEFINE»

/**
 * Definitions for DomainSources which also provide User instances.
 * @implementation Role
 *		Currently, we can only have <em>one</em> root {@model Role} in a given
 *		{@model InternetApplication}.
 */
«DEFINE domainUserDefinition FOR model::InternetApplication»
/**
 * Root User Role for Internet Application '«escapeString(name)»'
 * TODO Currently we can only have one root User Role in a system
 */
class DomainSchema_UserRoot extends DomainSchema {
	private function __construct() {
		$this->addAttribute(DomainAttribute_UserRoot_ID::getInstance());
		
		// list of permissions: boolean
		«FOREACH eAllContents.typeSelect(model::users::Permission) AS p»
		$this->addAttribute(Permission_«safeName(p)»::getInstance());
		«ENDFOREACH»
		
		$this->table_name = "iaml_user_root";
		$this->source_id = $this->table_name . "_id";
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainSchema_UserRoot();
		}
		return self::$instance;
	}
	
}

/**
 * Domain Attribute ID for Root User Role in Internet Application '«escapeString(name)»'
 */
class DomainAttribute_UserRoot_ID extends DomainAttribute {
	private function __construct() {
		$this->isPrimaryKey = true;
		$this->type = 'iamlInteger';
		$this->name = 'id';
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainAttribute_UserRoot_ID();
		}
		return self::$instance;
	}

}

class DomainAttribute_UserRole_Link extends DomainAttribute {
	private function __construct() {
		$this->isPrimaryKey = false;
		$this->type = 'iamlInteger';
		$this->name = 'root_user_id';
		$this->extends = DomainAttribute_UserRoot_ID::getInstance();
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainAttribute_UserRole_Link();
		}
		return self::$instance;
	}
	
}

«FOREACH eAllContents.typeSelect(model::users::Permission) AS p»
/**
 * Permission '«escapeString(p.name)»' in Internet Application «escapeString(name)»
 */
class Permission_«safeName(p)» extends DomainAttribute {
	private function __construct() {
		$this->isPrimaryKey = false;
		$this->type = 'iamlBoolean';
		$this->name = '«safeNameString(p.name)»';
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new Permission_«safeName(p)»();
		}
		return self::$instance;
	}

}
«ENDFOREACH»

/**
 * Permission checks.
 */
«EXPAND template::users::Permissions::permissionChecks»
«ENDDEFINE»

«DEFINE domainSchemaDefinition FOR model::domain::DomainSchema»
/**
 * Domain Schema '«escapeString(name)»'
 */
class DomainSchema_«safeName()» extends DomainSchema {
	private function __construct() {
		«FOREACH attributes.select(a2|a2.outExtendsEdges.to.typeSelect(model::DomainAttribute).select(a|!a.primaryKey).isEmpty) AS a»
			$this->addAttribute(DomainAttribute_«safeName(a)»::getInstance());
		«ENDFOREACH»
		«IF model::users::Role.isInstance(this)»
			«IF attributes.outExtendsEdges.to.eContainer.typeSelect(model::users::Role).isEmpty»
				/* this Role does not extend any other Roles: we need to add a link to the root role */
				$this->addAttribute(DomainAttribute_UserRole_Link::getInstance());
			«ENDIF»
		«ENDIF»
		
		$this->table_name = "«safeNameString(name)»";
		$this->source_id = $this->table_name . "_id";
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainSchema_«safeName()»();
		}
		return self::$instance;
	}
	
}

«IF model::users::Role.isInstance(this)»
«FOREACH getRoot().eAllContents.typeSelect(model::domain::DomainSource) AS source»
/**
 * A simple DomainIterator to see if a given Role exists for the given root ID.
 */
class HasRole_«safeName()»_«safeName(source)» extends DomainIterator {
	var $root_user_id;

	private function __construct($root_user_id) {
		$this->schema = DomainSchema_«safeName()»::getInstance();
		$this->source = DomainSource_«safeName(source)»::getInstance();

		$this->order_by = null;
		$this->order_ascending = true;

		$this->query = "iaml_user_root.id = :id";
		$this->is_new = false;
		$this->autosave = false;
		
		$this->limit = 1;
		
		$this->root_user_id = $root_user_id; 
	}
	
	public function constructArgs() {
		return array(
			"id" => $this->root_user_id
		);
	}
	
	public function getOffset() {
		return 0;
	}
	
	public function setOffset($value) {
		throw new IamlDomainException("Cannot set an offset for this Role query: " . get_class($this));
	}
	
	public function getNewInstanceID($key) {
		throw new IamlDomainException("Cannot get the new instance ID for a non-new object: " . get_class($this));
	}
	
	public function setNewInstanceID($key, $value) {
		throw new IamlDomainException("Cannot set the new instance ID for a non-new object: " . get_class($this));
	}
	
	«EXPAND domainIteratorGetStoredValues FOR this»
	
	// the current instance
	static $instance = null;
	public static function getInstance($root_user_id) {
		if (self::$instance == null) {
			self::$instance = new HasRole_«safeName()»_«safeName(source)»($root_user_id);
		}
		return self::$instance;
	}

}
«ENDFOREACH»

«ENDIF»
«ENDDEFINE»

«DEFINE domainAttributeDefinition FOR model::DomainAttribute»
«IF !outExtendsEdges.to.typeSelect(model::DomainAttribute).select(a|!a.primaryKey).isEmpty»
	/* ignoring DomainAttribute '«escapeString(name)»': it is an extension of a non-primary key (i.e. derived) */
«ELSE»
/**
 * Domain Attribute '«escapeString(name)»'
 */
class DomainAttribute_«safeName()» extends DomainAttribute {
	private function __construct() {
		$this->isPrimaryKey = «primaryKey ? "true" : "false"»;
		$this->type = "«escapePhpString(type.uRI)»";
		$this->name = "«safeNameString(name)»";
		
		«FOREACH outExtendsEdges AS extends»
			$this->extends = DomainAttribute_«safeName(extends.to)»::getInstance();
		«ENDFOREACH»
		/* TODO is this even necessary?		
		$this->table_name = "«safeNameString(name)»";
		$this->source_id = $this->table_name . "_id";
		*/
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainAttribute_«safeName()»();
		}
		return self::$instance;
	}
	
}
«ENDIF»
«ENDDEFINE»

«DEFINE domainSourceDefinition FOR model::domain::DomainSource»
/**
 * Domain Source for Domain Store '«escapeString(name)»'
 */
class DomainSource_«safeName()» extends DomainSource {
	private function __construct() {
		$this->schemas = array(
		«REM»
			The DomainSource API was written with the idea that multiple
			DomainIterators can connect to one DomainSource which has one
			DomainSchema; however, without adding an explicit link between
			DomainSchema and DomainIterator in the metamodel, we can't automatically
			work out the Schema type of a given DomainIterator.
			
			Thus, we hack DomainSource to always include ALL possible
			schemas for the given DomainSource FileReference in all
			copies of the schema.
		«ENDREM»
		«LET getRoot().eAllContents.typeSelect(model::domain::DomainSource)
			.select(s|resolveFileReference(s) == resolveFileReference(this) && s.type == type).outSchemas.to AS allSchemas»
			«FOREACH allSchemas AS obj»
				DomainSchema_«safeName(obj)»::getInstance(),
			«ENDFOREACH»
		«ENDLET»
		«IF !outSchemas.to.typeSelect(model::users::Role).isEmpty»
			/* the root user schema */
			DomainSchema_UserRoot::getInstance(),
		«ENDIF»
		);
		$this->type = '«escapePhpString(type.toString())»';
		$this->file = «EXPAND template::domain::Select::getDatabaseStoreString»;
	}
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainSource_«safeName()»();
		}
		return self::$instance;
	}
	
}
«ENDDEFINE»

«DEFINE domainIteratorDefinition(model::domain::DomainSchema schema, model::domain::DomainSource source) FOR model::domain::DomainIterator»
/**
 * Domain Iterator for Domain Iterator '«escapeString(name)»'
 */
class DomainIterator_«safeName()» extends DomainIterator {
	«IF query == "new"»
		«EXPAND domainIteratorDefNew(schema, source)»
	«ELSE»
		«EXPAND domainIteratorDefSelect(schema, source)»
	«ENDIF»
	
	«EXPAND domainIteratorGetStoredValues FOR this»
	
	// the current instance
	static $instance = null;
	public static function getInstance() {
		if (self::$instance == null) {
			self::$instance = new DomainIterator_«safeName()»();
		}
		return self::$instance;
	}

}
«ENDDEFINE»

«DEFINE domainIteratorSchemas(model::domain::DomainSource source) FOR model::domain::DomainSchema»
	$this->schema = DomainSchema_«safeName()»::getInstance();
	$this->source = DomainSource_«safeName(source)»::getInstance();
«ENDDEFINE»

«DEFINE domainIteratorDefSelect(model::domain::DomainSchema schema, model::domain::DomainSource source) FOR model::domain::DomainIterator»
	// a SelectWire

	private function __construct() {
		«EXPAND domainIteratorSchemas(source) FOR schema»

		«IF orderBy != null»
			$this->order_by = DomainAttribute_«safeName(orderBy)»::getInstance();
			$this->order_ascending = «orderAscending ? "true" : "false"»;
		«ELSE»
			$this->order_by = null;
			$this->order_ascending = true;
		«ENDIF»

		$this->query = «EXPAND Select::getQuery»;
		$this->is_new = false;
		$this->autosave = «autosave ? "true" : "false"»;
		
		$this->limit = «limit»; 
	}
	
	public function constructArgs() {
		return array(«EXPAND template::operations::Parameters::callParameter(true, false, true) FOREACH inParameterEdges SEPARATOR ","»);
	}
	
	public function getOffset() {
		return get_current_offset_«safeName()»();		
	}
	
	public function setOffset($value) {
		set_current_offset_«safeName()»($value);
	}
	
	public function getNewInstanceID($key) {
		throw new IamlDomainException("Cannot get the new instance ID for a non-new object: " . get_class($this));
	}
	
	public function setNewInstanceID($key, $value) {
		throw new IamlDomainException("Cannot set the new instance ID for a non-new object: " . get_class($this));
	}
«ENDDEFINE»

«DEFINE domainIteratorDefNew(model::domain::DomainSchema schema, model::domain::DomainSource source) FOR model::domain::DomainIterator»
	// a NewInstanceWire

	private function __construct() {
		«EXPAND domainIteratorSchemas(source) FOR schema»

		$this->order_by = "";
		$this->order_ascending = true;
		$this->query = "";
		
		$this->is_new = true;
		$this->autosave = «autosave ? "true" : "false"»;
	}
	
	public function constructArgs() {
		return array(
			// no args
		);
	}
	
	public function getOffset() {
		throw new IamlDomainException("Cannot get the offset for a new object: " . get_class($this));		
	}
	
	public function setOffset($value) {
		throw new IamlDomainException("Cannot set the offset for a new object: " . get_class($this));
	}

	public function getNewInstanceID($key) {
		return $this->getStoredValue("new_instance_id_$key");
	}
	
	public function setNewInstanceID($key, $value) {
		$this->setStoredValue("new_instance_id_$key", $value);
	}

«ENDDEFINE»

«DEFINE domainIteratorGetStoredValues FOR emf::EObject»
	«IF containingSession() != null»
	/**
	 * Note that PHP's <code>is_set()</code> returns <code>false</code> for variables that are set to <code>NULL</code>
	 */
	public function getStoredValue($key, $default = null) {
		$target_key = "stored_value_«safeName()-»_" . $key;
		if (has_session($target_key)) {
			return require_session($target_key);
		}
		return $default;
	}

	public function setStoredValue($key, $value) {
		$target_key = "stored_value_«safeName()-»_" . $key;
		$_SESSION[$target_key] = $value;
	}
	«ELSE»
	/**
	 * Note that PHP's <code>is_set()</code> returns <code>false</code> for variables that are set to <code>NULL</code>
	 */
	public function getStoredValue($key, $default = null) {
		$target_key = "stored_value_«safeName()-»_" . $key;
		if (get_application_value($target_key, false) !== false) {
			return get_application_value($target_key, false);
		}
		return $default;
	}

	public function setStoredValue($key, $value) {
		$target_key = "stored_value_«safeName()-»_" . $key;
		set_application_value($target_key, $value);
	}
	«ENDIF»

«ENDDEFINE»

/**
 * Expand out all domain attribute instances.
 */
«DEFINE domainAttributeDefinitions(Boolean php) FOR model::InternetApplication»
	«IF php»
		require_once(ROOT_PATH . "domain/all_domain_attributes.php");
	«ELSE»
		<script language="Javascript" type="application/javascript" src="domain/all_domain_attributes_js.php"></script>
	«ENDIF»
«ENDDEFINE»

«DEFINE allDomainAttributeDefinitions FOR model::InternetApplication»
	«FILE "output/domain/all_domain_attributes.php"»
		<?php
		«EXPAND template::Template::phpCheck»
		
		«EXPAND Includes::getInclude FOREACH getAllDomainAttributeInstances()»
	«ENDFILE»

	«FILE "output/domain/all_domain_attributes_js.php"»
		<?php
			/**
			 * This operation needs to be executed by PHP first, to allow
			 * server-side variables (such as values from databases) to be included.
			 */

			«EXPAND template::Template::commonHeader("../", "all_domain_attributes (js)")»
			«EXPAND template::Template::typeJavascript»
		?>
		
		«EXPAND StoreDefinitions::storeDomainAttribute(false) FOREACH getAllDomainAttributeInstances()»
	«ENDFILE»
«ENDDEFINE»

«DEFINE exception FOR Object»
«ENDDEFINE»
