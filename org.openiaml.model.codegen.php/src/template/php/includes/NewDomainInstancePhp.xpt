«IMPORT iaml»

«EXTENSION template::GeneratorExtensions»

«DEFINE newDomainInstancePhp FOR model::InternetApplication-»
<?php
/**
 * Create a new object instance for our session.
 * 
 * $frame_id lets the server know which frame the client is currently on;
 * the script will search through all properties on the InternetApplication
 * and let the client know if any of these properties (contained on
 * frame $frame_id) need to update.
 */
 
«EXPAND template::Template::commonHeader("", "New Domain Instance")»

«EXPAND template::domain::Definitions::domainDefinitions»

log_message("new_domain_instance.php? " . print_r($_GET, true));

// the domain object instance to set
$id = require_get("id");

// the current frame ID we are on
// (used to select which elements to inform the client to update)
$frame_id = require_get("frame");

// create a function name
// TODO this is probably insecure
$function = "new_domain_instance_" . $id;

// execute
$function();
log_message("new_domain_instance.php: $function called from frame $frame_id");

echo "ok";

/* Is there additional actions we should do on the client-side once this
 * property has changed? */
«EXPAND potentialDomainObjectInstanceUpdatesRequired FOREACH eAllContents.typeSelect(model::domain::DomainIterator)»

echo_necessary_update_callbacks();

«ENDDEFINE»

«DEFINE potentialDomainObjectInstanceUpdatesRequired FOR model::domain::DomainIterator»
	if ($id == "«safeName()-»") {
		/* DomainObjectInstance "«name-»" («id-») */
		
		/* expand all attributes */
		«IF currentInstance == null»
			// no current instance in this iterator
		«ELSE»
			«EXPAND potentialDomainAttributeInstanceUpdatesRequired FOREACH currentInstance.featureInstances.typeSelect(model::domain::DomainAttributeInstance)»
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE potentialDomainAttributeInstanceUpdatesRequired FOR model::domain::DomainAttributeInstance»
	/* attribute «this» */
	/* expand all 'edit' events */
	«EXPAND potentialEditEvent("edit") FOREACH {onChange}»
«ENDDEFINE»

«DEFINE potentialEditEvent(String eventName) FOR model::Event»
	«IF eventName=="edit"»
		«EXPAND editEvent FOREACH outActions.sortBy(e|-e.priority)»
	«ELSE»
		«throwException("Invalid event name '" + eventName + "'")»
	«ENDIF»
«ENDDEFINE»

«DEFINE editEvent FOR model::ECARule»
	«EXPAND editEventTarget(this) FOR to»
«ENDDEFINE»

«DEFINE editEventTarget(model::ECARule wire) FOR model::WireDestination»
	// unknown RunAction target: «this»
«ENDDEFINE»

«DEFINE editEventTarget(model::ECARule wire) FOR model::Action»
	// unknown RunAction target: «this»
«ENDDEFINE»

«DEFINE editEventTarget(model::ECARule wire) FOR model::Operation»
	/* we have an operation that we should call on edit */
	/* is it on the current frame? */
	if ($frame_id == '«containingFrame(this).safeName()»') {
		// yes: call the operation
		log_message("calling client-side operation «name»");
		log_message("call_operation " 
			. escape_parameter_string("«safeName()»")
			/* expand out all parameters */
			«EXPAND clientSideOperationCallParamater(wire)
				FOREACH wire.inParameterEdges»
			);
		echo "\ncall_operation " 
			. escape_parameter_string("«safeName()»")
			/* expand out all parameters */
			«EXPAND clientSideOperationCallParamater(wire)
				FOREACH wire.inParameterEdges»
			;
	}
«ENDDEFINE»

/**
 * The parameter to pass to the client.
 */
«DEFINE clientSideOperationCallParamater(model::ECARule wire) FOR model::Parameter»
	. " " . escape_parameter_string(«EXPAND template::operations::Parameters::callParameterValue(true, false) FOR from»)
«ENDDEFINE»
